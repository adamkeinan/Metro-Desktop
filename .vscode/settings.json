{

// Editor

    // Controls whether the diff editor shows changes in leading or trailing whitespace as diffs.
	"diffEditor.ignoreTrimWhitespace": true,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Controls whether the editor should run in a mode where it is optimized for screen readers.
	//  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
	//  - on: The editor will be permanently optimized for usage with a Screen Reader.
	//  - off: The editor will never be optimized for usage with a Screen Reader.
	"editor.accessibilitySupport": "auto",

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste or move lines. Extensions with indentation rules of the language must be available.
	"editor.autoIndent": true,

	// Controls whether the editor should automatically surround selections.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - brackets: Surround with brackets but not quotes.
	//  - quotes: Surround with quotes but not brackets.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Code action kinds to be run on save.
	"editor.codeActionsOnSave": {},

	// Timeout in milliseconds after which the code actions that are run on save are cancelled.
	"editor.codeActionsOnSaveTimeout": 750,

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	"editor.cursorSmoothCaretAnimation": false,

	// Controls the cursor style.
	"editor.cursorStyle": "line",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	"editor.defaultFormatter": "esbenp.prettier-vscode",

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Scrolling speed mulitiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls whether the find operation is carried out on selected text or the entire file in the editor.
	"editor.find.autoFindInSelection": false,

    // Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
   "editor.find.globalFindClipboard": true,

    // Controls whether the search string in the Find Widget is seeded from the editor selection.
	"editor.find.seedSearchStringFromSelection": true,

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls the strategy for computing folding ranges. `auto` uses a language specific folding strategy, if available. `indentation` uses the indentation based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Fira Code",

	// Enables/Disables font ligatures.
	"editor.fontLigatures": true,

	// Controls the font size in pixels.
	"editor.fontSize": 15,

	// Controls the font weight.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": true,

	// Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
	"editor.formatOnSave": false,

	// Timeout in milliseconds after which the formatting that is run on file save is cancelled.
	"editor.formatOnSaveTimeout": 700,

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": true,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Controls the behavior of 'Go To' commands, like Go To Definition, when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multiple": "peek",

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Controls whether the editor should highlight the active indent guide.
	"editor.highlightActiveIndentGuide": false,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 200,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the code action lightbulb in the editor.
	"editor.lightbulb.enabled": true,

	// Controls the line height. Use 0 to compute the line height from the font size.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets when one of them is selected.
	"editor.matchBrackets": true,

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 30000,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 150,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Controls whether the minimap slider is automatically hidden.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 2,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls whether the editor should highlight semantic symbol occurrences.
	"editor.occurrencesHighlight": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the number of decorations that can show up at the same position in the overview ruler.
	"editor.overviewRulerLanes": 3,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": false,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether suggestions should automatically show up while typing.
	"editor.quickSuggestions": {
		"other": true,
		"comments": true,
		"strings": true
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 8,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": false,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": true,

	// Controls whether the editor should render indent guides.
	"editor.renderIndentGuides": true,

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - all
	"editor.renderWhitespace": "none",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 5,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the fold controls on the gutter are automatically hidden.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Controls whether some suggestion types should be filtered from IntelliSense. A list of suggestion types can be found here: https://code.visualstudio.com/docs/editor/intellisense#_types-of-completions.
	"editor.suggest.filteredTypes": {
		"keyword": true
	},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether sorting favours words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// Controls how many suggestions IntelliSense will show before showing a scrollbar (maximum 15).
	"editor.suggest.maxVisibleSuggestions": 12,

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Control whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 15,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "recentlyUsed",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "on",

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": "Winter Is Coming(Dark+Blue No-Italics)",

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Inserting and deleting whitespace follows tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document.
	"editor.wordBasedSuggestions": true,

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "on",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 120,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

    // SCM

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": true,

	// Controls whether to always show the Source Control Provider section.
	"scm.alwaysShowProviders": true,

	// Controls diff decorations in the editor.
	"scm.diffDecorations": "all",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls how many providers are visible in the Source Control Provider section. Set to `0` to be able to manually resize the view.
	"scm.providers.visible": 10,

	// Controls the visibility of the activity bar in the workbench.
	"workbench.activityBar.visible": true,

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench.
	"workbench.colorTheme": "Winter Is Coming(Dark+Blue No-Italics)",

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 100,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": true,

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether opened editors show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing) and show up with an italic font style.
	"workbench.editor.enablePreview": true,

	// Controls whether opened editors from Quick Open show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing).
	"workbench.editor.enablePreviewFromQuickOpen": true,

	// Controls whether tabs are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on modified (dirty) editor tabs or not.
	"workbench.editor.highlightModifiedTabs": true,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Navigate between open files using mouse buttons four and five if provided.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show in tabs or not.
	"workbench.editor.showTabs": true,

	// Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.
	"workbench.editor.tabCloseButton": "right",

	// Controls the sizing of editor tabs.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

    "workbench.fontAliasing": "default",

	// Specifies the icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	//  - vscode-great-icons
	//  - file-icons
	//  - file-icons-colourless
	//  - vscode-icon-theme
	//  - simple-icons
	//  - minimalistic-icons
	//  - deepdark-material-icons
	//  - material-icon-theme
	//  - seti
	//  - eq-material-theme-icons
	//  - vscode-vba-icons
	//  - vscode-icons
	//  - city-lights-icons-vsc
	//  - city-lights-icons-vsc-light
	"workbench.iconTheme": "vscode-great-icons",

	// Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
	"workbench.list.automaticKeyboardNavigation": true,

	// Controls whether lists and trees support horizontal scrolling in the workbench.
	"workbench.list.horizontalScrolling": false,

	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. 
	"workbench.list.openMode": "singleClick",

	// Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom or on the right of the workbench.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": true,

	// Determines which settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "json",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": true,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": true,

	// Controls the behavior of the settings editor Table of Contents while searching.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the sidebar. It can either show on the left or right of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page (default).
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.
	//  - newUntitledFile: Open a new untitled file (only applies when opening an empty workspace).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// This setting is deprecated, please use 'workbench.list.horizontalScrolling' instead.
	// Controls whether trees support horizontal scrolling in the workbench.
	"workbench.tree.horizontalScrolling": false,

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// Enables the grid layout for the workbench. This setting may enable additional layout options for workbench components.
	"workbench.useExperimentalGridLayout": false,

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

// Window

	// If enabled, will automatically change to high contrast theme if Windows is using a high contrast theme, and to dark theme when switching away from a Windows high contrast theme.
	"window.autoDetectHighContrast": true,

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
	"window.customMenuBarAltFocus": true,

	// If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
	"window.enableMenuBarMnemonics": true,

	// Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.
	//  - default: Menu is only hidden in full screen mode.
	//  - visible: Menu is always visible even in full screen mode.
	//  - toggle: Menu is hidden but can be displayed via Alt key.
	//  - hidden: Menu is always hidden.
	"window.menuBarVisibility": "default",

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Controls whether files should open in a new window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "on",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows are being reopened after a restart.
	//  - all: Reopen all windows.
	//  - folders: Reopen all folders. Empty workspaces will not be restored.
	//  - one: Reopen the last active window.
	//  - none: Never reopen a window. Always start with an empty one.
	"window.restoreWindows": "one",

	// Controls the window title based on the active editor. Variables are substituted based on the context:`${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).
	// - `${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).
	// - `${appName}`: e.g. VS Code.
	// - `${dirty}`: a dirty indicator if the active editor is dirty.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

	// Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
	"window.zoomLevel": 0,

 // Files   

	// Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
	"files.associations": {
		"*.jsx": "javascriptreact",
		"*.js": "javascriptreact",
		"*.js": "javascript",
		"*.html5": "html5",
		"*.ts": "typescript",
		"*.sass": "sass",
		"*.css": "css",
		"*.html": "html",
		"*.py": "python",
		"*.json": "javascript",
		"*.md": "markdown",
		"*.yml": "yaml",
		"*.diff": "diff",
		"*.http": "http",
		"*.php": "php"

	},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.
	"files.autoGuessEncoding": false,

	// Controls auto save of dirty files. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
	//  - off: A dirty file is never automatically saved.
	//  - afterDelay: A dirty file is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: A dirty file is automatically saved when the editor loses focus.
	//  - onWindowChange: A dirty file is automatically saved when the window loses focus.
	"files.autoSave": "true",

	// Controls the delay in ms after which a dirty file is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// The default language mode that is assigned to new files.
	"files.defaultLanguage": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "\r\n",

	// Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true
	},

	// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows with backups will be restored upon next launch.
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. To restore folder windows as they were before shutdown set `window.restoreWindows` to `all`.
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": true,

	// Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
	"files.maxMemoryForLargeFilesMB": 8192,

	// Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true
	},

// Zen Mode

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether turning on Zen Mode also hides workbench tabs.
	"zenMode.hideTabs": true,

	// Controls whether a window should restore to zen mode if it was exited in zen mode.
	"zenMode.restore": false,

	// Controls whether the explorer should automatically reveal and select files when opening them.
	"explorer.autoReveal": true,

	// Controls whether the explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the explorer should allow to move files and folders via drag and drop.
	"explorer.enableDragAndDrop": true,

	// Number of editors shown in the Open Editors pane.
	"explorer.openEditors.visible": 9,

	// Controls sorting order of files and folders in the explorer.
	//  - default: Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.
	//  - type: Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.
	"explorer.sortOrder": "default",

// Search
	// Controls the positioning of the actionbar on rows in the search view.
	//  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "auto",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "auto",

	// Configure glob patterns for excluding files and folders in searches. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true
	},

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": true,

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// Whether to run search in the extension host. Requires a restart to take effect.
	"search.runInExtensionHost": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls whether to use global `.gitignore` and `.ignore` files when searching for files.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// Deprecated. Use "search.runInExtensionHost" instead
	// Whether to run search in the extension host
	"searchRipgrep.enable": false,

	// The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.
	"http.proxy": "",

	// The value to send as the 'Proxy-Authorization' header for every network request.
	"http.proxyAuthorization": null,

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs.
	"http.proxyStrictSSL": false,

	// Use the proxy support for extensions.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)
	"http.systemCertificates": true,

// Keyboard

    // Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
    "keyboard.dispatch": "code",

// Update

	// Enable to download and install new VS Code Versions in the background on Windows
	"update.enableWindowsBackgroundUpdates": true,

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "manual",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Controls the font family in the debug console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the debug console.
	"debug.console.fontSize": 15,

	// Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls if the lines should wrap in the debug console.
	"debug.console.wordWrap": true,

	// Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.
	"debug.enableAllHovers": false,

	// Show variable values inline in editor while debugging.
	"debug.inlineValues": false,

	// Controls when the internal debug console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnSessionStart",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls when the debug status bar should be visible.
	//  - never: Never show debug in status bar
	//  - always: Always show debug in status bar
	//  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// A list of JSON file paths that define custom tags, properties and other HTML syntax constructs. Only workspace folder setting will be read.
	"html.experimental.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// End with a newline.
	"html.format.endWithNewline": false,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	
	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Enable debug logging for the html extension.
	"html.trace": "off",

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// Associate schemas to JSON files in the current project
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for every newline.
	"markdown.preview.breaks": false,

	// Double click in the markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the markdown preview.
	"markdown.preview.markEditorSelection": true,

	// How should clicking on links to markdown files be handled in the preview.
	//  - inPreview: Try to open links in the markdown preview
	//  - inEditor: Try to open links in the editor
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// This setting has been replaced by 'markdown.preview.scrollPreviewWithEditor' and no longer has any effect.
	// [Deprecated] Scrolls the markdown preview to reveal the currently selected line from the editor.
	"markdown.preview.scrollPreviewWithEditorSelection": true,

	// A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable debug logging for the markdown extension.
	"markdown.trace": "off",

	// Path to the 'php' executable.
	"php.executablePath": "",

	// Code formatting profile.
	"php.format.codeStyle": "PSR-2",

	// Path patterns to be ignored from reporting problems. Value can be set to `true` to ignore all problems or a comma separated list of specific problem codes.
	"php.problems.exclude": null,

	// Enable full workspace-wide analysis. Enabled by default.
	"php.problems.workspaceAnalysis": true,

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Language of PHP Tools IntelliSense.
	"phpTools.language": null,

	// The license fingerprint. (deprecated)
	"phpTools.license": "",

	// Show a CodeLens above each test or suite for running or debugging the tests
	"phpTools.phpUnit.codeLens": true,

	// Show error messages from test failures as decorations in the editor
	"phpTools.phpUnit.errorDecoration": true,

	// Show the state of each test in the editor using Gutter Decorations
	"phpTools.phpUnit.gutterDecoration": true,

	// Retire or reset all test states whenever the test tree is reloaded
	"phpTools.phpUnit.onReload": "",

	// Retire or reset all test states whenever a test run is started
	"phpTools.phpUnit.onStart": "",

	// Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
	"javascript.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Preferred path style for auto imports.
	//  - auto: Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.
	//  - relative: Relative to the file location.
	//  - non-relative: Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.
	"javascript.preferences.importModuleSpecifier": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
	"javascript.preferences.quoteStyle": "auto",

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
	"javascript.suggest.autoImports": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable including unique names from the file in JavaScript suggestions.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.
	"typescript.autoClosingTags": true,

	// Check if NPM is installed for Automatic Type Acquisition.
	"typescript.check.npmIsInstalled": true,

	// Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
	"typescript.experimental.useSeparateSyntaxServer": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript. Requires using TypeScript 2.4 or newer in the workspace.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Sets the locale used to report JavaScript and TypeScript errors. Requires using TypeScript 2.6.0 or newer in the workspace. Default of `null` uses VS Code's locale.
	"typescript.locale": null,

	// Specifies the path to the NPM executable used for Automatic Type Acquisition. Requires using TypeScript 2.3.4 or newer in the workspace.
	"typescript.npm": null,

	// Preferred path style for auto imports.
	//  - auto: Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.
	//  - relative: Relative to the file location.
	//  - non-relative: Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.
	"typescript.preferences.importModuleSpecifier": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
	"typescript.preferences.quoteStyle": "auto",

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
	"typescript.suggest.autoImports": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path containing the tsserver and lib*.d.ts files to use.
	"typescript.tsdk": null,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// Additional paths to discover Typescript Language Service plugins. Requires using TypeScript 2.3.0 or newer in the workspace.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of JSON file paths that define custom CSS data that loads custom properties, at directives, pseudo classes / elements.
	"css.experimental.customData": [],

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Customizes what kind of terminal to launch.
	//  - integrated: Use VS Code's integrated terminal.
	//  - external: Use the configured external terminal.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",

	// A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open.
	// Default Skipped Commands:
	// 
	// - editor.action.toggleTabFocusMode
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNextTerminalFocus
	// - workbench.action.terminal.findPreviousTerminalFocus
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFindWidget
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFindWidget
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitiveTerminalFocus
	// - workbench.action.terminal.toggleFindRegexTerminalFocus
	// - workbench.action.terminal.toggleFindWholeWordTerminalFocus
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm on exit if there are active terminal sessions.
	"terminal.integrated.confirmOnExit": false,

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor.
	"terminal.integrated.cursorStyle": "block",

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Controls whether the terminal bell is enabled.
	"terminal.integrated.enableBell": false,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// An experimental setting that will refresh the terminal renderer when the system is resumed.
	"terminal.integrated.experimentalRefreshOnResume": false,

	// Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 14,

	// The font weight to use within the terminal for non-bold text.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text.
	"terminal.integrated.fontWeightBold": "bold",

	// Whether new shells should inherit their environment from VS Code. This is not supported on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// Controls how the terminal is rendered.
	//  - auto: Let VS Code guess which renderer to use.
	//  - canvas: Use the standard GPU/canvas-based renderer
	//  - dom: Use the fallback DOM-based renderer.
	"terminal.integrated.rendererType": "auto",

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - selectWord: Select the word under the cursor and show the context menu.
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// Controls the maximum amount of lines the terminal keeps in its buffer.
	"terminal.integrated.scrollback": 1000,

	// Controls whether locale variables are set at startup of the terminal.
	"terminal.integrated.setLocaleVariables": true,

	// The path of the shell that the terminal uses on Linux (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.linux": null,

	// The path of the shell that the terminal uses on macOS (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.osx": null,

	// The path of the shell that the terminal uses on Windows (default: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.windows": null,

	// The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.linux": [],

	// The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.windows": [],

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Show Errors & Warnings on files and folder.
	"problems.decorations.enabled": true,

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// Enable crash reports to be sent to a Microsoft online service. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// Enable usage data and errors to be sent to a Microsoft online service.
	"telemetry.enableTelemetry": true,

	// Render Outline Elements with Icons.
	"outline.icons": true,

	// Use badges for Errors & Warnings.
	"outline.problems.badges": true,

	// Use colors for Errors & Warnings.
	"outline.problems.colors": true,

	// Show Errors & Warnings on Outline Elements.
	"outline.problems.enabled": true,

	// Comma separated string. These folders will be excluded from code hints. This is useful if you have a mix of CommonJS and Namespaces
	"TypeScriptImporter.IgnoreListedFolders": "./, .scripts/",

	// When set to true, imports will show the namespace in parenthesis
	"TypeScriptImporter.showNamespaceOnImports": true,

	// How often to resync for changes. Advanced users only, can cause instability
	"TypeScriptImporter.SyncInterval": "15",

	// The node within TSConfig that references depenant frameworks that we have access to. Any framework listed in here will provide code hints. Requires Reload to take affect
	"TypeScriptImporter.TSConfigFrameworkName": "frameworks",

	// Specify the default destination branch for pull requests
	"openInGitHub.defaultPullRequestBranch": "integration",

	// Configure a custom Github domain. Useful for Github enterprise
	"openInGitHub.gitHubDomain": "github.com",

	// Specify the provider protocol for custom sites or Github enterprise
	"openInGitHub.providerProtocol": "https",

	// Specify the provider type in Custom Site
	"openInGitHub.providerType": "gitlab",

	// If enabled, the copied or opened URL won't include line number(s) unless there's an active selection
	"openInGitHub.requireSelectionForLines": false,

	// If enabled, use commit SHA instead of branch
	"openInGitHub.useCommitSHAInURL": false,

	// The quality of the rendered file.
	"markdownConverter.ConversionQuality": 100,

	// Either a single or a set of types to convert the markdown-file to.
	"markdownConverter.ConversionType": [
		"PDF"
	],

	// A format-string to print dates.  
	// See: <https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx>
	"markdownConverter.DateFormat": "Default",

	// The location the `markdownConverter.DestinationPath` may be relative to.
	//  - WorkspaceRoot: Indicates either the root of the workspace if a workspace-folder is opened, otherwise the directory of the document-file will be used.
	//  - DocumentFile: Indicates the directory of the document-file.
	"markdownConverter.DestinationOrigin": "WorkspaceRoot",

	// The path to save the converted files to.
	// 
	// ***Note:***  
	// The path may be relative to the `markdownConverter.DestinationOrigin`.
	"markdownConverter.DestinationPath": ".",

	// The attributes of the document.  
	// They can be included into the document like this: `{{ AttributeName }}`
	"markdownConverter.Document.Attributes": null,

	// The highlight.js-style to use.
	"markdownConverter.Document.Design.HighlightStyle": "Default",

	// Stylesheets to include in the document.  
	// They can either be a local path or an URI.
	"markdownConverter.Document.Design.StyleSheets": [],

	// The path to the template of the document.
	// 
	// ***Note:***  
	//   - `{{{styles}}}`'s replaced by the css-styles
	//   - `{{{content}}}`'s replaced by the body of the document.
	"markdownConverter.Document.Design.Template": null,

	// The default footer.
	"markdownConverter.Document.FooterTemplate": "<div style=\"margin-left: 1cm; margin-right: auto; text-align: left; \"></div><div stlyle=\"text-align: center; \">{{ CreationDate }}</div><div style=\"margin-left: auto; margin-right: 1cm; text-align: right; \"></div>",

	// This option enables the rendering of headers and footers.
	// 
	// Note:
	// Script-tags are not supported inside the header and the footer.
	"markdownConverter.Document.HeaderFooterEnabled": true,

	// The content of the header.  
	// You can insert the page-number and the total amount of pages by using the CSS-classes `pageNumber` and `totalPages`.
	"markdownConverter.Document.HeaderTemplate": "<div style=\"margin-left: 1cm; margin-right: auto; text-align: left; \">{{ Author }}</div><div style=\"text-align: center; \"><span class=\"pageNumber\"></span>/<span class=\"totalPages\"></span></div><div style=\"margin-left: auto; margin-right: 1cm; text-align: right\">{{ Company }}</div>",

	// The margin of the paper.
	"markdownConverter.Document.Paper.Margin": {},

	// The dimensions of the rendered document.  
	// Either the width and the height of the paper or a predefined format.
	"markdownConverter.Document.Paper.PaperFormat": {
		"Format": "A4"
	},

	// `true` to convert the current file even if the language isn't set to Markdown; otherwise `false`.
	"markdownConverter.IgnoreLanguageMode": false,

	// The `locale` to print the date.
	// 
	// ***Note:***  
	// This option defaults to VSCode's locale.
	"markdownConverter.Locale": null,

	// The emoji-type to use.
	"markdownConverter.Parser.EmojiType": "GitHub",

	// `true` to use system-provided parser; otherwise `false`.
	"markdownConverter.Parser.SystemParserEnabled": true,

	// The css-class of the table of contents.
	"markdownConverter.Parser.Toc.Class": "markdown-converter-toc",

	// Enables the rendering of a table of contents using `markdown-it-table-of-contents`.
	"markdownConverter.Parser.Toc.Enabled": true,

	// The RegExp that is to be replaced by the table of contents.
	"markdownConverter.Parser.Toc.Indicator": "^\\[\\[\\s*toc\\s*\\]\\]",

	// The heading-levels to include into the table of contents.
	// 
	// ***Examples:***
	// `"2-6"`, `"2, 3, 4, 5, 6"`.
	"markdownConverter.Parser.Toc.Levels": "1-6",

	// The list-type of the table of contents.
	// The list can either be numbered (`ol`) or not numbered (`ul`).
	"markdownConverter.Parser.Toc.ListType": "Unordered",

	// Configure editor settings to be overridden for [azure-pipelines] language.
	"[azure-pipelines]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		},
		"editor.autoIndent": false
	},

	// Configure editor settings to be overridden for [c] language.
	"[c]":  {
		"editor.wordBasedSuggestions": false
	},

	// Configure editor settings to be overridden for [cpp] language.
	"[cpp]":  {
		"editor.wordBasedSuggestions": false
	},

	// Configure editor settings to be overridden for [django-html] language.
	"[django-html]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// Configure editor settings to be overridden for [git-commit] language.
	"[git-commit]":  {
		"editor.rulers": [
				72
		]
	},

	// Configure editor settings to be overridden for [go] language.
	"[go]":  {
		"editor.insertSpaces": false
	},

	// Configure editor settings to be overridden for [home-assistant] language.
	"[home-assistant]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		},
		"editor.autoIndent": false
	},

	// Configure editor settings to be overridden for [http] language.
	"[http]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure editor settings to be overridden for [java] language.
	"[java]":  {
		"editor.formatOnSave": true
	},

	// Configure editor settings to be overridden for [javascript] language.
	"[javascript]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// Configure editor settings to be overridden for [json] language.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure editor settings to be overridden for [makefile] language.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure editor settings to be overridden for [markdown] language.
	"[markdown]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2
	},

	// Configure editor settings to be overridden for [puppet] language.
	"[puppet]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"files.insertFinalNewline": true
	},

	// Configure editor settings to be overridden for [shellscript] language.
	"[shellscript]":  {
		"alignment.surroundSpace": {
				"colon": [
						0,
						1
				],
				"assignment": [
						-1,
						-1
				],
				"arrow": [
						1,
						1
				],
				"comment": 2
		}
	},

	// Configure editor settings to be overridden for [todo] language.
	"[todo]":  {
		"editor.quickSuggestions": false
	},

	// Configure editor settings to be overridden for [typescript] language.
	"[typescript]":  {
		"editor.formatOnType": true,
		"editor.insertSpaces": true,
		"editor.tabSize": 2
	},

	// Configure editor settings to be overridden for [typescriptreact] language.
	"[typescriptreact]":  {
		"editor.formatOnType": true,
		"editor.insertSpaces": true,
		"editor.tabSize": 2
	},

	// Configure editor settings to be overridden for [yaml] language.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		},
		"editor.autoIndent": false
	},

	// Types to include in the 'defintions' section of the JSON Schema.
	"generateJSONSchema.expose": "export",

	// JsDoc description to include in JSON schema
	"generateJSONSchema.jsDoc": "basic",

	// Skip type checks for better performance
	"generateJSONSchema.skipTypeCheck": true,

	// Sort properties in JSON schema
	"generateJSONSchema.sortProps": true,

	// Include top ref
	"generateJSONSchema.topRef": true,

	// Controls whether auto detection of Jake tasks is on or off. Default is on.
	"jake.autoDetect": "on",

	// A comma-delimited string of tokens to ignore in file paths. Files with these tokens in their paths will not be processed.
	"licenseInjector.ignore": "node_modules,bin",

	// The person or organization the copyright belongs to.
	"licenseInjector.owner": "Joe Martella",

	// Controls whether auto detection of Grunt tasks is on or off. Default is on.
	"grunt.autoDetect": "on",

	// Path to the GCC Arm Toolchain (prefix arm-none-eabi) to use. If not set the tools must be on the system path. Do not include the executable file name in this path.
	"cortex-debug.armToolchainPath": null,

	// Enable Telemetry for the Cortex-Debug Extension. Reporting will also respect the global telemetry.enableTelemetry setting.
	"cortex-debug.enableTelemetry": true,

	// Path to the JLink GDB Server. If not set then JLinkGDBServer (JLinkGDBServerCL.exe on Windows) must be on the system path.
	"cortex-debug.JLinkGDBServerPath": null,

	// Path to the OpenOCD GDB Server executable. If not set then openocd (openocd.exe on Windows) must be on the system path.
	"cortex-debug.openocdPath": null,

	// Path to the PEMicro GDB Server. If not set then PEGDBServer (pegdbserver_console.exe on Windows) must be on the system path.
	"cortex-debug.PEGDBServerPath": null,

	// Path to the PyOCD GDB Server executable. If not set then pyocd-gdbserver must be on the system path.
	"cortex-debug.pyocdPath": null,

	// Path to the Texane's ST-Util GDB Server executable. If not set then st-util (st-util.exe on Windows) must be on the system path.
	"cortex-debug.stutilPath": null,

	// Automatically attach node debugger when node.js was launched in debug mode from integrated terminal.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	//  - on: Auto attach is active.
	//  - off: Auto attach is inactive.
	"debug.node.autoAttach": "disabled",

	// Controls whether to show a warning when the 'useWSL' attribute is used.
	"debug.node.showUseWslIsDeprecatedWarning": true,

	// If true an empty line will be inserted after opening curly braces and before closing curly braces.
	"twig-language-2.braceLine": false,

	// Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings.
	"twig-language-2.bracePadding": false,

	// Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line.
	"twig-language-2.braces": false,

	// Emulates JSBeautify's brace_style option using existing Pretty Diff options.
	"twig-language-2.braceStyle": "none",

	// If a blank new line should be forced above comments.
	"twig-language-2.commentLine": false,

	// This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code.
	"twig-language-2.comments": false,

	// If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors.
	"twig-language-2.compressedCss": false,

	// Automatically correct some sloppiness in code.
	"twig-language-2.correct": false,

	// Inserts new line characters between every CSS code block.
	"twig-language-2.cssInsertLines": false,

	// If else_line is true then the keyword 'else' is forced onto a new line.
	"twig-language-2.elseLine": false,

	// If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff.
	"twig-language-2.endComma": false,

	// If all markup attributes should be indented each onto their own line.
	"twig-language-2.forceAttribute": false,

	// Will force indentation upon all content and tags without regard for the creation of new text nodes.
	"twig-language-2.forceIndent": false,

	// Determines if all array indexes should be indented, never indented, or left to the default.
	"twig-language-2.formatArray": "default",

	// Determines if all object keys should be indented, never indented, or left to the default.
	"twig-language-2.formatObject": "default",

	// Whether to enable/disable Twig PrettyDiff formatting.
	"twig-language-2.formatting": true,

	// If a space should follow a JavaScript function name.
	"twig-language-2.functionName": false,

	// Whether to enable/disable Twig hover.
	"twig-language-2.hover": true,

	// How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries.
	"twig-language-2.indentLevel": 0,

	// When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken.
	"twig-language-2.methodChain": 0,

	// If destructured lists in script should never be flattend.
	"twig-language-2.neverFlatten": false,

	// Insert an empty line at the end of output.
	"twig-language-2.newLine": true,

	// If a case statement should receive the same indentation as the containing switch block.
	"twig-language-2.noCaseIndent": false,

	// Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented.
	"twig-language-2.noLeadZero": false,

	// Sorts markup attributes and properties by key name in script and style.
	"twig-language-2.objectSort": false,

	// The maximum number of consecutive empty lines to retain.
	"twig-language-2.preserve": 2,

	// Prevent comment reformatting due to option wrap.
	"twig-language-2.preserveComment": false,

	// If the quotes of script strings or markup attributes should be converted to single quotes or double quotes.
	"twig-language-2.quoteConvert": "none",

	// Inserts a space following the function keyword for anonymous functions.
	"twig-language-2.space": true,

	// Markup self-closing tags end will end with ' />' instead of '/>'.
	"twig-language-2.spaceClose": false,

	// 0 will default to the editor's tab size. Stores the number of 'inchar' values to comprise a single indentation.
	"twig-language-2.tabSize": 0,

	// Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag.
	"twig-language-2.tagMerge": false,

	// Sort child items of each respective markup parent element.
	"twig-language-2.tagSort": false,

	// If ternary operators in JavaScript ? and : should remain on the same line.
	"twig-language-2.ternaryLine": true,

	// If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer.
	"twig-language-2.unformatted": false,

	// If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated.
	"twig-language-2.variableList": "none",

	// If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer.
	"twig-language-2.vertical": false,

	// Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings.
	"twig-language-2.wrap": 0,

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable an explorer view for npm scripts.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs/org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to run scripts.
	"npm.packageManager": "npm",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the scripts explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// Bold marker
	"markdownShortcuts.bold.marker": "**",

	// Bullets marker
	"markdownShortcuts.bullets.marker": "*",

	// Show bold icon in title bar
	"markdownShortcuts.icons.bold": true,

	// Show bullets icon in title bar
	"markdownShortcuts.icons.bullets": true,

	// Show image icon in title bar
	"markdownShortcuts.icons.image": false,

	// Show italic icon in title bar
	"markdownShortcuts.icons.italic": true,

	// Show link icon in title bar
	"markdownShortcuts.icons.link": false,

	// Show strikethrough icon in title bar
	"markdownShortcuts.icons.strikethrough": true,

	// Italics marker
	"markdownShortcuts.italics.marker": "_",

	// Array of languages for which shortcuts will be available
	"markdownShortcuts.languages": [
		"markdown"
	],

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// Path to a folder containing Emmet profiles and snippets.
	"emmet.extensionsPath": null,

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
	//  E.g.: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in css/scss/less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// Variables to be used in Emmet snippets
	"emmet.variables": {},

	// Enable automatic content-based separator autodetection for specified list of separators
	"rainbow_csv.autodetect_separators": [
		"\t",
		",",
		";",
		"|"
	],

	// Minimum number of non-comment lines in file for content-based autodetection
	"rainbow_csv.autodetection_min_line_count": 10,

	// Comment lines prefix, e.g. "#". Set to empty string to disable
	"rainbow_csv.comment_prefix": "",

	// CSV Lint: detect leading and trailing whitespaces in fields
	"rainbow_csv.csv_lint_detect_trailing_spaces": false,

	// Enable automatic linting/checking of opened csv files
	"rainbow_csv.enable_auto_csv_lint": true,

	// Enable "Preview CSV head" option in File Explorer context menu
	"rainbow_csv.enable_context_menu_head": true,

	// Enable "Preview CSV tail" option in File Explorer context menu
	"rainbow_csv.enable_context_menu_tail": false,

	// Enable automatic content based separator autodetection
	"rainbow_csv.enable_separator_autodetection": true,

	// Enable column-info tooltip on hover
	"rainbow_csv.enable_tooltip": true,

	// Show column names in tooltip
	"rainbow_csv.enable_tooltip_column_names": true,

	// Show warnings in tooltip
	"rainbow_csv.enable_tooltip_warnings": true,

	// Your unique scss files path in node_modules folders
	"scss-scan.customPaths": [],

	// Auto sort after imports
	"namespaceResolver.autoSort": true,

	// Exclude glob pattern while finding files
	"namespaceResolver.exclude": "**/node_modules/**",

	// Auto highlight not imported and not used when a file is opened
	"namespaceResolver.highlightOnOpen": false,

	// Auto highlight not imported and not used when a file is saved
	"namespaceResolver.highlightOnSave": false,

	// Expand class with leading namespace separator
	"namespaceResolver.leadingSeparator": true,

	// Show message on status bar instead of notification box
	"namespaceResolver.showMessageOnStatusBar": false,

	// Sort imports in alphabetical order instead of line length
	"namespaceResolver.sortAlphabetically": false,

	// Sort imports using a 'natural order' algorithm
	"namespaceResolver.sortNatural": false,

	// Auto sort when a file is saved
	"namespaceResolver.sortOnSave": false,

	// Specify an output format. Options are [default, summary, json, codeclimate, none]
	"nsp.output": "default",

	// The directory filter of Copilot's data collector.
	"copilot.directoryFilter": [
		"!typings",
		"!node_modules",
		"!.vscode"
	],

	// The file filter of Copilot's data collector.
	"copilot.fileFilter": [
		"**/!(*.*spec).ts"
	],

	// The project type of analyzer.
	"copilot.projectTypes": [
		{
			"projectType": "nestjs",
			"matchDependency": "@nestjs/core"
		}
	],

	// The schematics of angular cli.
	"copilot.schematics": [
		"@schematics/angular",
		"@ngrx/schematics",
		"@angular/pwa",
		"@ng-bootstrap/schematics",
		"@angular/material",
		"@clr/angular",
		"@angular/elements"
	],

	// 
	"copilot.serverPath": "",

	// A path to file containing the configuration options for jslint. If the file exists it overrides jslint.options and any .jslintrc file
	"jslint.config": null,

	// Control whether or not jslint is enabled for JavaScript files.
	"jslint.enable": true,

	// Matching files and directories are being ignored by jslint. Glob patterns are interpreted relative to the workspace's root folder.
	"jslint.exclude": {},

	// A path to a file containing patterns describing which files and directories should be ignored by jslint. If the file exists it overrides jslint.exclude and any .jslintignore file.
	"jslint.excludePath": null,

	// The jslint options object to provide args to the jslint command.
	"jslint.options": {},

	// Select the one of node-jslint's installed versions that you want to use.
	"jslint.version": "latest",

	// Validation for PostCSS files
	"postcss.validate": true,

	// Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Ex.: rgba(21, 126, 251, 0.1)
	"bookmarks.backgroundLineColor": "",

	// Path to another image to be presented as Bookmark
	"bookmarks.gutterIconPath": "",

	// Allow navigation look for bookmarks in all files in the project, instead of only the current
	"bookmarks.navigateThroughAllFiles": false,

	// Allow bookmarks to be saved (and restored) locally in the opened Project/Folder instead of VS Code
	"bookmarks.saveBookmarksInProject": false,

	// Specifies whether Bookmarks commands are displayed on the context menu
	"bookmarks.showCommandsInContextMenu": true,

	// Use a workaround for formatters like Prettier, which does not notify on document changes and messes Bookmark's Sticky behavior
	"bookmarks.useWorkaroundForFormatters": true,

	// Allow navigation to wrap around at the first and last bookmarks in scope (current file or all files)
	"bookmarks.wrapNavigation": true,

	// Automatically center the commit details view when it is opened.
	"git-graph.autoCenterCommitDetailsView": true,

	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.combineLocalAndRemoteBranchLabels": true,

	// Specifies where the Commit Details View is rendered in the Git Graph view.
	//  - Inline: Show the Commit Details View inline with the graph
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
	"git-graph.commitDetailsViewLocation": "Inline",

	// Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.commitOrdering": "date",

	// An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
	"git-graph.customBranchGlobPatterns": [],

	// An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
	"git-graph.customEmojiShortcodeMappings": [],

	// Specifies the date format to be used in the date column of Git Graph.
	//  - Date & Time: Show the date and time, for example "19 Mar 2019 21:34"
	//  - Date Only: Show the date only, for example "19 Mar 2019"
	//  - Relative: Show relative times, for example "5 minutes ago"
	"git-graph.dateFormat": "Date & Time",

	// Specifies the date type to be displayed throughout Git Graph.
	//  - Author Date: Use the author date of a commit
	//  - Commit Date: Use the committer date of a commit
	"git-graph.dateType": "Author Date",

	// An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
	"git-graph.defaultColumnVisibility": {
		"Date": true,
		"Author": true,
		"Commit": true
	},

	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.fetchAvatars": false,

	// Specifies the colours used on the graph.
	"git-graph.graphColours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph
	//  - angular: Use angular lines when transitioning between branches on the graph
	"git-graph.graphStyle": "rounded",

	// Specifies the number of commits to initially load.
	"git-graph.initialLoadCommits": 300,

	// Specifies the number of commits to load when the "Load More Commits" button is pressed (only shown when more commits are available).
	"git-graph.loadMoreCommits": 100,

	// Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
	"git-graph.maxDepthOfRepoSearch": 0,

	// Show merge commits with a muted text color.
	"git-graph.muteMergeCommits": true,

	// Specifies which pane the Visual Studio Code Diff is opened in.
	//  - Active: Open Visual Studio Code Diff in the Active Pane
	//  - Beside: Open Visual Studio Code Diff beside the Active Pane
	"git-graph.openDiffTabLocation": "Active",

	// Open Git Graph to the repository containing the active Text Editor document.
	"git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,

	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabelAlignment": "Normal",

	// Specifies if the Git Graph view Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
	"git-graph.retainContextWhenHidden": true,

	// Show the current branch by default when Git Graph is opened. Default: false (show all branches)
	"git-graph.showCurrentBranchByDefault": false,

	// Show a Status Bar item which opens Git Graph when clicked.
	"git-graph.showStatusBarItem": true,

	// Show uncommitted changes (set to false to decrease load time on large repositories).
	"git-graph.showUncommittedChanges": true,

	// Specifies where the 'View Git Graph' action appears on the title of SCM Providers.
	//  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
	//  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
	"git-graph.sourceCodeProviderIntegrationLocation": "Inline",

	// Specifies the colour theme of the icon displayed on the Git Graph tab.
	//  - colour: Show a colour icon which suits most Visual Studio Code colour themes
	//  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
	"git-graph.tabIconColourTheme": "colour",

	// 
	"auto.languages": {
		"ruby": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"elixir": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"javascript": {
			"symbol": "$",
			"stringWrapper": "`"
		},
		"vue": {
			"symbol": "$",
			"stringWrapper": "`"
		},
		"javascriptreact": {
			"symbol": "$",
			"stringWrapper": "`"
		},
		"typescript": {
			"symbol": "$",
			"stringWrapper": "`"
		},
		"typescriptreact": {
			"symbol": "$",
			"stringWrapper": "`"
		},
		"coffeescript": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"erb": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"haml": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"slim": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"groovy": {
			"symbol": "$",
			"stringWrapper": "\""
		},
		"crystal": {
			"symbol": "#",
			"stringWrapper": "\""
		},
		"ecr": {
			"symbol": "#",
			"stringWrapper": "\""
		}
	},

	// Enable command palette item to "Save user environment".
	"fetchUserEnv.palEnableSaveEnv": false,

	// Specifies the filename for the default settings at the remote settings path.  Set to null to disable.
	"fetchUserEnv.remoteDefaultSettingsFilename": null,

	// Specifies the path for the remote extensions.  Set to null to disable.
	"fetchUserEnv.remoteExtensionPath": null,

	// Specifies the path for the remote settings.  Set to null to disable.
	"fetchUserEnv.remoteSettingsPath": null,

	// If true, will cache calls to `import-sort-config`, thereby improving performance.
	"sort-imports.cache-package-json-config-checks": true,

	// Default sorting style. Options are eslint, module, module-scoped, module-compact.
	"sort-imports.default-sort-style": "eslint",

	// Languages to sort on save.
	"sort-imports.languages": [
		"javascript",
		"typescript"
	],

	// Automatically sort imports on save.
	"sort-imports.on-save": true,

	// Suppress warnings when sorting fails.
	"sort-imports.suppress-warnings": false,

	// Tab Size
	"beautify.options": {},

	// Where to find base React component
	"reactPureToClass.reactComponent": "React.Component",

	// Whether to attempt to sort ES6-style imports in Javascript
	"typescript.extension.sortImports.enableJavascript": false,

	// The maximum number of named imports to include in a single line
	"typescript.extension.sortImports.maxNamedImportsInSingleLine": 3,

	// Whether to omit the semicolon at the end of the line
	"typescript.extension.sortImports.omitSemicolon": false,

	// When `sortMethod` is set to `path`, this controls the order to sort imports between package-level and path-relative imports. 'relativeUpLevel' describes relative paths that begin with '../', while ;relativeDownLevel' describes relative paths that begin with './'
	"typescript.extension.sortImports.pathSortOrder": [
		"relativeDownLevel",
		"relativeUpLevel",
		"package"
	],

	// The type of quote to use for the file or package paths
	"typescript.extension.sortImports.quoteStyle": "single",

	// Whether to sort by the name of the import or the source path of the import
	"typescript.extension.sortImports.sortMethod": "importName",

	// Whether to sort all imports whenever saving a Typescript file
	"typescript.extension.sortImports.sortOnSave": false,

	// Chars to align
	"alignment.chars": {
		":": {
			"spaceBefore": 0,
			"spaceAfter": 1
		},
		"::": {
			"spaceBefore": 0,
			"spaceAfter": 0
		},
		"=": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"===": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"==": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"=>": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"+=": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"-=": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"*=": {
			"spaceBefore": 1,
			"spaceAfter": 1
		},
		"/=": {
			"spaceBefore": 1,
			"spaceAfter": 1
		}
	},

	// firstline: Change indent of all lines to the firstline.
	//  activeline: Change intent of all lines to the activeline.
	//  dontchange: Don't change line indent, only aligns those lines with same indentation.
	"alignment.indentBase": "firstline",

	// Control where to insert space to align different length operators (e.g. aligning = += *= ...)
	"alignment.operatorPadding": "right",

	// Specify how many spaces to insert around the operator.
	"alignment.surroundSpace": {
		"colon": [
			0,
			1
		],
		"assignment": [
			1,
			1
		],
		"arrow": [
			1,
			1
		],
		"comment": 2
	},

	// Show a text input dialog when adding a new checkpoint to specify the checkpoint name. If disabled, the date-time value will be used.
	"checkpoints.askForCheckpointName": true,

	// Determines whether selecting a file in the tree explorer will automatically open the document.
	"checkpoints.autoOpenFile": true,

	// Determines whether a file item in the tree explorer will automatically expand/collapse when moving between files.
	"checkpoints.autoSelectFile": true,

	// Specifies the date-time locale used for the default checkpoint names. Available options: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
	"checkpoints.locale": "en-GB",

	// Specify a location for checkpoints view: explorer (file explorer) or scm (Source Control)
	"checkpoints.location": "explorer",

	// Determines if only the active file should be visible in the tree explorer or not.
	"checkpoints.showActiveFileOnly": false,

	// all tags with '-' separator will be added to new-blocklevel-tags. e.g angular bootstrap: uib-alert
	"tidyHtml.enableDynamicTags": true,

	// type of notification on format error
	"tidyHtml.errorNotification": "statusbar",

	// Automatically format files on save. Set to true to run for html. Use array to set indiviaul types to format: ["html", "php"]
	"tidyHtml.formatOnSave": true,

	// default options for Tidy HTML
	"tidyHtml.optionsTidy": {
		"markup": true,
		"output-xml": false,
		"input-xml": false,
		"show-warnings": true,
		"show-errors": 6,
		"numeric-entities": false,
		"quote-marks": false,
		"quote-nbsp": true,
		"quote-ampersand": false,
		"break-before-br": false,
		"preserve-entities": true,
		"uppercase-tags": false,
		"uppercase-attributes": false,
		"indent": "auto",
		"indent-with-tabs": false,
		"indent-attributes": true,
		"sort-attributes": "alpha",
		"wrap": 250
	},

	// stop format on warnings
	"tidyHtml.stopOnWarning": false,

	// path to tidy executable
	"tidyHtml.tidyExecPath": "",

	// extended logging
	"tidyHtml.traceLogging": false,

	// type of notification on format error
	"tidyHtml.warningNotification": "statusbar",

	// Default file configuration name
	"importSorter.generalConfiguration.configurationFilePath": "./import-sorter.json",

	// Excludes sorting for files which match given regex expression. Regex considers the whole file path. The file path separator is normalized to /
	"importSorter.generalConfiguration.exclude": [],

	// Enables menu option for sorting in directory
	"importSorter.generalConfiguration.sortImportsInDirectory": true,

	// Enables sort before each save of the document
	"importSorter.generalConfiguration.sortOnBeforeSave": false,

	// If true then the import string has a semicolon at the end, otherwise it will not be appended. Default is true
	"importSorter.importStringConfiguration.hasSemicolon": true,

	// The count of units before import is new-lined
	"importSorter.importStringConfiguration.maximumNumberOfImportExpressionsPerLine.count": 100,

	// The type of length restriction, before import is moved to a new line
	"importSorter.importStringConfiguration.maximumNumberOfImportExpressionsPerLine.type": "maxLineLength",

	// The number of new lines after the last sorted import
	"importSorter.importStringConfiguration.numberOfEmptyLinesAfterAllImports": 1,

	// The path quotes
	"importSorter.importStringConfiguration.quoteMark": "single",

	// Number of spaces after comma
	"importSorter.importStringConfiguration.spacingPerImportExpression.afterComma": 1,

	// Number of spaces after {
	"importSorter.importStringConfiguration.spacingPerImportExpression.afterStartingBracket": 1,

	// Number of spaces before comma
	"importSorter.importStringConfiguration.spacingPerImportExpression.beforeComma": 0,

	// Number of spaces before }
	"importSorter.importStringConfiguration.spacingPerImportExpression.beforeEndingBracket": 1,

	// Left number of spaces for the new lined imports. If tabType is set to 'tab', then the configuration defines the size of the tab in number of spaces
	"importSorter.importStringConfiguration.tabSize": 4,

	// Defines the character which will be printed on each new lined import expression
	"importSorter.importStringConfiguration.tabType": "space",

	// If always/multiLine then adds a trailing comma at the end of the imports for 'single and multi' and 'multi-line' imports respectively. Default is none therefore no trailing comma
	"importSorter.importStringConfiguration.trailingComma": "none",

	// The default number of empty lines after any group. This has lesser priority then empty lines in rules
	"importSorter.sortConfiguration.customOrderingRules.defaultNumberOfEmptyLinesAfterGroup": 1,

	// The default order level of everything which is not included into rules
	"importSorter.sortConfiguration.customOrderingRules.defaultOrderLevel": 20,

	// Disable sorting of path on the default group
	"importSorter.sortConfiguration.customOrderingRules.disableDefaultOrderSort": false,

	// The default order level of everything which is not included into rules
	"importSorter.sortConfiguration.customOrderingRules.rules": [
		{
			"type": "importMember",
			"regex": "^$",
			"orderLevel": 5,
			"disableSort": true
		},
		{
			"regex": "^[^.@]",
			"orderLevel": 10
		},
		{
			"regex": "^[@]",
			"orderLevel": 15
		},
		{
			"regex": "^[.]",
			"orderLevel": 30
		}
	],

	// Sort Direction of names in curly brackets
	"importSorter.sortConfiguration.importMembers.direction": "asc",

	// Sort Order of names in curly brackets
	"importSorter.sortConfiguration.importMembers.order": "caseInsensitive",

	// Sort Direction of paths
	"importSorter.sortConfiguration.importPaths.direction": "asc",

	// Sort Order of paths
	"importSorter.sortConfiguration.importPaths.order": "caseInsensitive",

	// Combine imports with the same path
	"importSorter.sortConfiguration.joinImportPaths": true,

	// Works only if removeUnusedImports enabled. This option will remove default imports if they are not explicitly used in the source code.
	"importSorter.sortConfiguration.removeUnusedDefaultImports": false,

	// Removes not used imports where we do not have explicit side effects
	"importSorter.sortConfiguration.removeUnusedImports": false,

	// Default host in which the preview should be opened.
	"swaggerViewer.defaultHost": "localhost",

	// Default port in which the preview should be opened.
	"swaggerViewer.defaultPort": 9000,

	// Whether to open preview in browser, default: preview inside vscode
	"swaggerViewer.previewInBrowser": false,

	// Whether to show only the filename in the preview title, default: show filename along with path
	"swaggerViewer.showOnlyFileName": false,

	// By default, create file  username
	"fileheader.Author": "mikey.zhaopeng",

	// By default, update file  username.
	"fileheader.LastModifiedBy": "mikey.zhaopeng",

	// By default, common template. Do not modify it!!!!!
	"fileheader.tpl": "/*\r\n * @Author: {author} \r\n * @Date: {createTime} \r\n * @Last Modified by:   {lastModifiedBy} \r\n * @Last Modified time: {updateTime} \r\n */\r\n",

	// Also emit declaration (d.ts file) for compiled TS file. This will produce declaration only for single file, rather than whole project. Experimental.
	"babel-compile-on-save.emitTSDeclaration": false,

	// Emit declaration sourcemap with d.ts file. Applies only when emitTSDeclaration is true
	"babel-compile-on-save.emitTSDeclarationMap": true,

	// Array of glob patterns. File will be compiled if glob matches
	"babel-compile-on-save.include": [],

	// Output directory relative to the workspace folder root
	"babel-compile-on-save.outDir": "build",

	// Output file extension
	"babel-compile-on-save.outExt": ".js",

	// Src root directory relative to the workspace root, e.g. ./src
	"babel-compile-on-save.srcDir": "src",

	// Specifies the default namespace for snippets. If manfest.json is specified, sap.app.id from manifest.json is used.
	"ui5.snippets.defaultNamespace": "manifest.json",

	// Specifies wheather single or double quotes are used for JavaScript snippets.
	"ui5.snippets.useSingleQuotesJs": false,

	// Beautify React JavaScript TypeScript Basic configuration =。=
	"rc-beautify": {
		"insize": 4,
		"inchar": " ",
		"bracepadding": false,
		"wrap": 80
	},

	// Add execution arguments
	"miramac.node.args": null,

	// Clear output before execution
	"miramac.node.clearOutput": true,

	// Set the working directory of the Node.js process
	"miramac.node.cwd": "${execPath}",

	// Add execution environment variables
	"miramac.node.env": null,

	// Execute always the file ('file') only selected code ('selection') or both ('both')
	"miramac.node.executeFileOrSelection": "both",

	// Some code that is executed with each run
	"miramac.node.includeCode": null,

	// If true, the extention will not use new features and options.
	"miramac.node.legacyMode": true,

	// Node binary
	"miramac.node.nodeBin": "node",

	// Add execution options
	"miramac.node.options": null,

	// Output-Channel Name
	"miramac.node.outputWindowName": "Node.js",

	// File to execute (comming soon)
	"miramac.node.program": null,

	// Show start and end info
	"miramac.node.showInfo": true,

	// Show errors
	"miramac.node.showStderr": true,

	// Show console output
	"miramac.node.showStdout": true,

	// Use the integrated terminal
	"miramac.node.terminalMode": false,

	// Wheather to enable extension.
	// 
	// Display import modules version in `Typescript/Javascript`.
	// 
	// eg. `import typescript from "typescript@3.3.3333"`
	"npm-import-package-version.enable": true,

	// Compiler options for C (e.g. ["-std=c99"])
	"clang.cflags": [],

	// Complete macros
	"clang.completion.completeMacros": true,

	// Enable completion
	"clang.completion.enable": true,

	// Tolerable size of the clang output for completion
	"clang.completion.maxBuffer": 8388608,

	// Trigger completion when the user types one of the characters
	"clang.completion.triggerChars": [
		".",
		":",
		">"
	],

	// Compiler options for C++ (e.g. ["-std=c++11"])
	"clang.cxxflags": [],

	// The delay after which diagnostic starts (in millisecond)
	"clang.diagnostic.delay": 500,

	// Enable diagnostic
	"clang.diagnostic.enable": true,

	// Tolerable size of the clang output for diagnostic
	"clang.diagnostic.maxBuffer": 262144,

	// Clang command or the path to the Clang executable
	"clang.executable": "clang",

	// Compiler options for Objective-C
	"clang.objcflags": [],

	// server to connect to
	"mongoShell.host": "",

	// path to mongo shell executable
	"mongoShell.path": "C:\\MongoDB\\Server\\3.2\\bin\\mongo.exe",

	// port to connect to
	"mongoShell.port": "",

	// be less chatty
	"mongoShell.quiet": false,

	// username for authentication
	"mongoShell.username": "",

	// increase verbosity
	"mongoShell.verbose": false,

	// The associated document types to be linted.
	"htmlhint.documentSelector": [
		"html",
		"htm"
	],

	// Control whether htmlhint is enabled for HTML files or not.
	"htmlhint.enable": true,

	// The htmlhint options object to provide args to the htmlhint command.
	"htmlhint.options": {},

	// Enable/disable adding words to system custom spelling dictionary instead of user dictionary.
	"spellright.addToSystemDictionary": false,

	// Scope for automatic configuration update.
	"spellright.configurationScope": "workspace",

	// Enable/disable automatic update of configuration from GUI operations.
	"spellright.configurationUpdate": true,

	// Document types for which spelling will be turned ON by default.
	"spellright.documentTypes": [
		"markdown",
		"latex",
		"plaintext"
	],

	// Enable/disable grouping of dictionaries by language.
	"spellright.groupDictionaries": true,

	// List of file patterns ignored during spelling.
	"spellright.ignoreFiles": [
		"**/.gitignore",
		"**/.spellignore"
	],

	// Regular expressions to eliminate from spelling.
	"spellright.ignoreRegExps": [],

	// Regular expressions to eliminate from spelling per document type.
	"spellright.ignoreRegExpsByClass": {},

	// Default language set (dictionary/region) used for spelling.
	"spellright.language": [],

	// Decide which language is used to spell syntactic parts of documents.
	"spellright.languageContext": {},

	// Decide which language is used to spell syntactic parts of documents per document type.
	"spellright.languageContextByClass": {},

	// List of LaTeX commands that will have the parameter list spell checked.
	"spellright.latexSpellParameters": [
		"author",
		"title",
		"subtitle",
		"date",
		"chapter",
		"section\\*?",
		"subsection\\*?",
		"subsubsection\\*?",
		"part",
		"paragraph",
		"subparagraph",
		"text(rm|sf|tt|md|bf|up|it|sl|sc|normal)",
		"underline",
		"emph",
		"item",
		"footnote(text)?",
		"caption(of)?",
		"multicolumn",
		"href",
		"hyperref",
		"institute",
		"frametitle",
		"framesubtitle",
		"begin\\{frame\\}"
	],

	// Assign class of diagnostic messages produced by SpellRight.
	"spellright.notificationClass": "error",

	// Assign class of diagnostic messages produced by SpellRight per parser.
	"spellright.notificationClassByParser": {},

	// Decide which parser and its configuration to use per document type.
	"spellright.parserByClass": {},

	// Enable/disable spelling of entire document on save.
	"spellright.recheckOnSave": true,

	// Decide which syntactic parts of documents are spelled by default.
	"spellright.spellContext": "body comments strings",

	// Decide which syntactic parts of documents are spelled per document type.
	"spellright.spellContextByClass": {},

	// Enable/disable language & status indicator switch in status bar.
	"spellright.statusBarIndicator": true,

	// Enable/disable including suggested corrections in hints.
	"spellright.suggestionsInHints": true,

	// Enable/disable using document symbols when spelling using code parser (source code documents).
	"spellright.useDocumentSymbolsInCode": true,

	// 
	"deploy": {},

	// Activates the i18n features for snippets (eg.: _(""))
	"django.i18n": true,

	// Exclude Python snippets by their file name. Can be 'import', 'postgres'...
	"django.snippets.exclude": [
		"cms",
		"wagtail"
	],

	// Activates the Python snippets
	"django.snippets.use": true,

	// 
	"rest.api": {},

	// Custom CSS/JS files, as an array of URLs, not file paths
	"vscode_custom_css.imports": [],

	// Disable vscode Content Policy (required if loading from URL)
	"vscode_custom_css.policy": false,

	// Enable Status Indicator
	"vscode_custom_css.statusbar": true,

	// 
	"script.commands": {},

	// Specifies custom documentation overrides on a per module basis
	"nodeReadme.overrides": null,

	// 
	"git.notify": {},

	// clean options
	"CleanCSS.options": {
		"format": "keep-breaks",
		"compatibility": "ie8"
	},

	// 
	"http.client": {},

	// Enable/disable formatting of html template strings.
	"lit-html.format.enabled": true,

	// List of template tags to enable html intellisense in.
	"lit-html.tags": [
		"html",
		"raw"
	],

	// Defaults to true, whether to show gzip size in detailed view or not.
	"filesize.showGzip": true,

	// Defaults to true, using 24-hour format. Set to false to get 12-hour format.
	"filesize.use24HourFormat": true,

	// Defaults to false, using IEC's representation. Set to true to get SI representation.
	"filesize.useDecimal": false,

	// (Advanced) Indicates if the extension will use the bundled version of asconfigc or a different version that is installed on the system path.
	"as3mxml.asconfigc.useBundled": true,

	// (Advanced) Specifies the path to the java exectuable (Note: this must be an executable, and not a directory). Use this setting if the extension cannot find Java automatically.
	"as3mxml.java.path": null,

	// Specifies whether to check for problems in real-time as you type, or only on save.
	"as3mxml.problems.realTime": true,

	// Specifies whether to display a message if a file is outside of the workspace's source path.
	"as3mxml.problems.showFileOutsideSourcePath": true,

	// Specifies whether to automatically display a prompt to import a project folder from Adobe Flash Builder when asconfig.json is not present.
	"as3mxml.projectImport.prompt": true,

	// (Advanced) Specifies the folder path of the Apache Royale SDK used internally by the extension for code intelligence. Unless you know what you're doing, you should probably set as3mxml.sdk.framework instead.
	"as3mxml.sdk.editor": null,

	// Specifies the folder path of the ActionScript SDK used by the current workspace.
	"as3mxml.sdk.framework": null,

	// Specifies a folder path containing one or more ActionScript SDKs to show in the SDK picker.
	"as3mxml.sdk.searchPaths": null,

	// DEPRECATED: Use as3mxml.asconfigc.useBundled instead.
	// 
	"nextgenas.asconfigc.useBundled": null,

	// DEPRECATED: Use as3mxml.java.path instead.
	// 
	"nextgenas.java": null,

	// DEPRECATED: Use as3mxml.sdk.editor instead.
	// 
	"nextgenas.sdk.editor": null,

	// DEPRECATED: Use as3mxml.sdk.framework instead.
	// 
	"nextgenas.sdk.framework": null,

	// DEPRECATED: Use as3mxml.sdk.searchPaths instead.
	// 
	"nextgenas.sdk.searchPaths": null,

	// Selected board
	"mos.board": "",

	// Extra mos command line flags to pass
	"mos.flags": "",

	// --port value
	"mos.port": "",

	// Automatically opens file in browser after server reload
	"phpserver.autoOpenOnReload": true,

	// Select the browser that will open localhost (Options: firefox, chrome or edge. If empty, no browser will be opened)
	"phpserver.browser": "chrome",

	// Server IP ('localhost','0.0.0.0',...)
	"phpserver.ip": "localhost",

	// Specify the location of your PHP executable. If empty, the extension will use the PHP executable which appears in the $PATH environment variable
	"phpserver.phpPath": null,

	// Server Port Number
	"phpserver.port": 3000,

	// Path relative to project (In case that you want to serve a different folder than workspace)
	"phpserver.relativePath": ".",

	// Specify the location of your custom router script ('router.php', '/home/user/router.php'...)
	"phpserver.router": null,

	// True if the imports should be absolute to the workspace root
	"autoimport.absolute": false,

	// Adds found items to intellisense and automatically imports then
	"autoimport.autoComplete": true,

	// Specifies wether to use double quotes
	"autoimport.doubleQuotes": false,

	// Glob for files to watch and scan, e.g ./src/** ./src/app/**/*.ts. Defaults to **/*.{ts,tsx}
	"autoimport.filesToScan": "${workspaceRoot}/**/*.{js,jsx,ts,tsx}",

	// This allows the importer to find your components name bypass the higher order components that you wrap it in. Each higher order component must be deliminated by pipe |. example: connect|withRouter
	"autoimport.higherOrderComponents": "connect|withRouter",

	// Specifies whether to use a semicolon at the end of the line
	"autoimport.semicolon": true,

	// Specifies wether to show notifications from Auto Import
	"autoimport.showNotifications": false,

	// Change this if your absolute urls are not absolute from workspace root e.g ./src
	"autoimport.sourceRoot": "./",

	// Specifies wether to use spaces between first and last brace
	"autoimport.spaceBetweenBraces": true,

	// Use ; at the end of a line e.g Import * from ./app or Import * from ./app; - Default True
	"autoimport.useSemiColon": true,

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Advanced feature. Enable and use postcss parser for those language ids. Restart required
	"prettier.cssEnable": [
		"css",
		"less",
		"scss"
	],

	// Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.
	"prettier.eslintIntegration": false,

	// Advanced feature. Enable and use graphql parser for those language ids. Restart required
	"prettier.graphqlEnable": [
		"graphql"
	],

	// Advanced feature. Enable and use 'prettier.parser' parser for those language ids. Restart required
	"prettier.javascriptEnable": [
		"javascript",
		"javascriptreact"
	],

	// Advanced feature. Enable and use json parser for those language ids. Restart required
	"prettier.jsonEnable": [
		"json"
	],

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Override the parser. You shouldn't have to change this setting.
	"prettier.parser": "babylon",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Add space before all parenthesis
	"prettier.spaceParenthesis": true,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible
	"prettier.trailingComma": "none",

	// Advanced feature. Enable and use typescript parser for those language ids. Restart required
	"prettier.typescriptEnable": [
		"typescript",
		"typescriptreact"
	],

	// Use the flow parser instead of babylon (deprecated, use 'parser:"babylon"' instead)
	"prettier.useFlowParser": false,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Controls when an alert for compiling errors should be display for user. Values: ['always', 'never']
	"vscode.tsc.compiler.alertOnError": "always",

	// Controls when an alert should be display for user when tsconfig.json file is found/removed from extension watcher. Values: ['always', 'never']
	"vscode.tsc.compiler.alertTSConfigChanges": "always",

	// set this to false when you don't want to have imports added on pasting code
	"vscode-exports-autocomplete.addImportsOnPaste": true,

	// set this to true when you prefer spaces around curly braces
	"vscode-exports-autocomplete.addSpacingAroundCurlyBraces": false,

	// size limit for the cache of parsed exports, shared among all projects
	"vscode-exports-autocomplete.cacheSizeLimit": "25MB",

	// it might be useful to disable when you have a project where you can't sacrifice performance
	"vscode-exports-autocomplete.enable": true,

	// set this to false when you're annoyed by the stuff you get from your npm modules
	"vscode-exports-autocomplete.enableNpmDependencies": true,

	// generated import statements will always be indented using this string if it is set
	"vscode-exports-autocomplete.indentationOverride": null,

	// set this to a higher value if 'on paste' is too aggressive for you
	"vscode-exports-autocomplete.minimumWordLengthToImportOnPaste": 3,

	// this allows to override the import style and force the imports to use this string as quotes
	"vscode-exports-autocomplete.quoteCharOverride": null,

	// Configuration options for Easy LESS extension.
	"less.compile": {},

	// Set 1 to enable debug output
	"repotool.debug": 0,

	// An array of attributes in the correct order
	"attrsSorter.order": [],

	// 
	"jsonTreeView.autorefresh": true,

	// 
	"jsonTreeView.customizedViewActivated": true,

	// 
	"jsonTreeView.customizedViewMapping": {},

	// Which browsers you need to support.
	"autoprefixer.browsers": [
		"last 2 versions",
		"> 5%"
	],

	// Use an external Autoprefixer package instead of built-in version.
	"autoprefixer.findExternalAutoprefixer": false,

	// Add vendor prefixes to CSS when you save a file.
	"autoprefixer.formatOnSave": false,

	// The ability to turn on Grid Autoplacement support in IE.
	"autoprefixer.grid": "off",

	// An optional array of glob-patterns to ignore files on save.
	"autoprefixer.ignoreFilesOnSave": [],

	// Uses the legacy module resolving.
	"standard._legacyModuleResolve": false,

	// Turns auto fix on save on or off.
	"standard.autoFixOnSave": false,

	// Controls whether JavaScript Standard Style is enabled for JavaScript files or not.
	"standard.enable": true,

	// A path added to NODE_PATH when resolving the standard module.
	"standard.nodePath": null,

	// The standard options object to provide args normally passed to JavaScript Standard Style when executed from a command line.
	"standard.options": {},

	// Run the linter on save (onSave) or on type (onType)
	"standard.run": "onType",

	// Controls whether JavaScript Semistandard Style should be enabled or disabled.
	"standard.semistandard": false,

	// Traces the communication between VSCode and the JavaScript Standard Style linter service.
	"standard.trace.server": "off",

	// Activate JavaScript Standard Style based on project's package.json settings, use globally installed standard module if set to "false"
	"standard.usePackageJson": false,

	// An array of language ids which should be validated by JavaScript Standard Style
	"standard.validate": [
		"javascript",
		"javascriptreact"
	],

	// 
	"standard.workingDirectories": [],

	// An autoprefixer-like array of browsers.
	"doiuse.browsers": [],

	// Control whether doiuse is enabled for styles files or not.
	"doiuse.enable": false,

	// An optional array of features to ignore.
	"doiuse.ignore": [],

	// An optional array of file globs to match against original source file path, to ignore.
	"doiuse.ignoreFiles": [],

	// Represents a diagnostic level, such as a Information, Warning or Error.
	"doiuse.messageLevel": "Warning",

	// Run the linter on save (onSave) or on type (onType).
	"doiuse.run": "onType",

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Mappings for paths
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// Some transforms now generate warnings when they cannot be applied, helping you to better diagnose problems.
	"lebab.skipWarnings": true,

	// Convert your old-fashioned code with a specific transformation.
	"lebab.transforms": [
		"arg-rest",
		"arg-spread",
		"arrow-return",
		"arrow",
		"class",
		"commonjs",
		"default-param",
		"destruct-param",
		"exponent",
		"for-each",
		"for-of",
		"includes",
		"let",
		"multi-var",
		"no-strict",
		"obj-method",
		"obj-shorthand",
		"template"
	],

	// Automatically remove prefix 0, default: true
	"cssrem.autoRemovePrefixZero": true,

	// Px to rem decimal point maximum length, default: 6
	"cssrem.fixedDigits": 6,

	// Ignores `px` to `rem` when trigger command, can be set `[ "1px", "0.5px" ]`, default: []
	"cssrem.ingoresViaCommand": [],

	// root font-size (unit: px), default: 16
	"cssrem.rootFontSize": 16,

	// Config object for PostCSS Sorting or path to config file.
	"postcssSorting.config": {},

	// Show error messages or not. Will be automatically set to false if 'editor.formatOnSave' is enabled.
	"postcssSorting.showErrorMessages": true,

	// The path to Chrome to be used rather than searching for the default
	"vscode-devtools-for-chrome.chromePath": null,

	// The hostname on which to search for remote debuggable chrome instances
	"vscode-devtools-for-chrome.hostname": "localhost",

	// The port on which to search for remote debuggable chrome instances
	"vscode-devtools-for-chrome.port": 9222,

	// CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracketPairColorizer.activeScopeCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}; opacity: 0.5"
	],

	// Should different brackets share a color group (Consecutive), or use their own color group (Independent)
	"bracketPairColorizer.colorMode": "Consecutive",

	// Define paired characters and their shared color group
	"bracketPairColorizer.consecutivePairColors": [
		"()",
		"[]",
		"{}",
		[
			"Gold",
			"Orchid",
			"LightSkyBlue"
		],
		"Red"
	],

	// Don't colorize files of these languages
	"bracketPairColorizer.excludedLanguages": [],

	// Should opening brackets iterate the color cycle even if they are not nested
	"bracketPairColorizer.forceIterationColorCycle": false,

	// Ensure that an opening brackets color does not match a previous brackets color
	"bracketPairColorizer.forceUniqueOpeningColor": false,

	// Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
	"bracketPairColorizer.highlightActiveScope": false,

	// Define paired characters and their color groups
	"bracketPairColorizer.independentPairColors": [
		[
			"()",
			[
				"Gold",
				"Orchid",
				"LightSkyBlue"
			],
			"Red"
		],
		[
			"[]",
			[
				"Gold",
				"Orchid",
				"LightSkyBlue"
			],
			"Red"
		],
		[
			"{}",
			[
				"Gold",
				"Orchid",
				"LightSkyBlue"
			],
			"Red"
		]
	],

	// Show active bracket scope in ruler?
	"bracketPairColorizer.rulerPosition": "Center",

	// CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracketPairColorizer.scopeLineCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}; opacity: 0.5"
	],

	// True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
	"bracketPairColorizer.scopeLineRelativePosition": true,

	// Show active bracket scope in gutter?
	"bracketPairColorizer.showBracketsInGutter": false,

	// Show active bracket scope in ruler?
	"bracketPairColorizer.showBracketsInRuler": false,

	// Show a horizontal line to create a block around the active bracket scope?
	"bracketPairColorizer.showHorizontalScopeLine": true,

	// Show a vertical line on the left side of the editor representing the active bracket scope?
	"bracketPairColorizer.showVerticalScopeLine": true,

	// How long the user should idle for, before the document is colorized. Set to 0 to disable
	"bracketPairColorizer.timeOut": 200,

	// Enables advanced creation of Azure API Management Instance, which will prompt for several additional values instead of using a default.
	"azureApiManagement.advancedCreation": false,

	// Show or hide the Azure API Management Explorer.
	"azureApiManagement.showExplorer": true,

	// Show warning dialog on remote file uploading.
	"azureApiManagement.showSavePrompt": true,

	// Specifies tags which will be ignored and not closed. Possibilities are:
	//  - null (ignore nothing)
	//  - 'html' (ignore HTML void elements specified at https://www.w3.org/TR/html/syntax.html#void-elements)
	//  - { br: true, img: true } (custom set of tags)
	"closeTag.ignoreTags": null,

	// Enables the Advanced Web App Creation which will prompt for app name, location, website OS, runtime, resource group, and app service plan.
	"appService.advancedCreation": false,

	// Array of web apps with its connections
	"appService.connections": [],

	// The default web app to use when deploying represented by its full Azure id.  Every subsequent deployment of this workspace will deploy to this web app or slot. Can be disabled by setting to "None"
	"appService.defaultWebAppToDeploy": "",

	// The default subpath of a workspace folder to use when deploying.
	"appService.deploySubpath": "",

	// The supported Docker images that logpoints feature can run with.
	"appService.enabledDockerImages": [
		"f12azurenodelogpointsnightly.azurecr.io/azure-nodejs-logpoints",
		"azurenodelogpoints.azurecr.io/azure-nodejs-logpoints"
	],

	// The name of the task to run before deploying.
	"appService.preDeployTask": "",

	// Show prompt to improve performance of Zip Deploy by excluding build artifacts from the zip file and running a build during deployment.
	"appService.showBuildDuringDeployPrompt": true,

	// Show or hide the App Service Explorer
	"appService.showExplorer": true,

	// Shows a warning that performance may drop when creating an app in an App Service Plan that has more than 3 web apps associated to it
	"appService.showPlanPerformanceWarning": true,

	// Show warning dialog on remote file uploading.
	"appService.showSavePrompt": true,

	// Defines which files in the workspace to deploy. This applies to Zip deploy only, has no effect on other deployment methods.
	"appService.zipGlobPattern": "**/*",

	// Defines which files in the workspace to ignore for Zip deploy. This applies to Zip deploy only, has no effect on other deployment methods.
	"appService.zipIgnorePattern": [],

	// Absolute path to the directory that the cached index will be stored in. Try to have this directory on an SSD. If not explicitly set, this will be automatically populated with the extension cache directory.
	// 
	// ${workspaceFolder} will be replaced by the folder where .vscode/settings.json resides.
	// 
	// Cache directories are project-wide, so this should be configured in the workspace settings so multiple indexes do not clash.
	// 
	// Example value: "/work/cquery-cache/chrome/"
	"cquery.cacheDirectory": "",

	// Set to false to hide code lens on parameters and function local variables.
	"cquery.codeLens.onLocalVariables": false,

	// Enables a custom code lens renderer so code lens are displayed inline with code. This removes any vertical-space footprint at the cost of horizontal space.
	"cquery.codeLens.renderInline": false,

	// If true, parameter declarations are inserted as snippets in function/method call arguments when completing a function/method call
	"cquery.completion.enableSnippetInsertion": true,

	// EMCAScript regex that checks absolute path. If it matches, the file is not added to include path auto-complete. An example is ".*/CACHE/.*"
	"cquery.completion.include.blacklist": [],

	// Maximum length for path in #include proposals. If the path length goes beyond this number it will be elided. Set to 0 to always display the full path.
	"cquery.completion.include.maximumPathLength": 37,

	// EMCAScript regex that checks absolute file path. If it does not match, the file is not added to include path auto-complete. An example is ".*/src/.*"
	"cquery.completion.include.whitelist": [],

	// Only files ending in one of these values will be shown in include auto-complete. Set to the empty-list to disable include auto-complete.
	"cquery.completion.include.whitelistLiteralEnding": [
		".h",
		".hpp",
		".hh"
	],

	// If true, a notification will be shown whenever the querydb thread is busy.
	"cquery.developer.emitQueryDbBlocked": false,

	// Files that match these patterns won't be displayed in diagnostics view.
	"cquery.diagnostics.blacklist": [],

	// If true, diagnostics will be reported when a file is parsed (ie, saving or indexed).
	"cquery.diagnostics.onParse": true,

	// If true, code completion will trigger diagnostic updates.
	"cquery.diagnostics.onType": true,

	// Files that match these patterns will be displayed in diagnostics view.
	"cquery.diagnostics.whitelist": [],

	// If document formatting is enabled/disabled
	"cquery.formatting.enabled": true,

	// 
	"cquery.highlighting.bold.enumConstants": true,

	// 
	"cquery.highlighting.bold.enums": true,

	// 
	"cquery.highlighting.bold.freeStandingFunctions": false,

	// 
	"cquery.highlighting.bold.freeStandingVariables": false,

	// 
	"cquery.highlighting.bold.globalVariables": false,

	// 
	"cquery.highlighting.bold.macros": false,

	// 
	"cquery.highlighting.bold.memberFunctions": false,

	// 
	"cquery.highlighting.bold.memberVariables": false,

	// 
	"cquery.highlighting.bold.namespaces": true,

	// 
	"cquery.highlighting.bold.parameters": false,

	// 
	"cquery.highlighting.bold.staticMemberFunctions": false,

	// 
	"cquery.highlighting.bold.staticMemberVariables": false,

	// 
	"cquery.highlighting.bold.templateParameters": true,

	// 
	"cquery.highlighting.bold.typeAliases": true,

	// 
	"cquery.highlighting.bold.types": true,

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.enumConstants": [
		"#587d87",
		"#26cdca",
		"#397797",
		"#57c2cc",
		"#306b72",
		"#6cbcdf",
		"#368896",
		"#3ea0d2",
		"#48a5af",
		"#7ca6b7"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.enums": [
		"#e1afc3",
		"#d533bb",
		"#9b677f",
		"#e350b6",
		"#a04360",
		"#dd82bc",
		"#de3864",
		"#ad3f87",
		"#dd7a90",
		"#e0438a"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.freeStandingFunctions": [
		"#e5b124",
		"#927754",
		"#eb992c",
		"#e2bf8f",
		"#d67c17",
		"#88651e",
		"#e4b953",
		"#a36526",
		"#b28927",
		"#d69855"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.freeStandingVariables": [
		"#587d87",
		"#26cdca",
		"#397797",
		"#57c2cc",
		"#306b72",
		"#6cbcdf",
		"#368896",
		"#3ea0d2",
		"#48a5af",
		"#7ca6b7"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.globalVariables": [
		"#587d87",
		"#26cdca",
		"#397797",
		"#57c2cc",
		"#306b72",
		"#6cbcdf",
		"#368896",
		"#3ea0d2",
		"#48a5af",
		"#7ca6b7"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.macros": [
		"#e79528",
		"#c5373d",
		"#e8a272",
		"#d84f2b",
		"#a67245",
		"#e27a33",
		"#9b4a31",
		"#b66a1e",
		"#e27a71",
		"#cf6d49"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.memberFunctions": [
		"#e5b124",
		"#927754",
		"#eb992c",
		"#e2bf8f",
		"#d67c17",
		"#88651e",
		"#e4b953",
		"#a36526",
		"#b28927",
		"#d69855"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.memberVariables": [
		"#587d87",
		"#26cdca",
		"#397797",
		"#57c2cc",
		"#306b72",
		"#6cbcdf",
		"#368896",
		"#3ea0d2",
		"#48a5af",
		"#7ca6b7"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.namespaces": [
		"#429921",
		"#58c1a4",
		"#5ec648",
		"#36815b",
		"#83c65d",
		"#417b2f",
		"#43cc71",
		"#7eb769",
		"#58bf89",
		"#3e9f4a"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.parameters": [
		"#587d87",
		"#26cdca",
		"#397797",
		"#57c2cc",
		"#306b72",
		"#6cbcdf",
		"#368896",
		"#3ea0d2",
		"#48a5af",
		"#7ca6b7"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.staticMemberFunctions": [
		"#e5b124",
		"#927754",
		"#eb992c",
		"#e2bf8f",
		"#d67c17",
		"#88651e",
		"#e4b953",
		"#a36526",
		"#b28927",
		"#d69855"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.staticMemberVariables": [
		"#587d87",
		"#26cdca",
		"#397797",
		"#57c2cc",
		"#306b72",
		"#6cbcdf",
		"#368896",
		"#3ea0d2",
		"#48a5af",
		"#7ca6b7"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.templateParameters": [
		"#e1afc3",
		"#d533bb",
		"#9b677f",
		"#e350b6",
		"#a04360",
		"#dd82bc",
		"#de3864",
		"#ad3f87",
		"#dd7a90",
		"#e0438a"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.typeAliases": [
		"#e1afc3",
		"#d533bb",
		"#9b677f",
		"#e350b6",
		"#a04360",
		"#dd82bc",
		"#de3864",
		"#ad3f87",
		"#dd7a90",
		"#e0438a"
	],

	// Colors to use for semantic highlighting. A good generator is http://tools.medialab.sciences-po.fr/iwanthue/. If multiple colors are specified, semantic highlighting will cycle through them for successive symbols.
	"cquery.highlighting.colors.types": [
		"#e1afc3",
		"#d533bb",
		"#9b677f",
		"#e350b6",
		"#a04360",
		"#dd82bc",
		"#de3864",
		"#ad3f87",
		"#dd7a90",
		"#e0438a"
	],

	// If semantic highlighting for enumerators is enabled/disabled.
	"cquery.highlighting.enabled.enumConstants": false,

	// If semantic highlighting for enumerations is enabled/disabled.
	"cquery.highlighting.enabled.enums": false,

	// If semantic highlighting for member functions is enabled/disabled.
	"cquery.highlighting.enabled.freeStandingFunctions": false,

	// If semantic highlighting for member free-standing variables is enabled/disabled.
	"cquery.highlighting.enabled.freeStandingVariables": false,

	// If semantic highlighting for global variables is enabled/disabled.
	"cquery.highlighting.enabled.globalVariables": false,

	// If semantic highlighting for macros is enabled/disabled.
	"cquery.highlighting.enabled.macros": false,

	// If semantic highlighting for member functions is enabled/disabled.
	"cquery.highlighting.enabled.memberFunctions": false,

	// If semantic highlighting for member variables is enabled/disabled.
	"cquery.highlighting.enabled.memberVariables": false,

	// If semantic highlighting for namespaces is enabled/disabled.
	"cquery.highlighting.enabled.namespaces": false,

	// If semantic highlighting for parameters is enabled/disabled.
	"cquery.highlighting.enabled.parameters": false,

	// If semantic highlighting for static member functions is enabled/disabled.
	"cquery.highlighting.enabled.staticMemberFunctions": false,

	// If semantic highlighting for static member variables is enabled/disabled.
	"cquery.highlighting.enabled.staticMemberVariables": false,

	// If semantic highlighting for template parameters is enabled/disabled.
	"cquery.highlighting.enabled.templateParameters": false,

	// If semantic highlighting for type aliases is enabled/disabled.
	"cquery.highlighting.enabled.typeAliases": false,

	// If semantic highlighting for classes, structs, and unions is enabled/disabled.
	"cquery.highlighting.enabled.types": false,

	// 
	"cquery.highlighting.italic.enumConstants": false,

	// 
	"cquery.highlighting.italic.enums": false,

	// 
	"cquery.highlighting.italic.freeStandingFunctions": false,

	// 
	"cquery.highlighting.italic.freeStandingVariables": false,

	// 
	"cquery.highlighting.italic.globalVariables": false,

	// 
	"cquery.highlighting.italic.macros": false,

	// 
	"cquery.highlighting.italic.memberFunctions": true,

	// 
	"cquery.highlighting.italic.memberVariables": true,

	// 
	"cquery.highlighting.italic.namespaces": false,

	// 
	"cquery.highlighting.italic.parameters": true,

	// 
	"cquery.highlighting.italic.staticMemberFunctions": false,

	// 
	"cquery.highlighting.italic.staticMemberVariables": false,

	// 
	"cquery.highlighting.italic.templateParameters": false,

	// 
	"cquery.highlighting.italic.typeAliases": false,

	// 
	"cquery.highlighting.italic.types": false,

	// 
	"cquery.highlighting.underline.enumConstants": false,

	// 
	"cquery.highlighting.underline.enums": false,

	// 
	"cquery.highlighting.underline.freeStandingFunctions": false,

	// 
	"cquery.highlighting.underline.freeStandingVariables": false,

	// 
	"cquery.highlighting.underline.globalVariables": false,

	// 
	"cquery.highlighting.underline.macros": false,

	// 
	"cquery.highlighting.underline.memberFunctions": false,

	// 
	"cquery.highlighting.underline.memberVariables": false,

	// 
	"cquery.highlighting.underline.namespaces": false,

	// 
	"cquery.highlighting.underline.parameters": false,

	// 
	"cquery.highlighting.underline.staticMemberFunctions": true,

	// 
	"cquery.highlighting.underline.staticMemberVariables": true,

	// 
	"cquery.highlighting.underline.templateParameters": false,

	// 
	"cquery.highlighting.underline.typeAliases": false,

	// 
	"cquery.highlighting.underline.types": false,

	// A translation unit (cc/cpp file) is not indexed if any of the EMCAScript regexes in this list matches translation unit's the absolute path.
	// 
	// You probably want to begin the regex using ".*" because the passed paths are absolute.
	"cquery.index.blacklist": [],

	// An extra set of command line arguments to give clang when indexing. Each list entry is a separate argument.
	"cquery.index.extraClangArguments": [],

	// If a translation unit's absolute path matches any EMCAScript regex in this list, it will be indexed. The whitelist takes priority over the blacklist. To only index files in the whitelist, make "cquery.index.blacklist" match everything, ie, set it to ".*".
	// 
	// You probably want to begin the regex using ".*" because the passed paths are absolute.
	"cquery.index.whitelist": [],

	// Array containing extra arguments to pass to the cquery binary
	"cquery.launch.args": [],

	// If true, cquery will be automatically restarted if it crashes.
	"cquery.launch.autoRestart": true,

	// Path to the cquery binary (default assumes the binary is in the PATH)
	"cquery.launch.command": "cquery",

	// If true, a notification message will be displayed whenever cquery crashes.
	"cquery.launch.notifyOnCrash": false,

	// If true, paths which were skipped by `cquery.index.whitelist` and `cquery.index.blacklist` will be logged and viewable in the cquery output window.
	"cquery.log.skippedPathsForIndex": false,

	// If not empty, the compilation database directory to use instead of the project root
	"cquery.misc.compilationDatabaseDirectory": "",

	// If true, cquery will detect system includes using clang -E.
	"cquery.misc.discoverSystemIncludes": true,

	// If set to false, restoring the cached index will be disabled. Only useful if there is a cached index stored on disk. You should not need to use this.
	"cquery.misc.enableCacheRead": true,

	// If set to false, writing indexed files out to cache will be disabled. Only useful if |enableIndexing| is true. You should not need to use this.
	"cquery.misc.enableCacheWrite": true,

	// If set to false, updating the index will be disabled. You should not need to use this.
	"cquery.misc.enableIndexing": true,

	// Forcibly set the number of indexing/working jobs. This value is automatically computed by the indexer and you should not need to set it manually.
	// 
	// Ideally, this should be the number of CPU cores you have, minus one. cquery scales quite well so this number can go very high; cquery will use 5000%+ CPU usage on machines with over 50 cores. If you set the value higher than your number of hardware threads, cquery will slow down significantly due to thread contention.
	// 
	// If set to 0 or a negative value, the indexer will ignore this value.
	// 
	// For example, if you have a 4 core hyper-threaded processor, this should be set to 7. If you have dual 13 core hyper-threaded processors, this should be set to 2*13*2-1=51.
	"cquery.misc.indexerCount": 0,

	// The maximum number of global search (ie, Ctrl+P + #foo) search results to report. For small search strings on large projects there can be a massive number of results (ie, over 1,000,000) so this limit is important to avoid extremely long delays. null means use the default value provided by the cquery language server.
	"cquery.misc.maxWorkspaceSearchResults": null,

	// Default value to use for clang -resource-dir argument. This will be automatically supplied by cquery if not provided.
	"cquery.misc.resourceDirectory": "",

	// If true, cquery will highlight inactive regions.
	"cquery.misc.showInactiveRegions": true,

	// Controls the visibility of the status indicator.
	"cquery.misc.status": "short",

	// If true, document links (an underline) will be rendered on includes. Goto definition (control click) will still work on includes even if this is false.
	"cquery.showDocumentLinksOnIncludes": true,

	// css styling to apply to the background when the code region has been disabled by the preprocessor in a dark theme.
	"cquery.theme.dark.inactiveRegion.backgroundColor": "rgba(18, 18, 18, 0.3)",

	// css styling to apply to text when the code region has been disabled by the preprocessor in a dark theme.
	"cquery.theme.dark.inactiveRegion.textColor": "rgb(100, 100, 100)",

	// css styling to apply to the background when the code region has been disabled by the preprocessor in a light theme.
	"cquery.theme.light.inactiveRegion.backgroundColor": "rgba(220, 220, 220, 0.3)",

	// css styling to apply to text when the code region has been disabled by the preprocessor in a light theme.
	"cquery.theme.light.inactiveRegion.textColor": "rgb(100, 100, 100)",

	// If a tree view entry is double-clicked within this timeout value, vscode will navigate to the entry.
	"cquery.treeViews.doubleClickTimeoutMs": 500,

	// Enables advanced creation of Azure Function Apps, which will prompt for several additional values instead of using a default.
	"azureFunctions.advancedCreation": false,

	// Create a virtual environment when creating a new Python project.
	"azureFunctions.createPythonVenv": true,

	// The default subpath of a workspace folder to use when deploying. If set, you will not be prompted for the folder path when deploying.
	"azureFunctions.deploySubpath": "",

	// Enable preview support for a tree view of the local project.
	"azureFunctions.enableProjectTree": false,

	// Enable remote debugging, an experimental feature that only supports Java-based Functions Apps.
	"azureFunctions.enableRemoteDebugging": false,

	// Enable preview support for slots.
	"azureFunctions.enableSlots": false,

	// The timeout (in seconds) to be used when searching for the Azure Functions host process. Since a build is required every time you F5, you may need to adjust this based on how long your build takes.
	"azureFunctions.pickProcessTimeout": 60,

	// The name of the task to run before zip deployments.
	"azureFunctions.preDeployTask": "",

	// The default language to use when performing operations in the Azure Functions extension (e.g. "Create New Function").
	//  - Bash: (Preview)
	//  - Batch: (Preview)
	//  - C#
	//  - F#
	//  - C#Script: (Preview)
	//  - F#Script: (Preview)
	//  - Java
	//  - JavaScript
	//  - PHP: (Preview)
	//  - PowerShell: (Preview)
	//  - Python: (Preview)
	//  - TypeScript
	"azureFunctions.projectLanguage": "",

	// The behavior to use after creating a new project. The options are "AddToWorkspace", "OpenInNewWindow", or "OpenInCurrentWindow".
	"azureFunctions.projectOpenBehavior": "",

	// The default runtime to use when performing operations in the Azure Functions extension (e.g. "Create New Function").
	//  - ~1: Azure Functions v1 (.NET Framework)
	//  - ~2: Azure Functions v2 (.NET Standard)
	//  - beta: DEPRECATED Use "~2" instead.
	"azureFunctions.projectRuntime": "",

	// The default subpath of a workspace folder to use for project operations. This is only necessary if you have multiple projects in one workspace. See https://aka.ms/AA4nmfy for more information.
	"azureFunctions.projectSubpath": "",

	// The name of the Python virtual environment used for your project. A virtual environment is required to debug and deploy Python functions.
	"azureFunctions.pythonVenv": "",

	// Show a warning to install a 64-bit version of the Azure Functions Core Tools when you create a .NET Framework project.
	"azureFunctions.show64BitWarning": true,

	// Show a warning if your installed version of Azure Functions Core Tools is out-of-date.
	"azureFunctions.showCoreToolsWarning": true,

	// Show a warning when an Azure Functions project was detected that has an out-of-date debug configuration.
	"azureFunctions.showDebugConfigWarning": true,

	// Show a warning when the "deploySubpath" setting does not match the selected folder for deploying.
	"azureFunctions.showDeploySubpathWarning": true,

	// Show or hide the Azure Functions Explorer
	"azureFunctions.showExplorer": true,

	// Show a warning when an Azure Functions Java project was detected that has an out-of-date deploy configuration.
	"azureFunctions.showJavaDeployConfigWarning": true,

	// Show a warning if multiple installs of Azure Functions Core Tools are detected.
	"azureFunctions.showMultiCoreToolsWarning": true,

	// Show a warning when an Azure Functions project was detected that has not been initialized for use in VS Code.
	"azureFunctions.showProjectWarning": true,

	// Show a warning when an Azure Functions Python project was detected that does not have a virtual environment.
	"azureFunctions.showPythonVenvWarning": true,

	// Show a warning when an Azure Functions .NET project was detected that has mismatched target frameworks.
	"azureFunctions.showTargetFrameworkWarning": true,

	// Specify the templates to display when creating a new function. The supported values are 'Verified', 'Core', and 'All'. The 'Verified' category is a subset of 'Core' that has been verified to work with the latest VS Code extension.
	"azureFunctions.templateFilter": "Verified",

	// A runtime release version (any runtime) that species which templates will be used rather than the latest templates.  This version will be used for ALL runtimes. (Requires a restart of VS Code to take effect)
	"azureFunctions.templateVersion": "",

	// Enables plugin.
	"jestRunner.enabled": false,

	// Glob pattern for test files.
	"jestRunner.glob": "**/*.test.js",

	// Show warning dialog on Blob file save.
	"azureStorage.blob.showSavePrompt": true,

	// Show warning dialog on File file save.
	"azureStorage.file.showSavePrompt": true,

	// The name of the task to run before deploying.
	"azureStorage.preDeployTask": "",

	// Show or hide the Azure Storage Explorer
	"azureStorage.showExplorer": true,

	// [Mac only] Set to "Path/To/Microsoft Azure Storage Explorer.app" to the location of Storage Explorer. Default is "/Applications/Microsoft Azure Storage Explorer.app".
	"azureStorage.storageExplorerLocation": "/Applications/Microsoft Azure Storage Explorer.app",

	// Character with which to prefix `abstract` members
	"treeview.abstractCharacter": "~",

	// List of provider identifiers that are allowed for the workspace or in general
	"treeview.allowedProviders": [
		"java",
		"javascript",
		"json",
		"openhab",
		"php",
		"python",
		"css",
		"less"
	],

	// Section for C/C++/C# specific configurations
	"treeview.cfamily": {
		"namespacePosition": "suffix"
	},

	// Section for Java specific configurations
	"treeview.java": {
		"namespacePosition": "suffix"
	},

	// Section for JS/TS specific configuration
	"treeview.js": {
		"defaultNamespaceType": "internal"
	},

	// Where to display symbols explorer
	"treeview.location": "sidebar",

	// Section for PHP specific configurations
	"treeview.php": {
		"namespacePosition": "suffix"
	},

	// Character with which to prefix `final` members
	"treeview.readonlyCharacter": "@",

	// Should the view update on save even if there are errors in the current file
	"treeview.updateOnError": false,

	// The field values to display as labels in the treeview for Cosmos DB and MongoDB documents, in priority order
	"cosmosDB.documentLabelFields": [
		"name",
		"Name",
		"NAME",
		"ID",
		"UUID",
		"Id",
		"id",
		"_id",
		"uuid"
	],

	// Port to use when connecting to a CosmosDB Mongo Emulator instance
	"cosmosDB.emulator.mongoPort": 10255,

	// Port to use when connecting to a CosmosDB Emulator instance
	"cosmosDB.emulator.port": 8081,

	// Set a limit for number of edges displayed in a graph visualization
	"cosmosDB.graph.maxEdges": 500,

	// Set a limit for number of vertices displayed in a graph visualization
	"cosmosDB.graph.maxVertices": 300,

	// Settings for CosmosDB graph visualization.
	"cosmosDB.graph.viewSettings": [
		{
			"vertexSettings": [
				{
					"displayProperty": [
						"name"
					],
					"color": "auto",
					"showLabel": true
				},
				{
					"appliesToLabel": "person",
					"displayProperty": [
						"fullName",
						"lastName",
						"firstName",
						"name"
					]
				}
			]
		}
	],

	// Show or hide the Cosmos DB Explorer
	"cosmosDB.showExplorer": true,

	// Show warning dialog when uploading a document to the cloud.
	"cosmosDB.showSavePrompt": true,

	// Command to execute or full path to folder and executable to start the Mongo shell, needed by some Mongo scrapbook commands. If empty, will search in the system path for 'mongo'.
	"mongo.shell.path": null,

	// The duration allowed (in seconds) for the Mongo shell to execute a command. Default value is 5 seconds
	"mongo.shell.timeout": 5,

	// Whether or not show window messages.
	"markdownTablePrettify.showWindowMessages": true,

	// Glob patterns of files to exclude from analysis
	"damt.excludeFiles": [],

	// Configuration for the Data Access Migration Toolkit Java analyzer
	"damt.languages.java": {},

	// Configuration for the Data Access Migration Toolkit JSON analyzer
	"damt.languages.json": {},

	// Configuration for the Data Access Migration Toolkit Properties analyzer
	"damt.languages.properties": {},

	// Configuration for the Data Access Migration Toolkit XML analyzer
	"damt.languages.xml": {},

	// A path to file containing the configuration options for jshint. If the file exists it overrides jshint.options and any .jshintrc file
	"jshint.config": null,

	// Control whether or not jshint is enabled for JavaScript files.
	"jshint.enable": true,

	// Matching files and directories are being ignored by jshint. Glob patterns are interpreted relative to the workspace's root folder.
	"jshint.exclude": {},

	// A path to a file containing patterns describing which files and directories should be ignored by jshint. If the file exists it overrides jshint.exclude and any .jshintignore file.
	"jshint.excludePath": null,

	// Lint JavaScript embedded in HTML
	"jshint.lintHTML": false,

	// Configures the path to the jshint module. Can be an absolute path or relative to the current directory.
	"jshint.nodePath": "",

	// The jshint options object to provide args to the jshint command.
	"jshint.options": {},

	// The package manager you use to install node modules.
	"jshint.packageManager": "npm",

	// Report warnings as errors
	"jshint.reportWarningsAsErrors": false,

	// Traces the communication between VS Code and the jshint linter service.
	"jshint.trace.server": "off",

	// [Optional] Configuration options for localizing into VSCode's configured locale (must restart VSCode for settings to take effect)
	"mssql.applyLocalization": false,

	// Connection profiles defined in 'User Settings' are shown under 'MS SQL: Connect' command in the command palette.
	"mssql.connections": [
		{
			"server": "{{put-server-name-here}}",
			"database": "{{put-database-name-here}}",
			"user": "{{put-username-here}}",
			"password": "{{put-password-here}}"
		}
	],

	// [Optional] Configuration options for copying results from the Results View
	"mssql.copyIncludeHeaders": false,

	// [Optional] Configuration options for copying multi-line results from the Results View
	"mssql.copyRemoveNewLine": true,

	// Should column definitions be aligned?
	"mssql.format.alignColumnDefinitionsInColumns": false,

	// Should data types be formatted as UPPERCASE, lowercase, or none (not formatted)
	"mssql.format.datatypeCasing": "none",

	// Should keywords be formatted as UPPERCASE, lowercase, or none (not formatted)
	"mssql.format.keywordCasing": "none",

	// should commas be placed at the beginning of each statement in a list e.g. ', mycolumn2' instead of at the end e.g. 'mycolumn1,'
	"mssql.format.placeCommasBeforeNextStatement": false,

	// Should references to objects in a select statements be split into separate lines? E.g. for 'SELECT C1, C2 FROM T1' both C1 and C2 will be on separate lines
	"mssql.format.placeSelectStatementReferencesOnNewLine": false,

	// Should IntelliSense error checking be enabled
	"mssql.intelliSense.enableErrorChecking": true,

	// Should IntelliSense be enabled
	"mssql.intelliSense.enableIntelliSense": true,

	// Should IntelliSense quick info be enabled
	"mssql.intelliSense.enableQuickInfo": true,

	// Should IntelliSense suggestions be enabled
	"mssql.intelliSense.enableSuggestions": true,

	// Should IntelliSense suggestions be lowercase
	"mssql.intelliSense.lowerCaseSuggestions": false,

	// [Optional] Log debug output to the VS Code console (Help -> Toggle Developer Tools)
	"mssql.logDebugInfo": false,

	// The maximum number of recently used connections to store in the connection list.
	"mssql.maxRecentConnections": 5,

	// True for the messages pane to be open by default; false for closed
	"mssql.messagesDefaultOpen": true,

	// Should query result selections and scroll positions be saved when switching tabs (may impact performance)
	"mssql.persistQueryResultTabs": false,

	// Should BIT columns be displayed as numbers (1 or 0)? If false, BIT columns will be displayed as 'true' or 'false'
	"mssql.query.displayBitAsNumber": true,

	// Set the font family for the results grid; set to blank to use the editor font
	"mssql.resultsFontFamily": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",

	// Set the font size for the results grid; set to blank to use the editor size
	"mssql.resultsFontSize": 13,

	// [Optional] Delimiter for separating data items when saving results as CSV
	"mssql.saveAsCsv.delimiter": ",",

	// [Optional] File encoding used when saving results as CSV
	"mssql.saveAsCsv.encoding": "utf-8",

	// [Optional] When true, column headers are included when saving results as CSV
	"mssql.saveAsCsv.includeHeaders": true,

	// [Optional] Character(s) used for seperating rows when saving results as CSV
	"mssql.saveAsCsv.lineSeparator": null,

	// [Optional] Character used for enclosing text fields when saving results as CSV
	"mssql.saveAsCsv.textIdentifier": "\"",

	// Shortcuts related to the results window
	"mssql.shortcuts": {
		"_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
		"event.toggleResultPane": "ctrl+alt+r",
		"event.toggleMessagePane": "ctrl+alt+y",
		"event.prevGrid": "ctrl+up",
		"event.nextGrid": "ctrl+down",
		"event.copySelection": "ctrl+c",
		"event.copyWithHeaders": "",
		"event.maximizeGrid": "",
		"event.selectAll": "",
		"event.saveAsJSON": "",
		"event.saveAsCSV": "",
		"event.saveAsExcel": ""
	},

	// [Optional] Should execution time be shown for individual batches
	"mssql.showBatchTime": false,

	// [Optional] Configuration options for which column new result panes should open in
	"mssql.splitPaneSelection": "next",

	// Controls whether DeepScan inspection should be enabled.
	"deepscan.enable": false,

	// Configures additional suffixes for files to analyze. (Restart required)
	"deepscan.fileSuffixes": [],

	// Controls whether you allow transferring your code to the DeepScan server without prompt. Transferred code is completely deleted right after the inspection.
	"deepscan.ignoreConfirmWarning": false,

	// Configures the files to be ignored. (Applied only to 'Inspect Project')
	"deepscan.ignorePatterns": [],

	// Configures the rules to be ignored.
	"deepscan.ignoreRules": [],

	// Configures the proxy. If not set will be taken from the http_proxy environment variable.
	"deepscan.proxy": "",

	// Configures the DeepScan server url.
	"deepscan.server": "https://deepscan.io",

	// Controls whether DeepScan inspection should be executed via the the embedded server rather than DeepScan server. (Restart required)
	"deepscan.serverEmbedded.enable": false,

	// Configures the license for the embedded analysis.
	"deepscan.serverEmbedded.license": "",

	// Configures the JAR file for the embedded server. (Restart required)
	"deepscan.serverEmbedded.serverJar": "",

	// Controls whether the problem of the code should be shown along with the code.
	"deepscan.showDecorators": true,

	// Path to a writable folder where analyzer can cache its data. Change requires restart.
	"python.analysis.cacheFolderPath": "",

	// Delay before diagnostic messages are transferred to the problems list (in milliseconds).
	"python.analysis.diagnosticPublishDelay": 1000,

	// List of suppressed diagnostic messages.
	"python.analysis.disabled": [],

	// List of diagnostics messages to be shown as errors.
	"python.analysis.errors": [],

	// List of diagnostics messages to be shown as information.
	"python.analysis.information": [],

	// Defines type of log messages language server writes into the output window.
	"python.analysis.logLevel": "Error",

	// Allows code analysis to keep parser trees in memory. Increases memory consumption but may improve performance with large library analysis.
	"python.analysis.memory.keepLibraryAst": false,

	// Allows code analysis to keep library function local variables. Allows code navigation in Python libraries function bodies. Increases memory consumption.
	"python.analysis.memory.keepLibraryLocalVariables": false,

	// Only show errors and warnings for open files rather than for the entire workspace.
	"python.analysis.openFilesOnly": true,

	// Limits depth of the symbol tree in the document outline.
	"python.analysis.symbolsHierarchyDepthLimit": 10,

	// Paths to Typeshed stub folders. Default is Typeshed installed with the language server. Change requires restart.
	"python.analysis.typeshedPaths": [],

	// List of diagnostics messages to be shown as warnings.
	"python.analysis.warnings": [],

	// Automatically add brackets for functions.
	"python.autoComplete.addBrackets": false,

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Controls appearance of methods with double underscores in the completion list.
	"python.autoComplete.showAdvancedMembers": true,

	// Specifies paths to local typeshed repository clone(s) for the Python language server.
	"python.autoComplete.typeshedPaths": [],

	// Automatically update the language server.
	"python.autoUpdateLanguageServer": true,

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"python.dataScience.allowImportFromNotebook": true,

	// Allow the inputting of python code directly into the Python Interactive window
	"python.dataScience.allowInput": true,

	// Allow the Python Interactive window to be shared during a Live Share session
	"python.dataScience.allowLiveShare": true,

	// Allow for connecting the Python Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"python.dataScience.allowUnauthorizedRemoteConnection": false,

	// Warn the user before restarting a kernel.
	"python.dataScience.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"python.dataScience.askForLargeDataFrames": true,

	// When opening ipynb files, automatically preview the contents in the Python Interactive window.
	"python.dataScience.autoPreviewNotebooksInInteractivePane": false,

	// When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.
	"python.dataScience.changeDirOnImportExport": true,

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell. 
	// Defaults to '^(#\s*%%|#\s*\<codecell\>|#\s*In\[\d*?\]|#\s*In\[ \])' if left blank
	"python.dataScience.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// Collapse cell input code by default.
	"python.dataScience.collapseCellInputCodeByDefault": true,

	// Draw a highlight behind the currently active cell.
	"python.dataScience.decorateCells": true,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"python.dataScience.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"python.dataScience.enableCellCodeLens": true,

	// Enable the experimental data science features in the python extension.
	"python.dataScience.enabled": true,

	// No longer necessary as the theme colors are used for error messages
	// Background color (in hex) for exception messages in the Python Interactive window.
	"python.dataScience.errorBackgroundColor": "#FFFFFF",

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"python.dataScience.exportWithOutputEnabled": false,

	// Don't use the VS Code theme in the Python Interactive window (requires reload of VS Code). This forces the Python Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"python.dataScience.ignoreVscodeTheme": false,

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"python.dataScience.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"python.dataScience.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"python.dataScience.jupyterLaunchTimeout": 60000,

	// Select the Jupyter server URI to connect to. Select 'local' to launch a new Juypter server on the local machine.
	"python.dataScience.jupyterServerURI": "local",

	// Amount of time to wait for guest connections to verify they have the Python extension installed.
	"python.dataScience.liveShareConnectionTimeout": 1000,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown. 
	// Defaults to '^(#\s*%%\s*\[markdown\]|#\s*\<markdowncell\>)' if left blank
	"python.dataScience.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// Maximum size (in pixels) of text output in the Python Interactive window before a scrollbar appears. Set to -1 for infinity.
	"python.dataScience.maxOutputSize": 400,

	// Set the root directory for loading files for the Python Interactive window.
	"python.dataScience.notebookFileRoot": "${workspaceFolder}",

	// Search all installed Python interpreters for a Jupyter installation when starting the Python Interactive window
	"python.dataScience.searchForJupyter": true,

	// Determines if selected code in a python file will go to the terminal or the Python Interactive window when hitting shift+enter
	"python.dataScience.sendSelectionToInteractiveWindow": false,

	// Show cell input code.
	"python.dataScience.showCellInputCode": true,

	// Show the variable explorer in the Python Interactive window.
	"python.dataScience.showJupyterVariableExplorer": true,

	// When running Jupyter locally, create a default empty Jupyter config for the Python Interactive window
	"python.dataScience.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Python Interactive variable explorer
	"python.dataScience.variableExplorerExclude": "module;function;builtin_function_or_method",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Whether to check if Python is installed (also warn when using the macOS-installed Python).
	"python.disableInstallationCheck": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Enables Jedi as IntelliSense engine instead of Microsoft Python Analysis Engine.
	"python.jediEnabled": true,

	// Memory limit for the Jedi completion engine in megabytes. Zero (default) means 1024 MB. -1 means unlimited (disable memory limit check)
	"python.jediMemoryLimit": 0,

	// Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).
	"python.jediPath": "",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		".vscode/*.py",
		"**/site-packages/**/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--ignore-missing-imports",
		"--follow-imports=silent",
		"--show-column-numbers"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// Severity of Mypy message type 'Note'.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of Pep8 message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of Pep8 message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pep8
	"python.linting.pycodestyleEnabled": false,

	// Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Fatal/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": true,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// Whether to run Pylint with minimal set of rules.
	"python.linting.pylintUseMinimalCheckers": true,

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
	"python.pythonPath": "C:\\Python37\\python.exe",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.nosetestArgs": [],

	// Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.
	"python.testing.nosetestPath": "nosetests",

	// Enable testing using nosetests.
	"python.testing.nosetestsEnabled": false,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Fully qualified path to the ctags executable (else leave as ctags, assuming it is in current path).
	"python.workspaceSymbols.ctagsPath": "ctags",

	// Set to 'false' to disable Workspace Symbol provider using ctags.
	"python.workspaceSymbols.enabled": true,

	// Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.
	"python.workspaceSymbols.exclusionPatterns": [
		"**/site-packages/**"
	],

	// Whether to re-build the tags file on when changes made to python files are saved.
	"python.workspaceSymbols.rebuildOnFileSave": true,

	// Whether to re-build the tags file on start (defaults to true).
	"python.workspaceSymbols.rebuildOnStart": true,

	// Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.
	"python.workspaceSymbols.tagFilePath": "${workspaceFolder}/.vscode/tags",

	// Controls whether to show progress bar when making an Azure ML web request.
	"ai.azureml.showProgress": false,

	// Open the Azure Machine Learning Extension[long] homepage on startup
	"ai.homepage.openOnStartup": false,

	// The level of message in VS Code output pane
	"ai.logger.level.channel": "info",

	// The level of message in the log file
	"ai.logger.level.file": "debug",

	// The level of message in VS Code notification window
	"ai.logger.level.window": "info",

	// Enable telemetry for the Azure Machine Learning Extension[long].
	"ai.telemetry.enable": true,

	// Minimum value of ToolsForAI internal web server port. The extension will find an available port automatically. The change will take effect after you reload vscode
	"ai.webserver.startPort": 21000,

	// Excluded file types
	"emptyIndent.exclude": [],

	// Highlight indent color
	"emptyIndent.highlightColor": "rgba(246,36,89,0.6)",

	// Highlight indent on empty lines
	"emptyIndent.highlightIndent": false,

	// Automatically remove indentation in empty lines on save
	"emptyIndent.removeIndent": true,

	// Path to the Mongo shell executable
	"mongo.shell.path": null,

	// Show or hide the Mongo Explorer
	"mongo.showExplorer": true,

	// Used to add the front_matter_title parameter (MD025) to the markdownlint.config file.
	"markdown.addFrontMatterTitle": true,

	// Show the legacy toolbar in the bottom status bar.
	"markdown.showToolbar": false,

	// Configures the list of extensions to always install while creating a container.
	"remote.containers.defaultExtensions": [],

	// Whether to diplay the commit explorer view
	"gitHistory.hideCommitViewExplorer": false,

	// Default number of items to be displayed in Git History Viewer
	"gitHistory.pageSize": 100,

	// Whether to display a button in the editor title menu bar
	"gitHistory.showEditorTitleMenuBarIcons": true,

	// The absolute file path to a custom SSH config file
	"remote.SSH.configFile": "",

	// List of extensions that should be installed automatically on all SSH hosts
	"remote.SSH.defaultExtensions": [],

	// An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations
	"remote.SSH.path": "",

	// Always reveal the SSH login terminal
	"remote.SSH.showLoginTerminal": false,

	// Use 'getValue' and 'setValue' instead of 'get value' and 'set value'.
	"genGetSet.classic": false,

	// Only show private variables which do not have a getter/setter method.
	"genGetSet.filter": true,

	// An array of dictionary exports to ignore when running auto-import.
	"genGetSet.ignoredDictionaryList": [
		"vscode",
		"tsconfig"
	],

	// An array of imports to ignore when running auto-import.
	"genGetSet.ignoredImportList": [
		"Promise"
	],

	// An array of paths to ignore when building import rules.
	"genGetSet.ignoredLibraryPaths": [
		"src",
		"dist"
	],

	// An array of node-libraries to ignore when running auto-import.
	"genGetSet.ignoredNodeLibraries": [
		"node",
		"chrome"
	],

	// Create import lines based on definition files from /node_modules/.
	"genGetSet.importNode": true,

	// Create import lines based on definition files from /typings/.
	"genGetSet.importTypings": true,

	// Sets which quote use to generate import path.
	"genGetSet.pathStringDelimiter": "'",

	// Index all exports in the workspace when a change is saved.
	"genGetSet.scanOnSave": false,

	// Only show private variables from current class based on cursor position.
	"genGetSet.scoped": true,

	// Adds spaces between the beginning and ending of the brackets in an import line.
	"genGetSet.spacedImportLine": false,

	// If set, polling is used for file watching inside WSL1. If not set, file events are used. Polling is less performant but fixes the WSL1 issue that folders can not be renamed when watched. WSL2 does not have that problem is not affected by this setting.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.polling": false,

	// The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// Specifies the length of abbreviated commit ids (shas)
	"gitlens.advanced.abbreviatedShaLength": "7",

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": true,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitVersionWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressSupportGitLensNotification": false
	},

	// Specifies whether to close QuickPick menus when focus is lost
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories
	"gitlens.advanced.repositorySearchDepth": 1,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Specifies whether to enable GitLens telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting
	"gitlens.advanced.telemetry.enabled": true,

	// Specifies whether to use the symmetric difference (three-dot) notation or the range (two-dot) notation for comparisons. See the [Git docs](https://git-scm.com/docs/gitrevisions#_dotted_range_notations)
	"gitlens.advanced.useSymmetricDifferenceNotation": true,

	// Specifies whether to show avatar images in the gutter blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.blame.dateFormat": null,

	// Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|40?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the gutter blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the gutter blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the gutter blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the gutter blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies whether gutter blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the gutter blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// Specifies the command to be executed when an _authors_ code lens is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame annotations
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git code lens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ code lens is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame annotations
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git code lens will be shown in the document
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Specifies where Git code lens will be shown in the document for the specified languages
	"gitlens.codeLens.scopesByLanguage": [
		{
			"language": "azure-pipelines",
			"scopes": [
				"document"
			]
		},
		{
			"language": "css",
			"scopes": [
				"document"
			]
		},
		{
			"language": "html",
			"scopes": [
				"document"
			]
		},
		{
			"language": "json",
			"scopes": [
				"document"
			]
		},
		{
			"language": "jsonc",
			"scopes": [
				"document"
			]
		},
		{
			"language": "less",
			"scopes": [
				"document"
			]
		},
		{
			"language": "postcss",
			"scopes": [
				"document"
			]
		},
		{
			"language": "python",
			"symbolScopes": [
				"!Module"
			]
		},
		{
			"language": "scss",
			"scopes": [
				"document"
			]
		},
		{
			"language": "stylus",
			"scopes": [
				"document"
			]
		},
		{
			"language": "vue",
			"scopes": [
				"document"
			]
		},
		{
			"language": "yaml",
			"scopes": [
				"document"
			]
		}
	],

	// Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author}, ${agoOrDate} • ${message}",

	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport
	"gitlens.currentLine.scrollable": true,

	// Specifies debug mode
	"gitlens.debug": false,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateFormat": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": "90",

	// Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies how the gutter heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}\n\n${commands}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to enable experimental features
	"gitlens.insiders": false,

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"details": false,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true,
			"stashInline": true
		},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true,
			"stash": true
		}
	},

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",

	// Specifies where the highlights of the recently changed lines will be shown
	"gitlens.recentChanges.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies how the recently changed lines annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.recentChanges.toggleMode": "file",

	// Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services
	"gitlens.remotes": null,

	// Specifies whether to show What's New after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame annotations
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.toggleCodeLens: Toggles Git code lens
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}",

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": false,

	// Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "Unsaved changes (cannot determine authors)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "Unsaved changes (cannot determine recent change or authors)",

	// Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "Unsaved changes (cannot determine recent change)",

	// Specifies the description format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.commitDescriptionFormat": "${changes  •  }${author}, ${agoOrDate}",

	// Specifies the description format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.commitFileDescriptionFormat": "${directory}${  ←  originalPath}",

	// Specifies the format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.commitFileFormat": "${file}",

	// Specifies the format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.commitFormat": "${❰ tips ❱➤  }${message}",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Compare_ view
	"gitlens.views.compare.avatars": true,

	// Specifies whether to show the _Compare_ view
	"gitlens.views.compare.enabled": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Compare_ view. Only applies when `gitlens.views.compare.files.layout` is set to `tree` or `auto`
	"gitlens.views.compare.files.compact": true,

	// Specifies how the _Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.compare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.compare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Compare_ view. Only applies when `gitlens.views.compare.files.layout` is set to `auto`
	"gitlens.views.compare.files.threshold": 5,

	// Specifies where to show the _Compare_ view
	//  - gitlens: Adds to the GitLens side bar
	//  - explorer: Adds to the Explorer side bar
	//  - scm: Adds to the Source Control side bar
	"gitlens.views.compare.location": "gitlens",

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to show the _File History_ view
	"gitlens.views.fileHistory.enabled": true,

	// Specifies where to show the _File History_ view
	//  - gitlens: Adds to the GitLens side bar
	//  - explorer: Adds to the Explorer side bar
	//  - scm: Adds to the Source Control side bar
	"gitlens.views.fileHistory.location": "gitlens",

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Specifies whether to show the _Line History_ view
	"gitlens.views.lineHistory.enabled": true,

	// Specifies where to show the _Line History_ view
	//  - gitlens: Adds to the GitLens side bar
	//  - explorer: Adds to the Explorer side bar
	//  - scm: Adds to the Source Control side bar
	"gitlens.views.lineHistory.location": "gitlens",

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 20,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Specifies whether to show the _Repositories_ view
	"gitlens.views.repositories.enabled": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": true,

	// Specifies where to show the _Repositories_ view
	//  - gitlens: Adds to the GitLens side bar
	//  - explorer: Adds to the Explorer side bar
	//  - scm: Adds to the Source Control side bar
	"gitlens.views.repositories.location": "gitlens",

	// Specifies whether to show a comparison of a user-selected reference (branch, tag. etc) to the current branch or the working tree in the _Repositories_ view
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the tracking branch when displaying local branches in the _Repositories_ view
	"gitlens.views.repositories.showTrackingBranch": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search Commits_ view
	"gitlens.views.search.avatars": true,

	// Specifies whether to show the _Search Commits_ view
	"gitlens.views.search.enabled": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search Commits_ view. Only applies when `gitlens.views.search.files.layout` is set to `tree` or `auto`
	"gitlens.views.search.files.compact": true,

	// Specifies how the _Search Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.search.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.search.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search Commits_ view. Only applies when `gitlens.views.search.files.layout` is set to `auto`
	"gitlens.views.search.files.threshold": 5,

	// Specifies where to show the _Search Commits_ view
	//  - gitlens: Adds to the GitLens side bar
	//  - explorer: Adds to the Explorer side bar
	//  - scm: Adds to the Source Control side bar
	"gitlens.views.search.location": "gitlens",

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Specifies the description format of stashed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.stashDescriptionFormat": "${changes  •  }${agoOrDate}",

	// Specifies the description format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.stashFileDescriptionFormat": "${directory}${  ←  originalPath}",

	// Specifies the format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.stashFileFormat": "${file}",

	// Specifies the format of stashed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.stashFormat": "${message}",

	// Specifies the description format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.statusFileDescriptionFormat": "${directory}${  ←  originalPath}",

	// Specifies the format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.statusFileFormat": "${working  }${file}",

	// Status of Atom Keymap version three features added.
	"atomKeymap.promptV3Features": null,

	// Always show rule failures as warnings, independent of the tslint configuration.
	"tslint.alwaysShowRuleFailuresAsWarnings": false,

	// Always show the TSlint status bar item, not only when there are errors or warnings.
	"tslint.alwaysShowStatus": false,

	// Turns auto fix on save on or off, or defines which rules (e.g. `no-var-keyword`) to auto fix on save.
	"tslint.autoFixOnSave": false,

	// The path to the rules configuration file
	"tslint.configFile": "",

	// Control whether tslint is enabled for TypeScript files or not.
	"tslint.enable": true,

	// Configure glob patterns of file paths to exclude from linting
	"tslint.exclude": "",

	// Control if TypeScript definition files should be ignored
	"tslint.ignoreDefinitionFiles": true,

	// Control whether tslint is enabled for JavaScript files or not.
	"tslint.jsEnable": false,

	// A path added to NODE_PATH when resolving the tslint module.
	"tslint.nodePath": "",

	// The package manager to use to locate the tslint module.
	"tslint.packageManager": "npm",

	// An additional rules directory
	"tslint.rulesDirectory": "",

	// Run the linter on save (onSave) or on type (onType)
	"tslint.run": "onType",

	// Always show rule failures as warnings, independent of the tslint configuration.
	"tslint.suppressWhileTypeErrorsPresent": false,

	// Traces the communication between VSCode and the tslint linter service.
	"tslint.trace.server": "off",

	// Validate a file when there is only a default tslint configuration is found
	"tslint.validateWithDefaultConfig": false,

	// The current Azure Cloud to connect to.
	//  - Azure: Azure
	//  - AzureChina: Azure China
	//  - AzureGermanCloud: Azure Germany
	//  - AzureUSGovernment: Azure US Government
	"azure.cloud": "Azure",

	// Development setting: The PPE environment for testing.
	"azure.ppe": null,

	// The resource filter, each element is a tenant id and a subscription id separated by a slash.
	"azure.resourceFilter": null,

	// Whether to show the email address (e.g., in the status bar) of the signed in account.
	"azure.showSignedInEmail": true,

	// A specific tenant to sign in to. The default is to sign in to the common tenant and use all known tenants.
	"azure.tenant": "",

	// Settings for 'vscode-powertools' extension.
	"ego.power-tools": {
		"user": {}
	},

	// 
	"ego.power-tools.user": {},

	// Controls whether showing the result from running an Azure CLI command in an editor should always create a new editor.
	"azureCLI.showResultInNewEditor": false,

	// Indentation size of snippets
	"element-helper.indent-size": 2,

	// Document Language of Element UI
	"element-helper.language": "zh-CN",

	// Pug quotes of autocomplete
	"element-helper.pug-quotes": "single",

	// Normal quotes of autocomplete
	"element-helper.quotes": "double",

	// Document version of Element UI
	"element-helper.version": "2.4",

	// Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// Controls the auto-completion provider. "Default" uses the active IntelliSense engine. "Disabled" uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "Default",

	// Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use {key: value, ...} to set specific parameters. For example, the "Visual Studio" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the clang-format executable.
	"C_Cpp.clang_format_path": null,

	// If set, overrides the include sorting behavior determined by the SortIncludes parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use "file" to load the style from a .clang-format file in the current or parent directory. Use {key: value, ...} to set specific parameters. For example, the "Visual Studio" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }
	"C_Cpp.clang_format_style": "file",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "Enabled",

	// The value to use in a configuration if "browse.databaseFilename" is either not specified or set to "${default}".
	"C_Cpp.default.browse.databaseFilename": null,

	// The value to use in a configuration if "browse.limitSymbolsToIncludedHeaders" is either not specified or set to "${default}".
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if "browse.path" is not specified, or the values to insert if "${default}" is present in "browse.path".
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if "compileCommands" is either not specified, or set to "${default}".
	"C_Cpp.default.compileCommands": null,

	// The value to use in a configuration if "compilerPath" is either not specified or set to "${default}".
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if "configurationProvider" is either not specified or set to "${default}".
	"C_Cpp.default.configurationProvider": null,

	// The value to use in a configuration if "cppStandard" is either not specified or set to "${default}".
	"C_Cpp.default.cppStandard": null,

	// The value to use in a configuration if "cStandard" is either not specified or set to "${default}".
	"C_Cpp.default.cStandard": null,

	// The value to use in a configuration if "defines" is not specified, or the values to insert if "${default}" is present in "defines".
	"C_Cpp.default.defines": null,

	// Controls whether the extension will report errors detected in c_cpp_properties.json.
	"C_Cpp.default.enableConfigurationSquiggles": null,

	// The value to use in a configuration if "forcedInclude" is not specified, or the values to insert if "${default}" is present in "forcedInclude".
	"C_Cpp.default.forcedInclude": null,

	// The value to use in a configuration if "includePath" is not specified, or the values to insert if "${default}" is present in "includePath".
	"C_Cpp.default.includePath": null,

	// The value to use in a configuration if "intelliSenseMode" is either not specified or set to "${default}".
	"C_Cpp.default.intelliSenseMode": null,

	// The value to use in a configuration if "macFrameworkPath" is not specified, or the values to insert if "${default}" is present in "macFrameworkPath".
	"C_Cpp.default.macFrameworkPath": null,

	// The value to use for the system include path. If set, it overrides the system include path acquired via "compilerPath" and "compileCommands" settings.
	"C_Cpp.default.systemIncludePath": null,

	// Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.
	"C_Cpp.default.windowsSdkVersion": null,

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.enhancedColorization": "Enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",

	// Instructs the extension when to use the "files.exclude" setting when determining which files should be added to the code navigation database while traversing through the paths in the "browse.path" array. "checkFolders" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). "checkFilesAndFolders" means that the exclusion filters will be evaluated against every file and folder encountered. If your "files.exclude" setting only contains folders, then "checkFolders" is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// "Default" enables code formatting. "Disabled" disables code formatting.
	"C_Cpp.formatting": "Default",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": null,

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": null,

	// 
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is "%LocalAppData%/Microsoft/vscode-cpptools" on Windows and "~/.vscode-cpptools" on Linux and Mac. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": null,

	// Maximum size of the per-workspace hard drive space in megabytes for cached precompiled headers; the actual usage may fluctuate around this value. The default size is 5120 MB. Precompiled header caching is disabled when the size is 0.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Controls the IntelliSense provider. "Tag Parser" provides "fuzzy" results that are not context-aware. "Default" provides context-aware results. "Disabled" turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "Default",

	// Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.
	"C_Cpp.intelliSenseEngineFallback": "Disabled",

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.
	"C_Cpp.loggingLevel": "Error",

	// Maximum character length of the scope/navigation UI in the status bar. The UI may not appear if this value is too large.
	"C_Cpp.navigation.length": 60,

	// The character used as a path separator for #include auto-completion results.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// If true, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// Set to "Insiders" to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
	"C_Cpp.updateChannel": "Default",

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked
	"C_Cpp.workspaceSymbols": "Just My Code",

	// Disable usage analytics.
	"eppz-code.disableAnalytics": false,

	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,

	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

	// Specifies whether the references CodeLens should be shown.
	"csharp.referencesCodeLens.enabled": true,

	// Suppress the warning that the .NET CLI is not on the path.
	"csharp.suppressDotnetInstallWarning": false,

	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,

	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,

	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,

	// Specifies whether the run and debug test CodeLens should be show be shown.
	"csharp.testsCodeLens.enabled": true,

	// Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.
	"csharp.unitTestDebuggingOptions": {},

	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,

	// The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
	"omnisharp.defaultLaunchSolution": null,

	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,

	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": false,

	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,

	// Enables support for roslyn analyzers, code fixes and rulesets.
	"omnisharp.enableRoslynAnalyzers": false,

	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",

	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,

	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,

	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,

	// Specifies the path to a mono installation to use when "useGlobalMono" is set to "always" or "auto", instead of the default system one.
	"omnisharp.monoPath": null,

	// Specifies the path to OmniSharp. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf.
	"omnisharp.path": null,

	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,

	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,

	// Launch OmniSharp with the globally-installed Mono. If set to "always", "mono" version 5.8.1 or greater must be available on the PATH. If set to "auto", OmniSharp will be launched with "mono" if version 5.8.1 or greater is available on the PATH.
	//  - auto: Automatically launch OmniSharp with "mono" if version 5.8.1 or greater is available on the PATH.
	//  - always: Always launch OmniSharp with "mono". If version 5.8.1 or greater is not available on the PATH, an error will be printed.
	//  - never: Never launch OmniSharp on a globally-installed Mono.
	"omnisharp.useGlobalMono": "auto",

	// Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
	"omnisharp.waitForDebugger": false,

	// Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
	"razor.devmode": false,

	// Specifies whether to disable Razor language features.
	"razor.disabled": false,

	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,

	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": null,

	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": null,

	// Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
	//  - Off: Does not log messages from the Razor extension
	//  - Messages: Logs only some messages from the Razor extension
	//  - Verbose: Logs all messages from the Razor extension
	"razor.trace": "Off",

	// Open up automatically the Output window showing the progress.
	"postman.showOutputAutomatically": true,

	// Show or hide the progress and results from the bottom toolbar.
	"postman.showProgressInToolbar": true,

	// On finish, open automatically a document with the results.
	"postman.showResultsInNewDocument": true,

	// Show info message before start running a test.
	"postman.showRunInfoMessage": true,

	// Set default delay for tests when asking questions.
	"postman.testDefaultDelay": 0,

	// Set default iteractions for tests when asking questions.
	"postman.testDefaultIterations": 1,

	// Allow SSL connnection with unauthorized self-signed certificates. Defaults to false
	"github.allowUnsafeSSL": false,

	// Automatically publish the current branch before creating a pull request. Defaults to false
	"github.autoPublish": false,

	// By default the pull request description is the first commit message. When this property is set, the user is asked for a description when creating the PR. This can be a single-line description via an input dialog ('singleLine') or a multi-line markdown description via the editor configured in git ('gitEditor').
	"github.customPullRequestDescription": "off",

	// Ask the user for a custom title when creating the PR. If false, defaults to the last commit message.
	"github.customPullRequestTitle": false,

	// Path to the git executable. If it is in the OS path, this should not be necessary to set.
	"github.gitCommand": "",

	// The host name to access GitHub. Change this to your GitHub Enterprise host.
	"github.host": "github.com",

	// By default the extension asks the user during merge process. This could be set to on of 'merge', 'squash' or 'rebase' to define the prefered method and not to be asked every time.
	"github.preferedMergeMethod": "",

	// Defines the name of the git remote. Defaults to undefined which automatically tries to determine the proper remote name.
	"github.remoteName": "",

	// A list of repositories to query for issues.
	"github.repositories": [],

	// Enables or disables the coloring of the status bar based on the mergeable state.
	"github.statusbar.color": true,

	// Defines which command is executed when clicking the status bar item. Default behaviour is the create-pull-request-then-merge cycle (different command based on state). For example to open the current pull request set this to 'vscode-github.browserSimplePullRequest'
	"github.statusbar.command": null,

	// True if the statusbar integration should be enabled. Defaults to true
	"github.statusbar.enabled": true,

	// Overrides the default failure text.
	"github.statusbar.failureText": "",

	// Overrides the default pending text.
	"github.statusbar.pendingText": "",

	// Interval in seconds to refresh the current pull request status.
	"github.statusbar.refresh": 5,

	// Overrides the default success text.
	"github.statusbar.successText": "",

	// By default the extension get the repository and user from .git/config. For forks where upstream is a different repository this could be configured here (e.g. microsoft/typescript).
	"github.upstream": "",

	// The username to use when accessing GitHub. The default is to consult the Git credential manager.
	"github.username": null,

	// GitLab setting to 'remove_source_branch' per MergeRequest.
	"gitlab.removeSourceBranch": false,

	// A list of devices to add to the pick list. This is intended to work around troublesome network connections, such as Bluetooth
	"ev3devBrowser.additionalDevices": [],

	// Prompt for confirmation before deleting remote files.
	"ev3devBrowser.confirmDelete": true,

	// The directory on the remote device where the files will be saved. The default is to use the name of the vscode project directory.
	"ev3devBrowser.download.directory": null,

	// Files to exclude when sending project to remote devices.
	"ev3devBrowser.download.exclude": "**/.*",

	// Files to include when sending project to remote devices.
	"ev3devBrowser.download.include": "**/*",

	// Addition environment variables to use on remote devices.
	"ev3devBrowser.env": {
		"PYTHONUNBUFFERED": "TRUE"
	},

	// The password for the 'robot' user. Set to "null" to prompt for password (or use public key authentication).
	"ev3devBrowser.password": "maker",

	// A JSCS configuration object
	"jscs.configuration": {},

	// Disable JSCS if no configuration file found.
	"jscs.disableIfNoConfig": false,

	// Control whether JSCS is enabled for JavaScript files or not.
	"jscs.enable": true,

	// The JSCS preset to use. Possible values: "airbnb", "crockford", "google", "grunt", "idiomatic", "jquery", "mdcs", "node-style-guide", "wikimedia", "wordpress", "yandex"
	"jscs.preset": "",

	// Whether the enable editor folding. This feature is known to conflict with some language extensions
	"commentAnchors.editorFolding": true,

	// The delay between stopping with typing and anchors being reloaded. When you experience hangs or freezes, it is recommended to increase this value
	"commentAnchors.parseDelay": 200,

	// Where to position the anchor when scrolled to
	"commentAnchors.scrollPosition": "top",

	// Whether to highlight the anchor tags
	"commentAnchors.tagHighlights.enabled": true,

	// Whether to display tags in the gutter
	"commentAnchors.tags.displayInGutter": true,

	// Whether to display tag names in the sidebar
	"commentAnchors.tags.displayInSidebar": true,

	// List of additional custom Comment Anchor tags
	"commentAnchors.tags.list": [
		{
			"tag": "ANCHOR",
			"iconColor": "default",
			"highlightColor": "#A8C023",
			"scope": "file"
		},
		{
			"tag": "TODO",
			"iconColor": "blue",
			"highlightColor": "#3ea8ff",
			"scope": "workspace"
		},
		{
			"tag": "FIXME",
			"iconColor": "red",
			"highlightColor": "#F44336",
			"scope": "workspace"
		},
		{
			"tag": "STUB",
			"iconColor": "purple",
			"highlightColor": "#BA68C8",
			"scope": "file"
		},
		{
			"tag": "NOTE",
			"iconColor": "orange",
			"highlightColor": "#FFB300",
			"scope": "file"
		},
		{
			"tag": "REVIEW",
			"iconColor": "green",
			"highlightColor": "#64DD17",
			"scope": "workspace"
		},
		{
			"tag": "SECTION",
			"iconColor": "blurple",
			"highlightColor": "#896afc",
			"scope": "workspace",
			"isRegion": true
		}
	],

	// When true, performs case sensitive matches on tags
	"commentAnchors.tags.matchCase": true,

	// List of separators that can be placed between tags and comments
	"commentAnchors.tags.separators": [
		" ",
		": ",
		" - "
	],

	// The method used to sort the anchors in the sidebar
	"commentAnchors.tags.sortMethod": "line",

	// Scan the entire workspace instead of just the currently opened file
	"commentAnchors.workspace.enabled": true,

	// The glob pattern of the files that will be excluded from matching by Comment Anchors
	"commentAnchors.workspace.excludeFiles": "**/{node_modules,.git,.idea,target,out,build,vendor}/**/*",

	// Require a manual trigger to start the workspace scan. Useful for when you want to reduce load time. (Default false)
	"commentAnchors.workspace.lazyLoad": false,

	// The glob pattern of the files that will be parsed by Comment Anchors
	"commentAnchors.workspace.matchFiles": "**/*",

	// Configure when exceptions should break (never, always, unhandled). Add more as needed.
	"mono-debug.exceptionOptions": {
		"System.Exception": "never",
		"System.SystemException": "never",
		"System.ArithmeticException": "never",
		"System.ArrayTypeMismatchException": "never",
		"System.DivideByZeroException": "never",
		"System.IndexOutOfRangeException": "never",
		"System.InvalidCastException": "never",
		"System.NullReferenceException": "never",
		"System.OutOfMemoryException": "never",
		"System.OverflowException": "never",
		"System.StackOverflowException": "never",
		"System.TypeInitializationException": "never"
	},

	// Show the name of the commit's author
	"gitHistory.details.author.enabled": true,

	// Show the date of the commit
	"gitHistory.details.date.enabled": true,

	// Format used for displaying the date
	"gitHistory.details.date.format": "YYYY-MM-DD HH:mm",

	// Show the hash of the commit
	"gitHistory.details.hash.enabled": false,

	// Show only this number of characters from the end of the hash
	"gitHistory.details.hash.length": 7,

	// Specifies the url of the GitHub project in which to generate bug reports.
	"powershell.bugReporting.project": "https://github.com/PowerShell/vscode-powershell",

	// Enables syntax based code folding. When disabled, the default indentation based code folding is used.
	"powershell.codeFolding.enable": true,

	// Shows the last line of a folded section similar to the default VSCode folding style. When disabled, the entire folded region is hidden.
	"powershell.codeFolding.showLastLine": true,

	// Align assignment statements in a hashtable or a DSC Configuration.
	"powershell.codeFormatting.alignPropertyValuePairs": true,

	// Does not reformat one-line code blocks, such as "if (...) {...} else {...}".
	"powershell.codeFormatting.ignoreOneLineBlock": true,

	// Adds a newline (line break) after a closing brace.
	"powershell.codeFormatting.newLineAfterCloseBrace": true,

	// Adds a newline (line break) after an open brace.
	"powershell.codeFormatting.newLineAfterOpenBrace": true,

	// Places open brace on the same line as its associated statement.
	"powershell.codeFormatting.openBraceOnSameLine": true,

	// Multi-line pipeline style settings.
	"powershell.codeFormatting.pipelineIndentationStyle": "NoIndentation",

	// Sets the codeformatting options to follow the given indent style in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81.
	"powershell.codeFormatting.preset": "Custom",

	// Use correct casing for cmdlets.
	"powershell.codeFormatting.useCorrectCasing": false,

	// Adds a space after a separator (',' and ';').
	"powershell.codeFormatting.whitespaceAfterSeparator": true,

	// Adds spaces before and after an operator ('=', '+', '-', etc.).
	"powershell.codeFormatting.whitespaceAroundOperator": true,

	// Adds a space before and after the pipeline operator ('|').
	"powershell.codeFormatting.WhitespaceAroundPipe": true,

	// Adds a space between a keyword and its associated scriptblock expression.
	"powershell.codeFormatting.whitespaceBeforeOpenBrace": true,

	// Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression.
	"powershell.codeFormatting.whitespaceBeforeOpenParen": true,

	// Adds a space after an opening brace ('{') and before a closing brace ('}').
	"powershell.codeFormatting.WhitespaceInsideBrace": true,

	// Determines whether a temporary PowerShell Integrated Console is created for each debugging session, useful for debugging PowerShell classes and binary modules.
	"powershell.debugging.createTemporaryIntegratedConsole": false,

	// Specifies an alternate path to the folder containing modules that are bundled with the PowerShell extension (i.e. PowerShell Editor Services, PSScriptAnalyzer, Plaster)
	"powershell.developer.bundledModulesPath": "",

	// Sets the logging verbosity level for the PowerShell Editor Services host executable.  Valid values are 'Diagnostic', 'Verbose', 'Normal', 'Warning', and 'Error'
	"powershell.developer.editorServicesLogLevel": "Normal",

	// Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding.
	"powershell.developer.editorServicesWaitForDebugger": false,

	// An array of strings that enable experimental features in the PowerShell extension.
	"powershell.developer.featureFlags": [],

	// Indicates that the powerShellExePath points to a developer build of Windows PowerShell and configures it for development.
	"powershell.developer.powerShellExeIsWindowsDevBuild": false,

	// Deprecated. Please use the 'powershell.powerShellExePath' setting instead
	"powershell.developer.powerShellExePath": "",

	// Loads user and system-wide PowerShell profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) into the PowerShell session. This affects IntelliSense and interactive script execution, but it does not affect the debugger.
	"powershell.enableProfileLoading": true,

	// Controls the comment-based help completion behavior triggered by typing '##'. Set the generated help style with 'BlockComment' or 'LineComment'. Disable the feature with 'Disabled'.
	"powershell.helpCompletion": "BlockComment",

	// Switches focus to the console when a script selection is run or a script file is debugged. This is an accessibility feature. To disable it, set to false.
	"powershell.integratedConsole.focusConsoleOnExecute": true,

	// Shows the integrated console when the PowerShell extension is initialized.
	"powershell.integratedConsole.showOnStartup": true,

	// Specifies an array of versionName / exePath pairs where exePath points to a non-standard install location for PowerShell and versionName can be used to reference this path with the powershell.powerShellDefaultVersion setting.
	"powershell.powerShellAdditionalExePaths": [],

	// Specifies the PowerShell version name, as displayed by the 'PowerShell: Show Session Menu' command, used when the extension loads e.g "Windows PowerShell (x86)" or "PowerShell Core 6 (x64)".
	"powershell.powerShellDefaultVersion": "",

	// Specifies the full path to a PowerShell executable. Changes the installation of PowerShell used for language and debugging services.
	"powershell.powerShellExePath": "",

	// Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer.
	"powershell.scriptAnalysis.enable": true,

	// Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace.
	"powershell.scriptAnalysis.settingsPath": "",

	// Specify array of Modules to exclude from Command Explorer listing.
	"powershell.sideBar.CommandExplorerExcludeFilter": [],

	// Specifies the visibility of the Command Explorer in the PowerShell Side Bar.
	"powershell.sideBar.CommandExplorerVisibility": true,

	// Starts PowerShell extension features automatically when a PowerShell file opens. If false, to start the extension, use the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, integrated console, code formatting, and other features are not enabled until the extension starts.
	"powershell.startAutomatically": true,

	// Uses the 32-bit language service on 64-bit Windows. This setting has no effect on 32-bit Windows or on the PowerShell extension debugger, which has its own architecture configuration.
	"powershell.useX86Host": false,

	// Show an active indicator next to the name
	"projects.activeIndicator": true,

	// A setting for renaming the "All Groups" special group
	"projects.allGroupsName": "All Groups",

	// Check projects' repositories for uncommitted changes
	"projects.checkDirty": false,

	// Check projects' paths existence
	"projects.checkPaths": false,

	// The location of the configuration file
	"projects.configPath": "",

	// List only dirty projects
	"projects.filterDirty": false,

	// List only projects having a name matching this regex
	"projects.filterRegex": false,

	// The active context group
	"projects.group": "",

	// Display groups on top of projects. This cannot be false if either `sortGroups` or `sortProjects` is false
	"projects.groupsOnTop": true,

	// Use ASCII icons instead of Octicons
	"projects.iconsASCII": true,

	// Prevent these branches from being shown
	"projects.ignoreBranches": [
		"master"
	],

	// Number of spaces to use for indentation
	"projects.indentationSpaces": 4,

	// Invert a project path and description
	"projects.invertPathAndDescription": false,

	// Maximum depth to look at when refreshing
	"projects.refreshDepth": 2,

	// Ignore these folders when refreshing
	"projects.refreshIgnoreFolders": [
		"bower_components",
		"node_modules",
		"typings"
	],

	// Root paths from where to start searching for projects
	"projects.refreshRoots": [],

	// Show how many commits ahead or behind the repository is
	"projects.showAheadBehind": false,

	// Show projects' branches in the quickpick
	"projects.showBranch": false,

	// Show projects' descriptions in the quickpick
	"projects.showDescriptions": true,

	// Show projects' paths in the quickpick
	"projects.showPaths": true,

	// Sort groups alphabetically
	"projects.sortGroups": true,

	// Sort projects alphabetically
	"projects.sortProjects": true,

	// Should the item be placed to the left or right?
	"projects.statusbarAlignment": "left",

	// The foreground color for this item
	"projects.statusbarColor": "",

	// Command to execute on click
	"projects.statusbarCommand": "projects.open",

	// Enable the statusbar component
	"projects.statusbarEnabled": true,

	// The priority of this item. Higher value means the item should be shown more to the left
	"projects.statusbarPriority": -1,

	// Template for rendering the statusbar content
	"projects.statusbarTemplate": "$(file-directory) [group] $(chevron-right) [project]",

	// Automatically save paths using tilde, i.e. "~/project" instead of "/Users/me/project"
	"projects.useTilde": true,

	// Show or hide the "Projects" explorer view
	"projects.viewAllEnabled": false,

	// Open projects in a new window
	"projects.viewOpenInNewWindow": false,

	// Name of the special "Archive" project
	"todo.archive.name": "Archive",

	// Enable the @project tag
	"todo.archive.project.enabled": true,

	// String used for joining multiple projects
	"todo.archive.project.separator": ".",

	// Remove extra empty lines, keeping no more than `emptyLinesThreshold` consecutive empty lines
	"todo.archive.remove.emptyLines": 1,

	// Remove projects without todos
	"todo.archive.remove.emptyProjects": true,

	// Sort lines by finished date
	"todo.archive.sortByDate": false,

	// Cancelled todo color
	"todo.colors.cancelled": "#f92672",

	// Code color
	"todo.colors.code": "#fd971f",

	// Comment color
	"todo.colors.comment": "#75715e",

	// Colors for dark themes
	"todo.colors.dark": {},

	// Done todo color
	"todo.colors.done": "#a6e22e",

	// Colors for light themes
	"todo.colors.light": {},

	// Project color
	"todo.colors.project": "#66d9ef",

	// Project statistics color
	"todo.colors.projectStatistics": "#4694a3",

	// Tag color
	"todo.colors.tag": "#e6db74",

	// Special tags' background colors
	"todo.colors.tags.background": [
		"#e54545",
		"#e59f45",
		"#e5d145",
		"#ae81ff"
	],

	// Special tags' foreground colors
	"todo.colors.tags.foreground": [
		"#000000",
		"#000000",
		"#000000",
		"#000000"
	],

	// Object mapping todo types to their color
	"todo.colors.types": {
		"TODO": "#ffcc00",
		"FIXME": "#cc0000",
		"FIX": "#cc0000",
		"BUG": "#cc0000",
		"UGLY": "#cc0000",
		"DEBUG": "#cc0000",
		"HACK": "#cc0000",
		"REVIEW": "#00ccff",
		"OPTIMIZE": "#00ccff",
		"TSC": "#00ccff",
		"NOTE": "#cc00cc",
		"IDEA": "#cc00cc"
	},

	// Globs to use for excluding files
	"todo.embedded.exclude": [
		"**/.*",
		"**/.*/**",
		"**/_output/**",
		"**/bower_components/**",
		"**/build/**",
		"**/dist/**",
		"**/node_modules/**",
		"**/out/**",
		"**/output/**",
		"**/release/**",
		"**/releases/**",
		"**/static/**",
		"**/target/**",
		"**/third_party/**",
		"**/vendor/**",
		"**/CHANGELOG",
		"**/CHANGELOG.*",
		"**/*.min.*",
		"**/*.map",
		"**/*.{3ds,3g2,3gp,7z,a,aac,adp,ai,aif,aiff,alz,ape,apk,ar,arj,asf,au,avi,bak,baml,bh,bin,bk,bmp,btif,bz2,bzip2,cab,caf,cgm,class,cmx,cpio,cr2,csv,cur,dat,dcm,deb,dex,djvu,dll,dmg,dng,doc,docm,docx,dot,dotm,dra,DS_Store,dsk,dts,dtshd,dvb,dwg,dxf,ecelp4800,ecelp7470,ecelp9600,egg,eol,eot,epub,exe,f4v,fbs,fh,fla,flac,fli,flv,fpx,fst,fvt,g3,gif,graffle,gz,gzip,h261,h263,h264,icns,ico,ief,img,ipa,iso,jar,jpeg,jpg,jpgv,jpm,jxr,key,ktx,lha,lib,lvp,lz,lzh,lzma,lzo,m3u,m4a,m4v,mar,mdi,mht,mid,midi,mj2,mka,mkv,mmr,mng,mobi,mov,movie,mp3,mp4,mp4a,mpeg,mpg,mpga,mxu,nef,npx,numbers,o,oga,ogg,ogv,otf,pages,pbm,pcx,pdb,pdf,pea,pgm,pic,png,pnm,pot,potm,potx,ppa,ppam,ppm,pps,ppsm,ppsx,ppt,pptm,pptx,psd,pya,pyc,pyo,pyv,qt,rar,ras,raw,resources,rgb,rip,rlc,rmf,rmvb,rtf,rz,s3m,s7z,scpt,sgi,shar,sil,sketch,slk,smv,so,sub,swf,tar,tbz,tbz2,tga,tgz,thmx,tif,tiff,tlz,ttc,ttf,txz,udf,uvh,uvi,uvm,uvp,uvs,uvu,viv,vob,war,wav,wax,wbmp,wdp,weba,webm,webp,whl,wim,wm,wma,wmv,wmx,woff,woff2,wvx,xbm,xif,xla,xlam,xls,xlsb,xlsm,xlsx,xlt,xltm,xltx,xm,xmind,xpi,xpm,xwd,xz,z,zip,zipx}"
	],

	// Group embedded todos by file
	"todo.embedded.file.groupByFile": true,

	// Group embedded todos by workspace root
	"todo.embedded.file.groupByRoot": true,

	// Group embedded todos by type
	"todo.embedded.file.groupByType": true,

	// Show the whole line
	"todo.embedded.file.wholeLine": true,

	// Globs to use for including files
	"todo.embedded.include": [
		"**/*"
	],

	// The provider to use when searching for embedded todos
	"todo.embedded.provider": "",

	// Extra arguments to pass to ag
	"todo.embedded.providers.ag.args": [
		"--ignore-case"
	],

	// Regex used by ag, requires double escaping
	"todo.embedded.providers.ag.regex": "(?:#|//|/\\*+|<!--|--|\\* @|\\{!|\\{\\{!--|\\{\\{!) *(TODO|FIXME|FIX|BUG|UGLY|HACK|NOTE|IDEA|REVIEW|DEBUG|OPTIMIZE)",

	// Extra arguments to pass to rg
	"todo.embedded.providers.rg.args": [
		"--ignore-case"
	],

	// Regex used by rg, requires double escaping
	"todo.embedded.providers.rg.regex": "(?:#|//|/\\*+|<!--|--|\\* @|\\{!|\\{\\{!--|\\{\\{!) *(TODO|FIXME|FIX|BUG|UGLY|HACK|NOTE|IDEA|REVIEW|DEBUG|OPTIMIZE)",

	// Regex used for finding embedded todos, requires double escaping
	"todo.embedded.regex": "(?:<!-- *)?(?:#|//|/\\*+|<!--|--|\\* @|\\{!|\\{\\{!--|\\{\\{!) *(TODO|FIXME|FIX|BUG|UGLY|HACK|NOTE|IDEA|REVIEW|DEBUG|OPTIMIZE)(?:\\s*\\([^)]+\\))?:?(?!\\w)(?: *-->| *\\*/| *!}| *--}}| *}}|(?= *(?:[^:]//|/\\*+|<!--|@|--|\\{!|\\{\\{!--|\\{\\{!))|((?: +[^\\n@]*?)(?= *(?:[^:]//|/\\*+|<!--|@|--(?!>)|\\{!|\\{\\{!--|\\{\\{!))|(?: +[^@\\n]+)?))",

	// Regex flags to use
	"todo.embedded.regexFlags": "gi",

	// Start the tree in an expanded state
	"todo.embedded.view.expanded": true,

	// Group embedded todos by file
	"todo.embedded.view.groupByFile": true,

	// Group embedded todos by workspace root
	"todo.embedded.view.groupByRoot": true,

	// Group embedded todos by type
	"todo.embedded.view.groupByType": true,

	// Show icons next to todos and types
	"todo.embedded.view.icons": true,

	// Show the whole line
	"todo.embedded.view.wholeLine": false,

	// New todo files default content
	"todo.file.defaultContent": "\nTodo:\n  ☐ Item\n",

	// Globs to use for excluding files
	"todo.file.exclude": [
		"**/.!(todo|todos|task|tasks)/**",
		"**/_output/**",
		"**/bower_components/**",
		"**/build/**",
		"**/dist/**",
		"**/node_modules/**",
		"**/out/**",
		"**/output/**",
		"**/release/**",
		"**/releases/**",
		"**/static/**",
		"**/target/**",
		"**/third_party/**",
		"**/vendor/**"
	],

	// Globs to use for including files
	"todo.file.include": [
		"**/TODO",
		"**/*.todo",
		"**/*.todos",
		"**/*.task",
		"**/*.tasks",
		"**/*.taskpaper",
		"**/todolist.txt"
	],

	// Todo file name. Other supported names are: `*.todo`, `*.todos`, `*.task`, `*.tasks`, `*.taskpaper` and `todolist.txt`
	"todo.file.name": "TODO",

	// Start the tree in an expanded state
	"todo.file.view.expanded": true,

	// Enable markdown-like formatting
	"todo.formatting.enabled": true,

	// String used for indentation
	"todo.indentation": "  ",

	// Show statistics next to a project, boolean or JS expression
	"todo.statistics.project.enabled": "global.projects < 100",

	// Template used for rendering the text
	"todo.statistics.project.text": "([pending]) [est]",

	// Should the item be placed to the left or right?
	"todo.statistics.statusbar.alignment": "left",

	// The foreground color for this item
	"todo.statistics.statusbar.color": "",

	// Command to execute on click
	"todo.statistics.statusbar.command": "",

	// Show statistics in the statusbar, boolean or JS expression
	"todo.statistics.statusbar.enabled": "global.all > 0",

	// Ignore the archive when rendering statistics in the statusbar
	"todo.statistics.statusbar.ignoreArchive": true,

	// The priority of this item. Higher value means the item should be shown more to the left
	"todo.statistics.statusbar.priority": -1,

	// Template used for rendering the text
	"todo.statistics.statusbar.text": "$(check) [finished]/[all] ([percentage]%)",

	// Template used for rendering the tooltip
	"todo.statistics.statusbar.tooltip": "[pending] Pending - [done] Done - [cancelled] Cancelled",

	// Todo box string
	"todo.symbols.box": "☐",

	// Todo cancelled string
	"todo.symbols.cancelled": "✘",

	// Todo done string
	"todo.symbols.done": "✔",

	// Special tags' names
	"todo.tags.names": [
		"critical",
		"high",
		"low",
		"today"
	],

	// Infer commonly used tags' names
	"todo.tags.namesInference": true,

	// Enable the @created tag
	"todo.timekeeping.created.enabled": false,

	// Format used for displaying time inside @created
	"todo.timekeeping.created.format": "YY-MM-DD HH:mm",

	// Insert the time inside the @created tag
	"todo.timekeeping.created.time": true,

	// Enable the @lasted/wasted tag
	"todo.timekeeping.elapsed.enabled": true,

	// Format used for displaying time diff inside @lasted/wasted
	"todo.timekeeping.elapsed.format": "short-compact",

	// Format used for the `[est]` token
	"todo.timekeeping.estimate.format": "short-compact",

	// Enable the @done/cancelled tag. It's always enabled if you explicitly start a todo or if you use only 1 symbol
	"todo.timekeeping.finished.enabled": true,

	// Format used for displaying time inside @done/cancelled
	"todo.timekeeping.finished.format": "YY-MM-DD HH:mm",

	// Insert the time inside the @done/cancelled tag
	"todo.timekeeping.finished.time": true,

	// Format used for displaying time inside @started
	"todo.timekeeping.started.format": "YY-MM-DD HH:mm",

	// Insert the time inside the @started tag
	"todo.timekeeping.started.time": true,

	// Should the item be placed to the left or right?
	"todo.timer.statusbar.alignment": "left",

	// The foreground color for this item
	"todo.timer.statusbar.color": "",

	// Show a timer for started todos in the statusbar
	"todo.timer.statusbar.enabled": true,

	// The priority of this item. Higher value means the item should be shown more to the left
	"todo.timer.statusbar.priority": -10,

	// Enables Application Insights telemetry collection for the Azure Repos extension.
	"team.appInsights.enabled": true,

	// [Not for TFVC] Specify the team project's build definition Id to monitor when your source code repository is not hosted with Microsoft. Requires both team.remoteUrl and team.teamProject.
	"team.buildDefinitionId": 0,

	// Set the logging level for the extension (error, warn, info, verbose, debug).
	"team.logging.level": "",

	// Specify the account and either the queryText or queryPath of the query you'd like to monitor.  If specified, queryText is preferred over queryPath.
	"team.pinnedQueries": [
		{
			"account": "",
			"queryText": "",
			"queryPath": ""
		}
	],

	// Specify the number of minutes to wait when polling for new builds and pull requests.
	"team.pollingInterval": 5,

	// [Not for TFVC] Specify the url to a project collection to use when your source code repository is not hosted with Microsoft. Requires team.teamProject.
	"team.remoteUrl": "",

	// Tracks whether the extension should display the Welcome message after the initial installation.
	"team.showWelcomeMessage": true,

	// [Not for TFVC] Specify the team project to use when your source code repository is not hosted with Microsoft. Requires team.remoteUrl.
	"team.teamProject": "",

	// [Required for TFVC] Specify the full path to the TF executable or script to use for TFVC functionality.
	"tfvc.location": "",

	// [Optional for TFVC] Specify the full URL (ex. http://servername:9999/proxy) to the TFS proxy to use for TFVC functionality.
	"tfvc.proxy": "",

	// [Optional for TFVC] Restricts the TFVC workspace to the currently open VS Code workspace.
	"tfvc.restrictWorkspace": false,

	// Defines the default justification for tables that have only a "-" or no colon on the formatting line
	"markdown-table-formatter.defaultTableJustification": "Left",

	// Enable or disable Markdown Table Formatter
	"markdown-table-formatter.enable": true,

	// Keep first and last pipes "|" in table formatting. Tables are easier to format when pipes are kept
	"markdown-table-formatter.keepFirstAndLastPipes": true,

	// Do not pad the last column to more than your editor's preferredLineLength setting.
	"markdown-table-formatter.limitLastColumnPadding": false,

	// File language grammar that will be considered Markdown by this package (comma-separated). 
	// Run "Markdown Table Formatter: Enable For Current Scope" command to add current editor grammar to this setting.
	"markdown-table-formatter.markdownGrammarScopes": [
		"markdown"
	],

	// Remove colons from the format line if the justification is the same as default
	"markdown-table-formatter.removeColonsIfSameAsDefault": false,

	// How many spaces between left and right of each column content
	"markdown-table-formatter.spacePadding": 1,

	// The path to a PHP 7+ executable.
	"php.executablePath": null,

	// The memory limit of the php language server. [Number][K|M|G]. Use '-1' to allow unlimited use of the RAM (default is 4G).
	"php.memoryLimit": "4095M",

	// Speed up completion by building the project once on startup to initialize the cache.
	"haxe.buildCompletionCache": true,

	// Options for code generation
	"haxe.codeGeneration": {},

	// Array of switchable configurations for the Haxe completion server. Each configuration is an array of command-line arguments, see item documentation for more details.
	"haxe.configurations": [],

	// A regex that paths of source files have to match to be included in diagnostics. Defaults to `"${workspaceRoot}"` so only files within your workspace are included. You can use `"${haxelibPath}/<library-name>"` to only show results for a specific haxelib. Use `".*?"` to see all results, including haxelibs.
	"haxe.diagnosticsPathFilter": "${workspaceRoot}",

	// Use "haxe.configurations" instead
	// 
	"haxe.displayConfigurations": [],

	// Integer value for the port to open on the display server, or `"auto"`. Can be used to `--connect` Haxe build commands.
	"haxe.displayPort": "auto",

	// Haxe completion server configuration
	"haxe.displayServer": {},

	// Enable code lens to show some statistics
	"haxe.enableCodeLens": false,

	// Use the extension's Haxe server to compile auto-generated tasks. Requires `"haxe.displayPort"` to be set.
	"haxe.enableCompilationServer": true,

	// Whether a warning popup should be shown if the completion cache build has failed.
	"haxe.enableCompletionCacheWarning": true,

	// Enable automatic diagnostics of Haxe files, run automatically on open and save.
	"haxe.enableDiagnostics": true,

	// Use "haxe.enableServerView" instead
	// 
	"haxe.enableMethodsView": false,

	// Enable the "Haxe Server" view container for performance and cache debugging.
	"haxe.enableServerView": false,

	// Whether signature help should include documentation or not.
	"haxe.enableSignatureHelpDocumentation": true,

	// A list of dot paths (packages, modules, types) to exclude from classpath parsing, completion and workspace symbols. Can be useful to improve performance.
	"haxe.exclude": [
		"zpp_nape"
	],

	// Path to the Haxe executable or an object containing a Haxe executable configuration
	"haxe.executable": "auto",

	// Options for postfix completion
	"haxe.postfixCompletion": {},

	// Configures which presentation options to use for generated tasks by default (see `presentation` in `tasks.json`).
	"haxe.taskPresentation": {
		"echo": true,
		"reveal": "always",
		"focus": false,
		"panel": "shared",
		"showReuseMessage": true,
		"clear": false
	},

	// Path to the Haxelib executable
	"haxelib.executable": "auto",

	// If there is no solution in the workplace root folder, it will search for solutions in any of these folders.
	"vssolution.altSolutionFolders": [
		"src"
	],

	// Ask to create the solution template folder when none exists.
	"vssolution.createTemplateFolderQuestion": true,

	// Folder and filenames to ignore when get a dotnet core project content
	"vssolution.netcoreIgnore": [
		"bin",
		"node_modules",
		"obj",
		".ds_store"
	],

	// Show the solution explorer in the activity bar, in the explorer pane or don't show it.
	"vssolution.showMode": "activityBar",

	// Show the solution explorer output channel.
	"vssolution.showOutputChannel": true,

	// solution-explorer -> Uses the vscode-solution-explorer custom icons
	// mix -> use current theme icons for files and folders
	// current-theme -> Uses the installed icon theme
	"vssolution.solutionExplorerIcons": "vscode-great-icons",

	// Select the active editor file in the solution explorer.
	"vssolution.trackActiveItem": true,

	// Win32 codepage -> iconv.js encoding equivalences.
	"vssolution.win32Encoding": {
		"932": "Shift_JIS",
		"936": "GBK",
		"950": "BIG5"
	},

	// Add space at the end of XML closing tag, ex: " />"
	"vssolution.xmlClosingTagSpace": "false",

	// Spaces to be used for indenting XML output. It could be a number or an string. ex. "2", " " or "\t".
	"vssolution.xmlspaces": "2",

	// Type of XML element to put in the xxproj files.
	"vssolution.xxprojItemTypes": {
		"*": "Content",
		"cs": "Compile",
		"cpp": "ClCompile",
		"cc": "ClCompile",
		"c": "ClCompile",
		"h": "ClInclude",
		"hpp": "ClInclude",
		"vb": "Compile",
		"fs": "Compile",
		"ts": "TypeScriptCompile"
	},

	// Controls if plugin is enabled
	"color-highlight.enable": true,

	// An array of language ids which should be higlighted by Color Highlight. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.languages": [
		"*"
	],

	// Style of the highlight. Can be 'dot-before', 'dot-after', 'foreground', 'background', 'outline', 'underline'
	"color-highlight.markerType": "background",

	// Highlight colors on the ruler (scroll bar), true/false
	"color-highlight.markRuler": true,

	// Highlight color words in all files (grey, green, etc.)
	"color-highlight.matchWords": false,

	// Array of absolute paths to search while perform file lookups.
	"color-highlight.sass.includePaths": [],

	// Define jest config path (optionally)
	"jestrunner.configPath": "",

	// Define jest command (optionally)
	"jestrunner.jestCommand": "",

	// Define jest path (optionally)
	"jestrunner.jestPath": "",

	// Add or overwrite VScode run options (optionally)
	"jestrunner.runOptions": {},

	// Webpack custom loaders prefix.
	"javascript.commonjs.resolve.customLoader": [
		"bundle-loader?lazy!"
	],

	// Array of file extensions to search in order.
	"javascript.commonjs.resolve.extensions": [
		".js"
	],

	// Array of languages where the script should be enabled.
	"javascript.commonjs.resolve.languages": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact"
	],

	// Directories in which to recursively look for modules.
	"javascript.commonjs.resolve.moduleDirectory": [
		"node_modules"
	],

	// package.json Data applicable to the module being loaded
	"javascript.commonjs.resolve.package": "package.json",

	// Type coverage diagnostic severity
	"flow.coverageSeverity": "info",

	// Is flow enabled
	"flow.enabled": true,

	// (Supported only when useLSP: false). File extensions to consider for flow processing
	"flow.fileExtensions": [
		".js",
		".mjs",
		".jsx",
		".flow",
		".json"
	],

	// Set value to enable flow lazy mode
	"flow.lazyMode": null,

	// Log level for output panel logs
	"flow.logLevel": "info",

	// Absolute path to flow binary. Special var ${workspaceFolder} or ${flowconfigDir} can be used in path (NOTE: in windows you can use '/' and can omit '.cmd' in path)
	"flow.pathToFlow": "flow",

	// (Supported only when useLSP: false) Run Flow on all files, No need to put //@flow comment on top of files.
	"flow.runOnAllFiles": false,

	// If true will run flow on every edit, otherwise will run only when changes are saved (Note: 'useLSP: true' only supports syntax errors)
	"flow.runOnEdit": true,

	// (Supported only when useLSP: false) If true will display flow status is the statusbar
	"flow.showStatus": true,

	// If true will show uncovered code by default
	"flow.showUncovered": false,

	// Stop Flow on Exit
	"flow.stopFlowOnExit": true,

	// Traces the communication between VSCode and the flow lsp service.
	"flow.trace.server": "off",

	// If true will use flow bundled with this plugin if nothing works
	"flow.useBundledFlow": true,

	// Complete functions with their parameter signature.
	"flow.useCodeSnippetOnFunctionSuggest": true,

	// Turn off to switch from the official Flow Language Server implementation to talking directly to flow.
	"flow.useLSP": true,

	// Support using flow through your node_modules folder, WARNING: Checking this box is a security risk. When you open a project we will immediately run code contained within it.
	"flow.useNPMPackagedFlow": true,

	// Default author tag
	"php-docblocker.author": {
		"name": "Name",
		"email": "email@email.com"
	},

	// Specify the default template for classes.
	"php-docblocker.classTemplate": null,

	// Extra tags you wish to include in every DocBlock
	"php-docblocker.extra": [],

	// Specify the default template for functions.
	"php-docblocker.functionTemplate": null,

	// If there should be a gap between the description and tags
	"php-docblocker.gap": true,

	// Specify the default template for class variables.
	"php-docblocker.propertyTemplate": null,

	// Fully qualifies any data types used in param and returns by reading the namespaces.
	"php-docblocker.qualifyClassNames": false,

	// If there should be a gap between params and return
	"php-docblocker.returnGap": false,

	// Should we return void if there is no detectable return type?
	"php-docblocker.returnVoid": true,

	// Whether you want to use int instead of integer and bool instead of boolean.
	"php-docblocker.useShortNames": false,

	// The provision notes object
	"provision.notes": [
		{
			"keywords": [
				{
					"keyword": "TODO",
					"useColons": true,
					"caseSensitive": true
				},
				{
					"keyword": "FIXME",
					"useColons": true,
					"caseSensitive": true
				}
			],
			"priority": 10,
			"tooltip": "These are all the 'TODO' and 'FIXME' notes in this file",
			"text": {
				"one": "📝 {0} TODO",
				"multiple": "📝 {0} TODOs"
			}
		},
		{
			"keywords": [
				{
					"keyword": "NOTE",
					"useColons": true,
					"caseSensitive": true
				}
			],
			"priority": 9,
			"tooltip": "These are all the notes in this file",
			"text": {
				"one": "📝 {0} Note",
				"multiple": "📝 {0} Notes"
			}
		}
	],

	// All the syntax settings for each keyword
	"provision.syntax": [
		{
			"keyword": "TODO",
			"color": "#fff",
			"backgroundColor": "#f2b01f",
			"rulerPlacement": "right",
			"rulerColor": "rgba(242, 176, 31, 0.8)",
			"highlight": "keyword"
		},
		{
			"keyword": "FIXME",
			"color": "#fff",
			"backgroundColor": "#d85f88",
			"rulerPlacement": "right",
			"rulerColor": "rgba(216, 95, 136, 0.8)",
			"highlight": "keyword"
		},
		{
			"keyword": "NOTE",
			"color": "#aaa",
			"backgroundColor": "#434343",
			"rulerPlacement": "right",
			"rulerColor": "rgba(67, 67, 67, 0.8)",
			"highlight": "keyword"
		}
	],

	// List of characters the extension should track
	"gremlins.characters": {
		"0003": {
			"description": "end of text",
			"level": "warning"
		},
		"00a0": {
			"description": "non breaking space",
			"level": "info"
		},
		"200b": {
			"zeroWidth": true,
			"description": "zero width space",
			"level": "error"
		},
		"200c": {
			"zeroWidth": true,
			"description": "zero width non-joiner",
			"level": "warning"
		},
		"200e": {
			"zeroWidth": true,
			"description": "left-to-right mark",
			"level": "error"
		},
		"201c": {
			"description": "left double quotation mark",
			"level": "warning"
		},
		"201d": {
			"description": "right double quotation mark",
			"level": "warning"
		},
		"202c": {
			"zeroWidth": true,
			"description": "pop directional formatting",
			"level": "error"
		},
		"202d": {
			"zeroWidth": true,
			"description": "left-to-right override",
			"level": "error"
		},
		"202e": {
			"zeroWidth": true,
			"description": "right-to-left override",
			"level": "error"
		},
		"fffc": {
			"zeroWidth": true,
			"description": "object replacement character",
			"level": "error"
		}
	},

	// Color for **error** level
	"gremlins.color_error": "rgba(169, 68, 66, .75)",

	// Color for **info** level
	"gremlins.color_info": "rgba(60, 118, 61, .75)",

	// Color for **warning** level
	"gremlins.color_warning": "rgba(138, 109, 59, .75)",

	// gutter icon size
	"gremlins.gutterIconSize": "75%",

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// Set the theme for the editor ('light', 'dark'). Note: you must close/reopen any existing editors for the change to take effect.
	"vscode-json-editor.theme": "light",

	// Whether to enable anonymous usage collection.
	"dotnet.enableTelemetry": true,

	// Set true to automatically upload files that enter the queue. This allows for changes within VS Code to be upload on save, while not uploading changes from outside VS Code (like a watcher would).
	"njpPush.autoUploadQueue": false,

	// Automatically disables any watchers when the active environment is changed.
	"njpPush.disableWatchOnEnvChange": true,

	// Defines the colours for specific environment names within the service settings file. The colour names as well as their values can be customised, and matching names will be coloured accordingly.
	"njpPush.envColours": {
		"dev": "#62defd",
		"stage": "#ffd08a",
		"prod": "#f7ed00"
	},

	// Defines in seconds how long Push will wait before producing a reminder for the active environment during transfers.
	"njpPush.envReminderTimeout": 30,

	// An array of regular expressions to match against ignored paths.
	"njpPush.ignoreGlobs": [
		"**/.DS_Store",
		"**/Thumbs.db",
		"**/desktop.ini",
		"**/.git/*",
		"**/.svn/*"
	],

	// Limits how far Push will traverse before giving up when looking for a service settings file. If enabled, Push will stop at the workspace root (or a hard limit of 50 ancestors).
	"njpPush.limitServiceTraversal": true,

	// Locale to use (See supported locales in the README).
	"njpPush.locale": "en_gb",

	// Set true to persist watchers across sessions of vscode.
	"njpPush.persistWatchers": false,

	// Defines the default SSH key file for SFTP.
	"njpPush.privateSSHKey": "",

	// Defines the default SSH key passphrase, if needed.
	"njpPush.privateSSHKeyPassphrase": "",

	// How to notify once a queue is completed. Choose 'status' or popup 'message'.
	"njpPush.queueCompleteMessageType": "status",

	// Set true to queue watched files on change instead of uploading them.
	"njpPush.queueWatchedFiles": false,

	// Defines the glob used to find push settings JSON files.
	"njpPush.settingsFileGlob": ".push.settings.json*",

	// Defines the push settings JSON filename.
	"njpPush.settingsFilename": ".push.settings.jsonc",

	// Shows a changelog if Push upgrades either its minor or major version.
	"njpPush.showChangelog": true,

	// Show an upload button on the title menu.
	"njpPush.showTitleMenuUpload": true,

	// Set the colour of a status message (except progress). See https://code.visualstudio.com/docs/getstarted/theme-color-reference
	"njpPush.statusMessageColor": "statusBar.foreground",

	// Enable the upload queue for deferred uploads on save.
	"njpPush.uploadQueue": true,

	// Set true to show the currently active environment for the opened editor in the status bar.
	"njpPush.useEnvLabel": true,

	// Whether to enable AppInsights to track user telemetry data.
	"terminal.enableAppInsights": true,

	// Automatically open svg preview or not
	"svg-font-previewer.autoOpenPreview": true,

	// Sort the icons by name or it's unicode (displayed as hex character) or don't sort at all
	"svg-font-previewer.iconSortBy": "none",

	// Sort the icons in asc(ascending) or desc(descending) order using the specified `iconSortBy` configuration
	"svg-font-previewer.iconSortOrder": "ascending",

	// Are risky fixers allowed (--allow-risky)
	"vscode-php-cs-fixer.allowRisky": false,

	// Path to a .php_cs file (--config)
	"vscode-php-cs-fixer.config": "",

	// Runs fix command on save
	"vscode-php-cs-fixer.fixOnSave": true,

	// Rules to use when fixing files (--rules)
	"vscode-php-cs-fixer.rules": "@PSR1,@PSR2,@Symfony,-yoda_style",

	// The path to the php-cs-fixer tool
	"vscode-php-cs-fixer.toolPath": "",

	// Use a cache file when fixing files (--using-cache)
	"vscode-php-cs-fixer.useCache": false,

	// Configure glob patterns for excluding VSCode extensions from being synchronized. For example:
	// [
	//     "somepublisher.*",
	//     "nonoroazoro.syncing"
	// ]
	// Now the extension `nonoroazoro.syncing` and all the extensions of the author `somepublisher` will no longer be synchronized.
	"syncing.excludedExtensions": [],

	// Configure glob patterns for excluding VSCode settings from being synchronized. For example:
	// [
	//     "editor.*",
	//     "workbench.colorTheme"
	// ]
	// Now the setting `workbench.colorTheme` and all the settings of `editor` will no longer be synchronized.
	"syncing.excludedSettings": [],

	// Automatically update extensions during the synchronization.
	"syncing.extensions.autoUpdate": true,

	// Configure a threshold to enable Poka-Yoke (Mistake-Proofing).
	// Each time you start a synchronization, Syncing will display a confirm dialog if the changes between the local and remote setting exceed the threshold.
	// The default value is 10. To disable this feature, just change it to 0.
	"syncing.pokaYokeThreshold": 10,

	// Synchronize the `keybindings` separately for different operating systems.
	// You may disable it since the VSCode has introduced the `Platform Specific Keybindings` from version 1.27. But please make sure you've already merged your keybindings before disabling this setting.
	"syncing.separateKeybindings": true,

	// 
	"auto-run-command.rules": [
		{
			"condition": "always",
			"command": "auto-run-command.placeholder-command",
			"message": "Running a dummy command"
		}
	],

	// yarn bin name
	"yarn.bin": "yarn",

	// Keep the output panel visible when yarn execution is successful (no effect with runInTerminal)
	"yarn.dontHideOutputOnSuccess": true,

	// Default package json path. relative to current project root
	"yarn.packageJson": "",

	// Run yarn commands in a terminal, otherwise shows the output in the output panel
	"yarn.runInTerminal": false,

	// Include parentheses around a sole arrow function parameter.
	"prettier.arrowParens": "avoid",

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Which parser to use. Valid options are 'flow' and 'babylon'
	"prettier.parser": "babylon",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// Controls the printing of trailing commas wherever possible
	"prettier.trailingComma": "es5",

	// Is flow enabled
	"flowide.enabled": true,

	// Path to flow binary
	"flowide.pathToFlow": "",

	// Whether should autocomplete params name
	"flowide.useCodeSnippetsOnFunctionSuggest": true,

	// Whether to add the local npm bin directory to the PATH for purs IDE server and build command.
	"purescript.addNpmPath": false,

	// Whether to add psc-package sources to the globs passed to the IDE server for source locations (specifically the output of `psc-package sources`, if this is a psc-package project). Update due to adding packages/changing package set requires psc-ide server restart.
	"purescript.addPscPackageSources": false,

	// Whether to add spago sources to the globs passed to the IDE server for source locations (specifically the output of `spago sources`, if this is a spago project). Update due to adding packages/changing package set requires psc-ide server restart.
	"purescript.addSpagoSources": false,

	// Whether to automatically add imported identifiers when accepting autocomplete result.
	"purescript.autocompleteAddImport": true,

	// Whether to always autocomplete from all built modules, or just those imported in the file. Suggestions from all modules always available by explicitly triggering autocomplete.
	"purescript.autocompleteAllModules": true,

	// Whether to group completions in autocomplete results. Requires compiler 0.11.6
	"purescript.autocompleteGrouped": true,

	// Maximum number of results to fetch for an autocompletion request. May improve performance on large projects.
	"purescript.autocompleteLimit": null,

	// Whether to automatically start/connect to purs IDE server when editing a PureScript file (includes connecting to an existing running instance). If this is disabled, various features like autocomplete, tooltips, and other type info will not work until start command is run manually.
	"purescript.autoStartPscIde": true,

	// Build command to use with arguments. Not passed to shell. eg `pulp build -- --json-errors` (this default requires pulp >=10)
	"purescript.buildCommand": "pulp build -- --json-errors",

	// The warning codes to censor, both for fast rebuild and a full build. Unrelated to any psa setup. e.g.: ["ShadowedName","MissingTypeDeclaration"]
	"purescript.censorWarnings": [],

	// List of codegen targets to pass to the compiler for rebuild. e.g. js, corefn. If not specified (rather than empty array) this will not be passed and the compiler will default to js. Requires 0.12.1+
	"purescript.codegenTargets": null,

	// Whether to set the editor-mode flag on the IDE server
	"purescript.editorMode": false,

	// Enable purs IDE server fast rebuild
	"purescript.fastRebuild": true,

	// Module to prefer to insert when adding imports which have been re-exported. In order of preference, most preferred first.
	"purescript.importsPreferredModules": [
		"Prelude"
	],

	// Override purs ide output directory (output/ if not specified). This should match up to your build command
	"purescript.outputDirectory": null,

	// Path to installed packages. Will be used to control globs passed to IDE server for source locations.  Change requires IDE server restart.
	"purescript.packagePath": "bower_components",

	// Whether to set the polling flag on the IDE server
	"purescript.polling": false,

	// Module to consider as your default prelude, if an auto-complete suggestion comes from this module it will be imported unqualified.
	"purescript.preludeModule": "Prelude",

	// Log level for purs IDE server
	"purescript.pscIdelogLevel": "",

	// Port to use for purs IDE server (whether an existing server or to start a new one). By default a random port is chosen (or an existing port in .psc-ide-port if present), if this is specified no attempt will be made to select an alternative port on failure.
	"purescript.pscIdePort": null,

	// Location of legacy psc-ide-server executable (resolved wrt PATH)
	"purescript.pscIdeServerExe": "psc-ide-server",

	// Location of purs executable (resolved wrt PATH)
	"purescript.pursExe": "purs",

	// Path to application source root. Will be used to control globs passed to IDE server for source locations. Change requires IDE server restart.
	"purescript.sourcePath": "src",

	// Traces the communication between VSCode and the PureScript language service.
	"purescript.trace.server": "off",

	// Whether to use the new combined purs executable. This will default to true in the future then go away.
	"purescript.useCombinedExe": true,

	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,

	// Enables find usage inspection for SCSS files. It can be slow for intellisense.
	"html-css-class-completion.enableScssFindUsage": false,

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "node_modules/**",

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,scss,sass,slim,latte,php,html,twig}",

	// An array contains remote CSS files. Those remotes will be fetched and cached.
	"html-css-class-completion.remoteStyleSheets": [],

	// Include completion for module export and auto import them
	"vetur.completion.autoImport": true,

	// Casing conversion for tag completion
	//  - initial: use the key in `components: {...}` as is for tag completion and do not force any casing
	//  - kebab: kebab-case completion for <my-tag>
	"vetur.completion.tagCasing": "kebab",

	// Enable/disable Vetur's built-in scaffolding snippets
	"vetur.completion.useScaffoldSnippets": true,

	// Log level for VLS
	//  - INFO: Only log info messages. This is the default.
	//  - DEBUG: Log info and debug messages.
	"vetur.dev.logLevel": "INFO",

	// Path to VLS for Vetur developers. There are two ways of using it. 
	// 
	// 1. Clone vuejs/vetur from GitHub, build it and point it to the ABSOLUTE path of `/server`.
	// 2. `yarn global add vue-language-server` and point Vetur to the installed location (`yarn global dir` + node_modules/vue-language-server)
	"vetur.dev.vlsPath": "",

	// The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.
	"vetur.dev.vlsPort": -1,

	// Enable template interpolation service that offers diagnostics / hover / definition / references.
	"vetur.experimental.templateInterpolationService": false,

	// Default formatter for <style> region
	//  - none: disable formatting
	//  - prettier: css formatter using css parser from prettier
	"vetur.format.defaultFormatter.css": "prettier",

	// Default formatter for <template> region
	//  - none: disable formatting
	//  - prettyhtml: prettyhtml
	//  - js-beautify-html: html formatter of js-beautify
	//  - prettier: prettier
	"vetur.format.defaultFormatter.html": "prettyhtml",

	// Default formatter for <script> region
	//  - none: disable formatting
	//  - prettier: js formatter from prettier
	//  - prettier-eslint: prettier-eslint
	//  - vscode-typescript: js formatter from TypeScript
	"vetur.format.defaultFormatter.js": "prettier",

	// Default formatter for <style lang='less'> region
	//  - none: disable formatting
	//  - prettier: less formatter using postcss parser from prettier
	"vetur.format.defaultFormatter.less": "prettier",

	// Default formatter for <style lang='postcss'> region
	//  - none: disable formatting
	//  - prettier: postcss formatter using css parser from prettier
	"vetur.format.defaultFormatter.postcss": "prettier",

	// Default formatter for <style lang='scss'> region
	//  - none: disable formatting
	//  - prettier: scss formatter using scss parser from prettier
	"vetur.format.defaultFormatter.scss": "prettier",

	// Default formatter for <style lang='stylus'> region
	//  - none: disable formatting
	//  - stylus-supremacy: stylus formatter from stylus-supremacy
	"vetur.format.defaultFormatter.stylus": "stylus-supremacy",

	// Default formatter for <script> region
	//  - none: disable formatting
	//  - prettier: ts formatter using typescript parser from prettier
	//  - vscode-typescript: ts formatter from TypeScript
	"vetur.format.defaultFormatter.ts": "prettier",

	// Options for all default formatters
	"vetur.format.defaultFormatterOptions": {
		"js-beautify-html": {
			"wrap_attributes": "force-expand-multiline"
		},
		"prettyhtml": {
			"printWidth": 100,
			"singleQuote": true,
			"wrapAttributes": true,
			"sortAttributes": true
		}
	},

	// Enable/disable the Vetur document formatter.
	"vetur.format.enable": true,

	// Number of spaces per indentation level. Inherited by all formatters.
	"vetur.format.options.tabSize": 2,

	// Use tabs for indentation. Inherited by all formatters.
	"vetur.format.options.useTabs": false,

	// Whether to have initial indent for <script> region
	"vetur.format.scriptInitialIndent": false,

	// Whether to have initial indent for <style> region
	"vetur.format.styleInitialIndent": false,

	// Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.
	"vetur.grammar.customBlocks": {
		"docs": "md",
		"i18n": "json"
	},

	// Traces the communication between VS Code and Vue Language Server.
	"vetur.trace.server": "off",

	// Use dependencies from workspace. Currently only for TypeScript.
	"vetur.useWorkspaceDependencies": false,

	// Validate js/ts in <script>
	"vetur.validation.script": true,

	// Validate css/scss/less/postcss in <style>
	"vetur.validation.style": true,

	// Validate vue-html in <template> using eslint-plugin-vue
	"vetur.validation.template": true,

	// The Chocolatey Template Packages Configuration
	"chocolatey.templatePackages": {
		"names": [
			"msi.template",
			"zip.template"
		],
		"source": "https://chocolatey.org/api/v2/"
	},

	// An array with color (hex, rgba, rgb) strings which are used as colors, can be any length.
	"indentRainbow.colors": [
		"rgba(255,255,64,0.07)",
		"rgba(127,255,127,0.07)",
		"rgba(255,127,255,0.07)",
		"rgba(79,236,236,0.07)"
	],

	// Indent color for when there is an error in the indentation, for example if you have your tabs set to 2 spaces but the indent is 3 spaces. Can be any type of web based color format (hex, rgba, rgb).
	"indentRainbow.errorColor": "rgba(128,32,32,0.6)",

	// For which languages indent-rainbow should be deactivated. When left empty will ignore.
	"indentRainbow.excludedLanguages": [
		"plaintext"
	],

	// For which languages indent-rainbow should skip indent error detection (use '*' to deavtivate errors for all languages).
	"indentRainbow.ignoreErrorLanguages": [
		"markdown"
	],

	// Skip error highlighting for RegEx patterns. Defaults to c/cpp decorated block and full line comments.
	"indentRainbow.ignoreLinePatterns": [
		"/[ \t]* [*]/g",
		"/[ \t]+[/]{2}/g"
	],

	// For which languages indent-rainbow should be activated. When empty will use for all languages.
	"indentRainbow.includedLanguages": [],

	// Automatically change indent settings for languages (see README.md for details).
	"indentRainbow.indentSetter": {},

	// Indent color for when there is a mix between spaces and tabs in the indentation. Can be any type of web based color format (hex, rgba, rgb) or a empty string(to be disabled this coloring).
	"indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",

	// The delay in ms until the editor gets updated.
	"indentRainbow.updateDelay": 100,

	// Setup shortcut buttons. Format: ICON,COMMAND,TOOLTIP
	"shortcuts.buttons": [
		"file-binary , workbench.action.tasks.build , Run build task",
		"beaker , workbench.action.tasks.test , Run test task",
		"terminal , workbench.action.terminal.toggleTerminal , Toggle terminal panel",
		"telescope , workbench.action.showCommands , Show command palette",
		"bug, workbench.action.debug.start, Launch debug"
	],

	// Autoprefixer options object. For more info visit https://github.com/postcss/autoprefixer#options
	"es6-css-minify.autoprefixer": {},

	// If this file exists, overwrite clean-css settings with the ones specified in this file. For more info visit https://www.npmjs.com/package/clean-css.
	"es6-css-minify.cleancssConfigFile": ".cleancssrc",

	// Clean-CSS settings. For more info visit https://www.npmjs.com/package/clean-css.
	"es6-css-minify.css": {
		"rebase": false
	},

	// Prefix for sources in map files.
	"es6-css-minify.cssMapSource": "",

	// Where to save the minified file.
	// Default: '' - saves in the same directory.
	// '/' - Save in workspace root.
	"es6-css-minify.cssMinPath": "",

	// Filename postfix
	"es6-css-minify.cssPostfix": "min",

	// Enable autoprefixer?
	"es6-css-minify.enableAutoprefixer": false,

	// Generate CSS sourcemap files.
	"es6-css-minify.genCSSmap": false,

	// Generate JavaScript sourcemap files.
	"es6-css-minify.genJSmap": false,

	// Hide the 'Minify' button in the status bar if it's a file you can't minify.
	"es6-css-minify.hideButton": false,

	// Uglify-es settings. For more info visit https://www.npmjs.com/package/uglify-es#parse-options.
	"es6-css-minify.js": {
		"mangle": false,
		"compress": {
			"unused": false
		},
		"output": {
			"quote_style": 0
		}
	},

	// Prefix for sources in map files.
	"es6-css-minify.jsMapSource": "",

	// Where to save the minified file.
	// Default: '' - saves in the same directory.
	// '/' - Save in workspace root.
	"es6-css-minify.jsMinPath": "",

	// Filename postfix
	"es6-css-minify.jsPostfix": "min",

	// Automatically minify file when saving. Set to "yes" to always minify, "no" to never minify, "exists" to only minify if a minified version already exists.
	"es6-css-minify.minifyOnSave": "no",

	// If this file exists, overwrite uglify-es settings with the ones specified in this file. For more info visit https://www.npmjs.com/package/uglify-es#minify-options-structure.
	"es6-css-minify.uglifyConfigFile": ".uglifyrc",

	// Use single instead of double quotes
	"css2react.singleQuotes": false,

	// Number of spaces to use for indentation of formatted JSON output. If not set, your editor.tabSize setting is used.
	"fixJson.indentationSpaces": null,

	// Glob patterns to match files that should have auto formatting enabled
	"autoAlign.associations": {
		"csv": ",",
		"bsv": "|"
	},

	// Collapse the fields when disabling auto align
	"autoAlign.collapseOnDisable": false,

	// The delay in milliseconds before auto formatting
	"autoAlign.delay": 1000,

	// Set to true to dim the separators when active
	"autoAlign.dimSeparators": true,

	// When true, auto formatting is enabled for the file extension
	"autoAlign.enabled": {
		"csv": true,
		"bsv": true
	},

	// Automatically add an extra space after the separator for readability
	"autoAlign.extraSpace": true,

	// Attempt to position the cursor somewhere sensible after formatting
	"autoAlign.repositionCursor": true,

	// Enable format blade file
	"blade.format.enable": false,

	// Refresh the tree when files are opened or saved
	"todo-tree.autoRefresh": true,

	// Custom configuration for highlighting, [Read more...](https://github.com/Gruntfuggly/todo-tree#highlighting)
	"todo-tree.customHighlight": {},

	// Create a debug channel in the Output view
	"todo-tree.debug": false,

	// Default configuration for highlighting. [Read more...](https://github.com/Gruntfuggly/todo-tree#highlighting)
	"todo-tree.defaultHighlight": {},

	// An array of workspace names to exclude as roots in the tree (wildcards can be used).
	"todo-tree.excludedWorkspaces": [],

	// Globs for use in limiting search results by exclusion (applied after **includeGlobs**), e.g. `["**/*.txt"]` to ignore all .txt files
	"todo-tree.excludeGlobs": [],

	// When opening new workspaces, show the tree initially fully expanded
	"todo-tree.expanded": false,

	// Set to true if you want the view filtering to be case sensitive
	"todo-tree.filterCaseSensitive": false,

	// When opening new workspaces, show the tree initially as flat list of files
	"todo-tree.flat": false,

	// When opening new workspaces, show the tree initially grouped by tag
	"todo-tree.grouped": false,

	// Save some space by hiding the item icons when grouped by tag
	"todo-tree.hideIconsWhenGroupedByTag": false,

	// Normally, the tree is removed from the explorer view if nothing is found. Set this to false to keep the view present.
	"todo-tree.hideTreeWhenEmpty": true,

	// Delay before highlighting tags within files (milliseconds)
	"todo-tree.highlightDelay": 500,

	// An array of workspace names to include as roots in the tree (wildcards can be used). An empty array includes all workspace folders.
	"todo-tree.includedWorkspaces": [],

	// Globs for use in limiting search results by inclusion, e.g. `["**/unit-tests/*.js"]` to only show .js files in unit-tests subfolders
	"todo-tree.includeGlobs": [],

	// Format for tree items
	"todo-tree.labelFormat": "${tag} ${after}",

	// By default the globs are passed into ripgrep to narrow the search. Set this to false to apply the globs *after* the search (pre 0.0.132 behaviour).
	"todo-tree.passGlobsToRipgrep": true,

	// Regular expression for matching TODOs. Note: $TAGS will be replaced by the tag list
	"todo-tree.regex": "((//|#|<!--|;|/\\*|^)\\s*($TAGS)|^\\s*- \\[ \\])",

	// Use a case sensitive regular expression
	"todo-tree.regexCaseSensitive": true,

	// Sets where the cursor is positioned when revealing a todo
	//  - start of todo: Moves the cursor to the beginning of the todo
	//  - end of todo: Moves the cursor to the end of the todo
	//  - highlight todo: Selects the todo text
	//  - start of line: Moves the cursor to the start of the line
	//  - highlight line: Selects the whole line
	"todo-tree.revealBehaviour": "start of todo",

	// Location of your version of ripgrep
	"todo-tree.ripgrep": "",

	// Additional arguments to pass to ripgrep (Use with caution!)
	"todo-tree.ripgrepArgs": "--max-columns=1000",

	// Size of the buffer to use for retrieving output from ripgrep (kilobytes)
	"todo-tree.ripgrepMaxBuffer": 200,

	// Folder in which to run the search (defaults to the workspace folder)
	"todo-tree.rootFolder": "",

	// Show badges and SCM state in the tree view
	"todo-tree.showBadges": true,

	// Show counts of TODOs in the tree
	"todo-tree.showCountsInTree": false,

	// Show the tree in the explorer view
	"todo-tree.showInExplorer": true,

	// Show a button on the tree view header to toggle between scanning open files only, or the whole workspace
	"todo-tree.showScanOpenFilesOrWorkspaceButton": false,

	// Disable scanning of the workspace for TODOs
	"todo-tree.showTagsFromOpenFilesOnly": false,

	// Sort items in the tags only view alphabetically instead of by file and line number
	"todo-tree.sortTagsOnlyViewAlphabetically": false,

	// What to show in the status bar - nothing, total count, or counts per tag
	//  - none: Only show the scanning status in the status bar
	//  - total: Show the total number of TODOs in the status bar
	//  - tags: Show a breakdown of the count of each tag in the status bar
	//  - top three: Show the count of the top three tags in the status bar
	"todo-tree.statusBar": "none",

	// List of tags
	"todo-tree.tags": [
		"TODO",
		"FIXME"
	],

	// When opening new workspaces, show only tag elements in tree
	"todo-tree.tagsOnly": false,

	// Track the current file in the tree view
	"todo-tree.trackFile": true,

	// Specifies the browser for 'View Documentation In Browser'. (Based on https://github.com/pwnall/node-open)
	"vscode-janus-debug.browser": "",

	// Project folders with postfix '.cat' will be created and deleted on up- or download!
	"vscode-janus-debug.categories": false,

	// Default: script will be encrypted, if it's encrypted on server or if it contains the crypt keyword
	"vscode-janus-debug.encryptionOnUpload": "default",

	// Deprecated: use vscode-janus-debug.encryptionOnUpload instead
	// 
	"vscode-janus-debug.encryptOnUpload": null,

	// Set to true, if the extension should upload scripts without checking the script on server.
	"vscode-janus-debug.forceUpload": false,

	// Location of the extension's log file
	"vscode-janus-debug.log": {},

	// Deprecated, use scriptConsole.open
	// 
	"vscode-janus-debug.openScriptConsoleOnRunScript": true,

	// 
	"vscode-janus-debug.scriptConsole": {},

	// For now, only the return value is written to the log file
	"vscode-janus-debug.scriptLog": {},

	// If set to true, script parameters will be up- and downloaded together with the script
	"vscode-janus-debug.scriptParameters": false,

	// Settings that adjust the behavior of the Server Console window.
	"vscode-janus-debug.serverConsole": {},

	// A repository which will be cloned to the projects typings-folder. Note: Requires git to be installed locally
	"vscode-janus-debug.typingsRepository": {},

	// Never automatically upload scripts in this list and never ask to.
	"vscode-janus-debug.uploadManually": [],

	// Always upload scripts in this list after save automatically.
	"vscode-janus-debug.uploadOnSave": [],

	// Upload JavaScript files automatically every time the files are saved
	"vscode-janus-debug.uploadOnSaveGlobal": true,

	// Location of compile_commands.json file
	"compilerexplorer.compilationDirectory": "${workspaceFolder}",

	// Dim the lines that was thrown away by compiler
	"compilerexplorer.dimUnusedSourceLines": true,

	// Location of output files created
	"compilerexplorer.outDir": "${workspaceFolder}/.vscode/compilerexplorer_out",

	// User account the repositories belong to
	"ci-status.appveyor.owner": null,

	// The name of the repository your interested in
	"ci-status.appveyor.repo": null,

	// The name of the pipeline you're interested in
	"ci-status.codepipeline.name": null,

	// The AWS region in which your pipeline resides
	"ci-status.codepipeline.region": null,

	// The name of the project your interested in
	"ci-status.jenkins.project": null,

	// API token (preferred) / password of the user for authentication
	"ci-status.jenkins.token": null,

	// The host url to connect to
	"ci-status.jenkins.url": null,

	// User account name to connect with
	"ci-status.jenkins.user": null,

	// Specifies the service to be checked
	"ci-status.service": null,

	// Show build status for specific branch
	"ci-status.travis.branch": null,

	// User account the repositories belong to
	"ci-status.travis.owner": null,

	// The name of the repository your interested in
	"ci-status.travis.repo": null,

	// API token (preferred) / password of the user for authentication
	"ci-status.travis.token": null,

	// Show code snippets for C++ when presenting possible GUID formats to insert.
	"insertGuid.showCodeSnippets": true,

	// Show lowercase GUIDs (with and without braces) when presenting possible GUID formats to insert.
	"insertGuid.showLowercase": true,

	// Show uppercase GUIDs (with and without braces) when presenting possible GUID formats to insert.
	"insertGuid.showUppercase": false,

	// Set paths to .scss files. Imports are automatically handled. When no paths are set, all .scss files in the workspace will be included.
	"htmlScss.globalStyles": null,

	// When set to true, the extension looks for .scss file relative to the currently opened html file with the same name.
	"htmlScss.isAngularProject": true,

	// List of favorited figlet fonts.
	"banner-comments.favorites": [],

	// A string value that indicates the horizontal layout to use.
	"banner-comments.figlet.horizontalLayout": "default",

	// A string value that indicates the horizontal layout to use.
	"banner-comments.figlet.verticalLayout": "default",

	// Selected Header #1 font.
	"banner-comments.h1": "Banner4",

	// Selected Header #2 font.
	"banner-comments.h2": "Banner4",

	// Selected Header #3 font.
	"banner-comments.h3": "Banner4",

	// Build type to execute when clicking the 'Compile' button
	"particle.compileButtonAction": "localAppDeviceOS",

	// Don't check for dirty build state at start-up
	"particle.disableLocalCompilerDirtyCheck": false,

	// Don't show the Welcome screen at start-up
	"particle.disableWelcomeScreen": false,

	// Show all local compiler build logs
	"particle.enableVerboseLocalCompilerLogging": false,

	// Name of the firmware you are using
	"particle.firmwareName": "deviceOS",

	// Version of firmware you are using
	"particle.firmwareVersion": "1.0.1",

	// Build type to execute when clicking the 'Flash' button
	"particle.flashButtonAction": "localAppDeviceOS",

	// Name or ID of the device you are working with
	"particle.targetDevice": "",

	// Particle hardware platform to target when compiling
	"particle.targetPlatform": "photon",

	// Default elements to be placed in any package.json file created with Module Links. use '[name]' to insert the same string as in the require() call (or supplied in the input box). [Will only work with top level elements.] 
	"CreateModule.packageDefaults": {
		"name": "[name]",
		"version": "0.0.1",
		"main": "lib/[name]"
	},

	// Make packages as: just a file, with package.json, with index.js, or ask each time.
	"CreateModule.packageType": "package",

	// Support create and link for ES6 import semantics
	"CreateModule.supportES6modules": false,

	// List of additional note title tokens to choose from. If supplied, a picker will be shown when creating a new note.
	"vsnotes.additionalNoteTitles": [],

	// The default commit message used if none is provided with the Commit and Push command.
	"vsnotes.commitPushDefaultCommitMessage": "VS Notes Commit and Push",

	// Shell command to execute in the note directory when the Commit and Push command is executed. The {msg} token will be replaced with the contents of an input box shown or, if empty, the default commit message.
	"vsnotes.commitPushShellCommand": "git add -A && git commit -m \"{msg}\" && git push",

	// Default title for new notes.
	"vsnotes.defaultNoteName": "New_Note",

	// Path to directory to save notes. Use ~/ to denote a relative path from home folder.
	"vsnotes.defaultNotePath": "",

	// Default note title. Utilizes tokens set in vsnotes.tokens.
	"vsnotes.defaultNoteTitle": "{dt}_{title}.{ext}",

	// Default vscode snippet to execute after creating a note. Set both langId and name to null to disable.
	"vsnotes.defaultSnippet": {
		"langId": "markdown",
		"name": "vsnotes"
	},

	// Regular expressions for file names to ignore when parsing documents in note folder.
	"vsnotes.ignorePatterns": [
		"^\\."
	],

	// Number of recent files to show when running command `List Notes`.
	"vsnotes.listRecentLimit": 15,

	// Automatically convert blank spaces in title to character. To disable set to `null`.
	"vsnotes.noteTitleConvertSpaces": "_",

	// A list of markdown templates to choose from when creating a new note.
	"vsnotes.templates": [],

	// Tokens used to replace text in file name.
	"vsnotes.tokens": [
		{
			"type": "datetime",
			"token": "{dt}",
			"format": "YYYY-MM-DD_HH-mm",
			"description": "Insert formatted datetime."
		},
		{
			"type": "title",
			"token": "{title}",
			"description": "Insert note title from input box.",
			"format": "Untitled"
		},
		{
			"type": "extension",
			"token": "{ext}",
			"description": "Insert file vsnotes.",
			"format": "md"
		}
	],

	// Hide the files section in the sidebar. Requires application restart.
	"vsnotes.treeviewHideFiles": false,

	// Hide the tags section in the sidebar. Requires application restart.
	"vsnotes.treeviewHideTags": false,

	// where npm will talk to for package information
	"npm.registry": "https://registry.npmjs.org",

	// what strategy you want to use to update your package.json
	"npm.updateStrategy": "LATEST",

	// AutoLaunch mode. Can be:
	//   - 'auto': Automatically run tasks and launch configurations
	//   - 'prompt': User will be prompted before AutoLaunching.
	//   - 'disabled': Same as disabling the extension.
	"autolaunch.mode": "auto",

	// Add line indentation around brackets('{}', '<>', '[]') in request body when pressing enter.
	"rest-client.addRequestBodyLineIndentationAroundBrackets": true,

	// Certificate paths for different hosts. The path can be absolute path or relative path(relative to workspace or current http file)
	"rest-client.certificates": {},

	// Decode escaped unicode characters in response body.
	"rest-client.decodeEscapedUnicodeCharacters": false,

	// If particular headers are omitted in request header, these will be added as headers for each request.
	"rest-client.defaultHeaders": {
		"User-Agent": "vscode-restclient",
		"Accept-Encoding": "gzip"
	},

	// Controls whether to add href link in previewed response for response whose size is larger than limit specified by 'rest-client.largeResponseSizeLimitInMB'
	"rest-client.disableAddingHrefLinkForLargeResponse": true,

	// Controls whether to highlight response body for response whose size is larger than limit specified by 'rest-client.largeResponseSizeLimitInMB'
	"rest-client.disableHighlightResonseBodyForLargeResponse": true,

	// Enable/disable custom variable references CodeLens in request file
	"rest-client.enableCustomVariableReferencesCodeLens": true,

	// Enable/disable sending request CodeLens in request file
	"rest-client.enableSendRequestCodeLens": true,

	// Send out anonymous usage data
	"rest-client.enableTelemetry": true,

	// Sets the environments and custom variables belongs to it, especially the special environment name '$shared' is used to create variables shared across all the individual environments (e.g., {"$shared": {"version": "v1"}, "production": {"host": "api.example.com"}, "sandbox":{"host":"sandbox.api.example.com"}})
	"rest-client.environmentVariables": {
		"$shared": {}
	},

	// Excluded hosts when using using proxy settings
	"rest-client.excludeHostsForProxy": [],

	// Follow HTTP 3xx responses as redirects.
	"rest-client.followredirect": true,

	// Controls the font family used in the response preview
	"rest-client.fontFamily": null,

	// Controls the font size in pixels used in the response preview
	"rest-client.fontSize": null,

	// Controls the font weight used in the response preview
	"rest-client.fontWeight": "",

	// Form param encoding strategy for request body of x-www-form-urlencoded. 'automatic' for detecting encoding or not automatically and do the encoding job if necessary. 'never' for treating provided request body as is, no encoding job will be applied. 'always' for only use for the scenario that 'automatic' option not working properly, e.g., some special characters('+') are not encoded correctly.
	"rest-client.formParamEncodingStrategy": "automatic",

	// Set the response body size threshold of MB to identify whether a response is a so-called 'large response', only used when 'rest-client.disableHighlightResonseBodyForLargeResponse' and/or 'rest-client.disableAddingHrefLinkForLargeResponse' is set to true
	"rest-client.largeResponseBodySizeLimitInMB": 5,

	// The verbosity of logging in the REST output panel
	"rest-client.logLevel": "error",

	// Sets the custom mapping of mime type and file extension of saved response body (e.g., {"application/atom+xml": "xml"})
	"rest-client.mimeAndFileExtensionMapping": {},

	// Response preview column option. 'current' for previewing in the column of current request file. 'beside' for previewing at the side of the current active column and the side direction depends on 'workbench.editor.openSideBySideDirection' setting, either right or below the current editor column.
	"rest-client.previewColumn": "beside",

	// Response preview output option. 'full' for whole response message(status line, headers and body). 'headers' for response headers(as well as status line). 'body' for response body only. 'exchange' for whole HTTP exchange (request and response)
	"rest-client.previewOption": "full",

	// Preview response in untitled document if set to true, otherwise displayed in html view
	"rest-client.previewResponseInUntitledDocument": false,

	// Preview response panel will take focus after receiving response.
	"rest-client.previewResponsePanelTakeFocus": true,

	// Remember cookies for subsequent requests
	"rest-client.rememberCookiesForSubsequentRequests": true,

	// Show response in different tab
	"rest-client.showResponseInDifferentTab": false,

	// Suppress response body content type validation
	"rest-client.suppressResponseBodyContentTypeValidationWarning": false,

	// Timeout in milliseconds. 0 for infinity
	"rest-client.timeoutinmilliseconds": 0,

	// If 'true', prefixes the diagnostic severity ('Error:', 'Warning:' etc) to ErrorLens annotations.
	"errorLens.addAnnotationTextPrefixes": true,

	// Specify which diagnostic levels are enhanced. e.g. [ 'error', 'warning' ]. Valid values are any or all of: 'error', 'warning', 'info' & 'hint'
	"errorLens.enabledDiagnosticLevels": [
		"error",
		"warning",
		"info",
		"hint"
	],

	// The background color used to highlight lines containing errors. (Alpha is used)
	"errorLens.errorColor": "rgba(240,0,0,0.4)",

	// The text color used to highlight lines containing errors. (Alpha is used)
	"errorLens.errorTextColor": "rgba(240,240,240,1.0)",

	// Distance between end of the code line, and the start of the ErrorLens annotation. (CSS units).
	"errorLens.fontMargin": "40px",

	// Show ErrorLens annotations in Italics, or not?
	"errorLens.fontStyle": "italic",

	// Specifies the font weight for ErrorLens annotations.
	"errorLens.fontWeight": "normal",

	// The background color used to highlight lines containing hints. (Alpha is used)
	"errorLens.hintColor": "rgba(20,140,140,0.4)",

	// The text color used to highlight lines containing hints. (Alpha is used)
	"errorLens.hintTextColor": "rgba(240,240,240,1.0)",

	// The background color used to highlight lines containing info. (Alpha is used)
	"errorLens.infoColor": "rgba(0,200,0,0.4)",

	// The text color used to highlight lines containing info. (Alpha is used)
	"errorLens.infoTextColor": "rgba(240,240,240,1.0)",

	// Specify when the ErrorLens status bar text should be shown.
	"errorLens.statusBarControl": "hide-when-no-issues",

	// The background color used to highlight lines containing warnings. (Alpha is used)
	"errorLens.warningColor": "rgba(180,180,0,0.4)",

	// The text color used to highlight lines containing warnings. (Alpha is used)
	"errorLens.warningTextColor": "rgba(240,240,240,1.0)",

	// Enables the scanning of Gulp tasks.
	"task-master.enableGulp": true,

	// Enables the scanning of NPM tasks.
	"task-master.enableNpm": true,

	// Enables the scanning of Perl scripts.
	"task-master.enablePerl": true,

	// Enables the scanning of Powershell scripts.
	"task-master.enablePowershell": true,

	// Enables the scanning of Python scripts.
	"task-master.enablePython": true,

	// Enables the scanning of Ruby scripts.
	"task-master.enableRuby": true,

	// Enables the scanning of Shell scripts.
	"task-master.enableShell": true,

	// The glob which Task Master will exclude from scans.
	"task-master.excludesGlob": [
		"**/node_modules"
	],

	// The glob which Task Master will scan for gulp tasks.
	"task-master.gulpGlob": [
		"gulpfile.js"
	],

	// The glob which Task Master will scan for npm tasks.
	"task-master.npmGlob": [
		"package.json"
	],

	// Default port in which the preview should be opened.
	"openApiDesigner.defaultPort": 9005,

	// Whether to open preview in browser, default: preview inside vscode
	"openApiDesigner.previewInBrowser": false,

	// Automatically search for any `phpcs.xml`, `phpcs.xml.dist`, `phpcs.ruleset.xml` or `ruleset.xml` file to use as configuration. Overrides custom standards defined above.
	"phpcs.autoConfigSearch": true,

	// The path to composer.json
	"phpcs.composerJsonPath": "composer.json",

	// Control whether phpcs is enabled for PHP files or not.
	"phpcs.enable": true,

	// The minimum severity an error must have to be displayed.
	"phpcs.errorSeverity": 5,

	// Optional. The path to the phpcs executable.
	"phpcs.executablePath": null,

	// An array of glob patterns to skip files and folders that match when linting your documents.
	"phpcs.ignorePatterns": [],

	// Show sniff source codes in diagnostic messages.
	"phpcs.showSources": false,

	// Control whether warnings are displayed.
	"phpcs.showWarnings": true,

	// Optional. The name or path of the coding standard to use. Defaults to the one set in phpcs global config.
	"phpcs.standard": null,

	// Traces the communication between VSCode and the language server.
	"phpcs.trace.server": "off",

	// The minimum severity a warning must have to be displayed.
	"phpcs.warningSeverity": 5,

	// Passed as an `-Xmx` argument to the language server JVM process
	"concourse.ls.java.heap": "",

	// Overrides JAVA_HOME used for launching the language server JVM process
	"concourse.ls.java.home": "",

	// Additional 'user defined' VM args to pass to the language server process.
	"concourse.ls.java.vmargs": [],

	// User commands (shared between workspaces)
	"launcher.commands": [],

	// Command to launch terminal. Empty value means using default system terminal.
	"launcher.terminal": {},

	// Passed as an `-Xmx` argument to the language server JVM process
	"cloudfoundry-manifest.ls.java.heap": "",

	// Overrides JAVA_HOME used for launching the language server JVM process
	"cloudfoundry-manifest.ls.java.home": "",

	// Additional 'user defined' VM args to pass to the language server process.
	"cloudfoundry-manifest.ls.java.vmargs": [],

	// Specifies whether to enable PowerShell Pro Tools telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting
	"poshProTools.enableTelemetry": true,

	// Show welcome screen on upgrade.
	"poshProTools.showWelcomeOnUpgrade": true,

	// Specifies the visibility of the Module Explorer in the PowerShell Pro Tools Side Bar.
	"poshProTools.sideBar.moduleExplorerVisibility": true,

	// The port to start Universal Dashboard on when running the Preview Universal Dashboard command.
	"poshProTools.universalDashboardPreviewPort": 10000,

	// Enable/Disable Spring running Boot application live hints decorators in Java source code
	"boot-java.boot-hints.on": true,

	// Enable/Disable detecting changes of running Spring Boot applications
	"boot-java.change-detection.on": false,

	// Enable/Disable Spring running Boot application Code Lenses
	"boot-java.highlight-codelens.on": true,

	// Array of jmx urls pointing to remote spring boot applications to poll for live hover information. A typical url looks something like this: `service:jmx:rmi://localhost:9111/jndi/rmi://localhost:9111/jmxrmi`
	"boot-java.remote-apps": [],

	// Enable/Disable Java test sources files scanning
	"boot-java.scan-java-test-sources.on": false,

	// Enable/Disable Content Assist in Spring XML Config file editor
	"boot-java.support-spring-xml-config.content-assist": true,

	// Enable/Disable Hyperlinks in Spring XML Config file editor
	"boot-java.support-spring-xml-config.hyperlinks": true,

	// Enable/Disable Support for Spring XML Config files
	"boot-java.support-spring-xml-config.on": false,

	// Scan Spring XML in folders
	"boot-java.support-spring-xml-config.scan-folders-globs": "**/src/main/**",

	// Max JVM heap value, passed via -Xmx argument when launching spring-boot-language-server JVM process.
	"spring-boot.ls.java.heap": null,

	// Override JAVA_HOME used for launching the spring-boot-language-server JVM process.
	"spring-boot.ls.java.home": null,

	// Additional 'user defined' VM args to pass to the language server process.
	"spring-boot.ls.java.vmargs": [],

	// Choose to search and match the pure filename or the entire path
	"open-file-from-path.matchFileName": false,

	// Custom matching regExp to detect the file (default between quotes of double quotes)
	"open-file-from-path.regExp": "['|\"]([^'|\"]+)['|\"]",

	// Global search exclusion (global patterns)
	"open-file-from-path.searchExclusion": [
		"**/node_modules/**",
		"**/.vscode/**"
	],

	// Starting path. Can also be and sequence of strings separated by comma.
	"open-file-from-path.startingPath": "/",

	// Select an icon pack that enables specific icons.
	//  - angular: Icons for Angular.
	//  - angular_ngrx: Icons for Angular and ngrx.
	//  - react: Icons for React.
	//  - react_redux: Icons for React and Redux.
	//  - vue: Icons for Vue.
	//  - vue_vuex: Icons for Vue and Vuex.
	//  - none: No icon pack enabled.
	"material-icon-theme.activeIconPack": "angular",

	// Set custom file icon associations.
	"material-icon-theme.files.associations": {},

	// Set custom folder icon associations.
	"material-icon-theme.folders.associations": {},

	// Change the color of the folder icons.
	"material-icon-theme.folders.color": "#90a4ae",

	// Set the type for the folder icons.
	//  - specific: Select specific folder icons.
	//  - classic: Select classic folder icons.
	//  - none: No folder icons.
	"material-icon-theme.folders.theme": "specific",

	// Hide explorer arrows before folder.
	"material-icon-theme.hidesExplorerArrows": false,

	// Set custom language icon associations.
	"material-icon-theme.languages.associations": {},

	// Change the opacity of the icons.
	"material-icon-theme.opacity": 1,

	// Change the saturation of the icons.
	"material-icon-theme.saturation": 1,

	// Show restart notification.
	"material-icon-theme.showReloadMessage": true,

	// Show the update message after each update.
	"material-icon-theme.showUpdateMessage": false,

	// Show the welcome message after first installation.
	"material-icon-theme.showWelcomeMessage": true,

	// An array of extensions to exclude from the relative path url (Useful for used with Webpack or when importing files of mixed types)
	"relativePath.excludedExtensions": [
		".js"
	],

	// An array of glob keys to ignore when searching.
	"relativePath.ignore": [
		"**/node_modules/**",
		"**/*.dll",
		"**/obj/**",
		"**/objd/**"
	],

	// Excludes the extension from the relative path url (Useful for systemjs imports).
	"relativePath.removeExtension": false,

	// Removes the leading ./ character when the path is pointing to a parent folder.
	"relativePath.removeLeadingDot": true,

	// Browser Sync Configuration In JSON format
	// Please check: https://www.browsersync.io/docs/options
	"browserSync.config": {},

	// Activate extension only when PlatformIO-based project (with `platformio.ini`) is opened in workspace
	"platformio-ide.activateOnlyOnPlatformIOProject": false,

	// Automatically close Serial Port Monitor before uploading/testing
	"platformio-ide.autoCloseSerialMonitor": true,

	// Automatically rebuild Project IntelliSense Index when platformio.ini is changed or when new libraries are installed.
	"platformio-ide.autoRebuildAutocompleteIndex": true,

	// A build task (label) which is used by `Build` button in the bottom Toolbar and key bindings. Default is set to `PlatformIO: Build`.
	"platformio-ide.buildTask": null,

	// Custom PATH for `platformio` command. Paste here the result of `echo $PATH` (Unix) / `echo %PATH%` (Windows) command by typing into your system terminal if you prefer to use custom version of PlatformIO Core
	"platformio-ide.customPATH": null,

	// Disable showing PIO Home at startup
	"platformio-ide.disablePIOHomeStartup": false,

	// Disable PlatformIO Toolbar
	"platformio-ide.disableToolbar": false,

	// Force 'Upload and Monitor' task for `platformio-ide.upload` command
	"platformio-ide.forceUploadAndMonitor": false,

	// PIO Home server HTTP port (default is 0 and instructs finding a free port in range [8010..8100])
	"platformio-ide.pioHomeServerHttpPort": 0,

	// Time in milliseconds after which reopen Serial Port Monitor
	"platformio-ide.reopenSerialMonitorDelay": 0,

	// Update Terminal configuration with patched PATH environment
	"platformio-ide.updateTerminalPathConfiguration": true,

	// Use built-in PlatformIO Core
	"platformio-ide.useBuiltinPIOCore": true,

	// Use development version of PlatformIO Core
	"platformio-ide.useDevelopmentPIOCore": false,

	// Enable or disable the -fblocks command-line argument to Clang.
	"c-cpp-flylint.clang.blocks": true,

	// A .clang_complete file to use/fallback to if no config file is found in the current project
	"c-cpp-flylint.clang.configFile": ".clang_complete",

	// Preprocessor symbols to define.
	"c-cpp-flylint.clang.defines": null,

	// Enable or disable the Clang linter
	"c-cpp-flylint.clang.enable": true,

	// This option allows you to override the executable called when using Clang
	"c-cpp-flylint.clang.executable": "clang",

	// Extra verbatim command-line arguments to include on the Clang command-line invocation.
	"c-cpp-flylint.clang.extraArgs": null,

	// Paths to search for include files. They may be relative or absolute.
	"c-cpp-flylint.clang.includePaths": null,

	// An array of files to directly include with every processed file. Operates via utilizing Clang's -include parameter.
	"c-cpp-flylint.clang.includes": null,

	// Force Clang to check all files as the given language.
	"c-cpp-flylint.clang.language": null,

	// Enable or disable the -fms-extensions command-line argument to Clang.
	"c-cpp-flylint.clang.msExtensions": false,

	// Enable or disable the -fno-exceptions command-line argument to Clang.
	"c-cpp-flylint.clang.noExceptions": false,

	// Enable or disable the -fno-rtti command-line argument to Clang.
	"c-cpp-flylint.clang.noRtti": false,

	// Enable or disable the -pedantic command-line argument to Clang.
	"c-cpp-flylint.clang.pedantic": false,

	// Enable or disable the -pedantic-errors command-line argument to Clang.
	"c-cpp-flylint.clang.pedanticErrors": false,

	// Maps the severity levels of Clang to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.
	"c-cpp-flylint.clang.severityLevels": {
		"fatal": "Error",
		"error": "Error",
		"warning": "Warning",
		"note": "Information"
	},

	// The language standards to check against. For example, one or more of: posix, c89, c99, c11, c++03, c++11, c++14, c++17.
	"c-cpp-flylint.clang.standard": null,

	// The standard libraries to utilize. Operates via utilizing Clang's -stdlib parameter. Some macOS and BSD systems need to use a special library for C++11 support.
	"c-cpp-flylint.clang.standardLibs": null,

	// Preprocessor symbols to undefine.
	"c-cpp-flylint.clang.undefines": null,

	// Warnings to include in the analysis. Default is everything possible.
	"c-cpp-flylint.clang.warnings": [
		"all",
		"extra",
		"everything"
	],

	// A .clang_complete file to use/fallback to if no config file is found in the current project
	"c-cpp-flylint.cppcheck.configFile": ".clang_complete",

	// Preprocessor symbols to define.
	"c-cpp-flylint.cppcheck.defines": null,

	// Enable or disable the CppCheck linter
	"c-cpp-flylint.cppcheck.enable": true,

	// This option allows you to override the executable called when using CppCheck
	"c-cpp-flylint.cppcheck.executable": "cppcheck",

	// Controls whether CppCheck enumerates all possible configurations.
	"c-cpp-flylint.cppcheck.force": false,

	// Paths to search for include files. They may be relative or absolute.
	"c-cpp-flylint.cppcheck.includePaths": null,

	// Allow reporting even though analysis is inconclusive. May lead to false positives.
	"c-cpp-flylint.cppcheck.inconclusive": false,

	// Force CppCheck to check all files as the given language.
	"c-cpp-flylint.cppcheck.language": null,

	// The platform used for types and sizes.
	"c-cpp-flylint.cppcheck.platform": "native",

	// Maps the severity levels of CppCheck to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.
	"c-cpp-flylint.cppcheck.severityLevels": {
		"error": "Error",
		"warning": "Warning",
		"style": "Information",
		"performance": "Warning",
		"portability": "Warning",
		"information": "Information"
	},

	// The language standards to check against. Can be one or more of: posix, c89, c99, c11, c++03, c++11.
	"c-cpp-flylint.cppcheck.standard": null,

	// Warnings to suppress. Refer to the CppCheck documentation for what to supply here.
	"c-cpp-flylint.cppcheck.suppressions": [],

	// Preprocessor symbols to undefine.
	"c-cpp-flylint.cppcheck.undefines": null,

	// Whether to enable verbose output from CppCheck.
	"c-cpp-flylint.cppcheck.verbose": false,

	// Enable or disable verbose debug logging
	"c-cpp-flylint.debug": false,

	// Preprocessor symbols to define. Cascades to all analyzers unless overridden in one or more analyzers.
	"c-cpp-flylint.defines": [],

	// Enable or disable all linting
	"c-cpp-flylint.enable": true,

	// A list of paths within the workspace for which no analyses/diagnostics will be displayed.
	"c-cpp-flylint.excludeFromWorkspacePaths": [],

	// A .flexelint.rc file to use/fallback to if no config file is found in the current project
	"c-cpp-flylint.flexelint.configFile": ".flexelint.lnt",

	// Enable or disable the Flexelint linter
	"c-cpp-flylint.flexelint.enable": true,

	// This option allows you to override the executable called when using Flexelint
	"c-cpp-flylint.flexelint.executable": "flexelint",

	// A list of arguments passed to Flexelint when scanning header source files
	"c-cpp-flylint.flexelint.headerArgs": [
		"-e749",
		"-e750",
		"-e751",
		"-e752",
		"-e753",
		"-e754",
		"-e1526",
		"-e1714"
	],

	// Maps the severity levels of Flexelint to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.
	"c-cpp-flylint.flexelint.severityLevels": {
		"Error": "Error",
		"Warning": "Warning",
		"Info": "Information",
		"Note": "Hint"
	},

	// Ignore when the extension can't parse a line of the linter.
	"c-cpp-flylint.ignoreParseErrors": false,

	// Paths to search for include files. They may be relative or absolute. Cascades to all analyzers unless overridden in one or more analyzers.
	"c-cpp-flylint.includePaths": [],

	// Force to check all files as the given language. Cascades to all analyzers unless overridden in one or more analyzers.
	"c-cpp-flylint.language": "c++",

	// Run the linter upon typing (onType), when possible, or on save (onSave).
	"c-cpp-flylint.run": "onSave",

	// The language standards to check against. Cascades to all analyzers unless overridden in one or more analyzers.
	"c-cpp-flylint.standard": [
		"c11",
		"c++11"
	],

	// Preprocessor symbols to undefine. Cascades to all analyzers unless overridden in one or more analyzers.
	"c-cpp-flylint.undefines": [],

	// Language-specific regular expressions for capturing template literals or other multi-line strings for editing. Each regexp must be in an escaped string form and must provide exactly three capture groups without gaps: begin, content, end. JavaScript and TypeScript default to language parsing instead of regexp matching, so only define javascript and typescript when you have a specific need.
	"templateLiteralEditor.regexes": {
		"coffeescript": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"cpp": "(R\"\\()([\\s\\S]*?)(\\)\")",
		"csharp": "(@\")([^\"]*(?:\"\"[^\"]*)*)(\")",
		"d": "(`)([\\s\\S]*?)(`)",
		"dart": "(''')([\\s\\S]*?)(''')",
		"eiffel": "(\"\\[)([\\s\\S]*?)(\\]\")",
		"elixir": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"elm": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"erlang": "(\")([^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*)(\")",
		"fsharp": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"go": "(`)([\\s\\S]*?)(`)",
		"groovy": "(''')([\\s\\S]*?)(''')",
		"html": "(`)([\\s\\S]*?)(`)",
		"javascriptreact": "(`)([\\s\\S]*?)(`)",
		"julia": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"kotlin": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"lua": "(\\[\\[)([\\s\\S]*?)(\\]\\])",
		"markdown": "(```.*)([\\s\\S]*?)(```)",
		"nim": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"objective-cpp": "(R\"\\()([\\s\\S]*?)(\\)\")",
		"ocaml": "(\")([^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*)(\")",
		"perl": "(<<['\"]?EOF['\"]?)([\\s\\S]*?)(EOF)",
		"perl6": "(:(to|heredoc)(:c)?[[/\"]EOF[[/\"];)([\\s\\S]*?)(EOF)",
		"php": "(<<<['\"]?EOD['\"]?)([\\s\\S]*?)(EOD)",
		"powershell": "(@\")([\\s\\S]*?)(\"@)",
		"python": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"r": "(')([^'\\\\]*(?:\\\\[\\s\\S][^'\\\\]*)*)(')",
		"racket": "(#<<EOF)([\\s\\S]*?)(EOF)",
		"razor": "(@\")([\\s\\S]*?)(\")",
		"ruby": "(<<EOF-?)([\\s\\S]*?)(EOF)",
		"rust": "(r#\")([\\s\\S]*?)(\"#)",
		"scala": "(\"\"\")([\\s\\S]*?)(\"\"\")",
		"shellscript": "(<< ?['\"]?EOF['\"]?)([\\s\\S]*?)(EOF)",
		"typescriptreact": "(`)([\\s\\S]*?)(`)",
		"vb": "(\")([^\"]*(?:\"\"[^\"]*)*)(\")",
		"vue": "(`)([\\s\\S]*?)(`)"
	},

	// Specifies your Visual Studio Team Services account name ([account].visualstudio.com).
	"vsts.account": "",

	// Allows to group status of the several build definitions by IDs (e.g. '1,2,3').
	"vsts.definitionsGroup": "",

	// Allows to provide name for grouped build definitions.
	"vsts.definitionsGroupName": "",

	// Specifies the password or Personal Access Token to use for accessing VSTS Build information on the account.
	"vsts.password": "",

	// Specifies the VSTS project to look for builds in.
	"vsts.project": "",

	// Specifies a username to use for accessing VSTS Build information on the account. Not needed if you use a personal acceess token.
	"vsts.username": "",

	// Display the GitExtensions commands in the editor contextual menu
	"gitExtensions.editor.contextmenu": true,

	// Display the GitExtensions commands in the editor title contextual menu
	"gitExtensions.editor.title.contextmenu": true,

	// Path toward the GitExtensions executable (if GitExtensions is not already in the PATH env variable)
	"gitExtensions.exe.path": "",

	// Display the GitExtensions commands in the explorer contextual menu
	"gitExtensions.explorer.contextmenu": true,

	// Display the GitExtensions commands in the SCM title menu
	"gitExtensions.scm.title.menu": true,

	// Display the 'Browse in GitExtensions' icon in the status bar
	"gitExtensions.statusbar.browse": true,

	// Display the 'View file history in GitExtensions' icon in the status bar
	"gitExtensions.statusbar.filehistory": true,

	// show icon for beautify active file
	"Beautify active file": true,

	// show icon for nagivate back
	"Navigate back": true,

	// show icon for nagivate forward
	"Navigate forward": true,

	// show icon for open files list
	"Open files list": true,

	// show icon for save active file
	"Save active file": false,

	// show icon for switch header/source
	"Switch header source": false,

	// show icon for toggle activity bar
	"Toggle activity bar": false,

	// show icon for toggle render whitespace
	"Toggle render whitespace": false,

	// show icon for toggle terminal
	"Toggle terminal": true,

	// Extension is disabled when set to true
	"tsimporter.disabled": false,

	// Specifies wether to use double quotes
	"tsimporter.doubleQuotes": false,

	// If false, no semicolon will be written
	"tsimporter.emitSemicolon": true,

	// Glob for files to exclude from watch and scan, e.g ./out/**. Defaults to nothing
	"tsimporter.filesToExclude": [],

	// Glob for files to watch and scan, e.g ./src/** ./src/app/**/*.ts. Defaults to [**/*.ts,**/*.tsx]
	"tsimporter.filesToScan": [
		"**/*.ts",
		"**/*.tsx",
		"**/*.vue"
	],

	// If true, the code completion items will be sorted back to the build in completion items
	"tsimporter.lowImportance": false,

	// Disables the status bar of this extension
	"tsimporter.noStatusBar": false,

	// When true shorter relative imports will be be prefered instead of absolute imports
	"tsimporter.preferRelative": false,

	// File Extensions to remove. default is '.d.ts,.ts,.tsx'
	"tsimporter.removeFileExtensions": ".d.ts,.ts,.tsx",

	// Disables the extension
	"tsimporter.showNotifications": false,

	// Insert spaces between the import braces. ( import {test} from 'test' vs. import { test } from 'test' )
	"tsimporter.spaceBetweenBraces": true,

	// tsconfig name to search for
	"tsimporter.tsconfigName": "tsconfig.json",

	// Font color for the linter errors in the statusbar
	"statusbarerror.color.error": "#f41f1f",

	// Font color for the linter hints in the statusbar
	"statusbarerror.color.hint": "#35b1f4",

	// Font color for the linter information in the statusbar
	"statusbarerror.color.info": "#41e086",

	// Font color for the linter warnings in the statusbar
	"statusbarerror.color.warning": "#f4b81f",

	// Show a gutter icon for errors
	"statusbarerror.gutter.error.show": true,

	// Show a gutter icon for hints
	"statusbarerror.gutter.hint.show": true,

	// Show a gutter icon for information
	"statusbarerror.gutter.info.show": true,

	// Show a gutter icon for warnings
	"statusbarerror.gutter.warning.show": true,

	// Unicode icon for linter errors in the statusbar
	"statusbarerror.icon.error": "❌",

	// Unicode icon for linter hints in the statusbar
	"statusbarerror.icon.hint": "⭐️",

	// Unicode icon for linter info in the statusbar
	"statusbarerror.icon.info": "❓",

	// Unicode icon for linter warnings in the statusbar
	"statusbarerror.icon.warning": "⭕️",

	// Show the linter message in the statusbar
	"statusbarerror.statusbar.show": true,

	// Background color of the line when an error is found
	"statusbarerror.wholeLine.errorColor": "#d32f2f88",

	// Font color of the error line message
	"statusbarerror.wholeLine.errorFontColor": "#efefef",

	// Truncate whole line messages at this length (0 will not truncate)
	"statusbarerror.wholeLine.length": 0,

	// Show the linter message on the line
	"statusbarerror.wholeLine.show": false,

	// Background color of the line when a warning is found
	"statusbarerror.wholeLine.warningColor": "#ff980088",

	// Font color of the warning line message
	"statusbarerror.wholeLine.warningFontColor": "#000000",

	// Absolute path to the hh_client executable. This can be left empty if hh_client is already in your environment $PATH.
	"hack.clientPath": "hh_client",

	// Enable calculation of Hack type coverage percentage for every file and display in status bar.
	"hack.enableCoverageCheck": false,

	// Optional list of arguments passed to hhast-lint executable
	"hack.hhastArgs": [],

	// Whether to lint the entire project or just the open files
	//  - whole-project: Lint the entire project and show all errors
	//  - open-files: Only lint the currently open files
	"hack.hhastLintMode": null,

	// Use an alternate hhast-lint path. Can be abolute or relative to workspace root.
	"hack.hhastPath": "vendor/bin/hhast-lint",

	// Workspaces where whether or not to run custom Hack executables (e.g. hhast-lint) has been remembered
	"hack.rememberedWorkspaces": {},

	// Name of the local Docker container to run the language tools in
	"hack.remote.docker.containerName": "",

	// Run the Hack language tools on an external host
	"hack.remote.enabled": false,

	// Additional command line options to pass when establishing the SSH connection
	"hack.remote.ssh.flags": [],

	// Address for the remote development server to connect to (in the format `[user@]hostname`)
	"hack.remote.ssh.host": "",

	// The remote connection method
	//  - ssh: Run typechecker on a remote server via SSH
	//  - docker: Run typechecker in a Docker container
	"hack.remote.type": "",

	// Absolute location of workspace root in the remote file system
	"hack.remote.workspacePath": "",

	// Traces the communication between VS Code and the Hack & HHAST language servers
	"hack.trace.server": "off",

	// Enable linting (needs HHAST library set up and configured in project)
	"hack.useHhast": true,

	// Start hh_client in Language Server mode. Only works for HHVM version 3.23 and above.
	"hack.useLanguageServer": true,

	// Use hack.remote.workspacePath instead
	// Absolute path to the workspace root directory. This will be the VS Code workspace root by default, but can be changed if the project is in a subdirectory or mounted in a Docker container.
	"hack.workspaceRootPath": null,

	// Complete connection configuration for your MongoDB.
	"mongoRunner": {},

	// Activate TDD mode when workspace is opened
	"nodeTdd.activateOnStartup": true,

	// Run tests when TDD mode is activated
	"nodeTdd.buildOnActivation": false,

	// Run tests when matching files are created
	"nodeTdd.buildOnCreate": false,

	// Run tests when matching files are deleted
	"nodeTdd.buildOnDelete": false,

	// The coverage threshold percentage, used to colour-code the coverage
	"nodeTdd.coverageThreshold": null,

	// The glob pattern for files to watch, relative to the workspace root
	"nodeTdd.glob": "{src,test}/**/*.{js,ts,jsx,tsx}",

	// Minimise status bar clutter
	"nodeTdd.minimal": false,

	// The test reporter used
	"nodeTdd.reporter": null,

	// Show the average test coverage if reported (experimental)
	"nodeTdd.showCoverage": false,

	// The npm script to run tests
	"nodeTdd.testScript": "test",

	// Show build status dialogs
	"nodeTdd.verbose": false,

	// The default template to use when exporting files
	"js-index.defaultTemplate": "export {default as ${variable}} from ${relpath};",

	// The quote style to use when quoting literals
	"js-index.quotes": "double",

	// Php: default property visibility
	"class-helper.php.property.visibility": "public",

	// TypeScript: prefix method with the type declaration
	"class-helper.ts.method.prefixType": true,

	// TypeScript: prefix method and properties with public or private keywords
	"class-helper.ts.prefixVisibility": true,

	// TypeScript: default property visibility
	"class-helper.ts.property.visibility": "public",

	// The absolute filepath where the Puppet Editor Service will output the debugging log. By default no logfile is generated
	"puppet.editorService.debugFilePath": "",

	// The name of the image with tag that contains the Puppet Language server. For example: linguapupuli/puppet-language-server:latest
	"puppet.editorService.docker.imageName": "linguapupuli/puppet-language-server:latest",

	// Enable/disable advanced Puppet Language Features
	"puppet.editorService.enable": true,

	// An array of strings of experimental features to enable in the Puppet Editor Service
	"puppet.editorService.featureFlags": [],

	// Set the logging verbosity level for the Puppet Editor Service, with Debug producing the most output and Error producing the least
	"puppet.editorService.loglevel": "normal",

	// **DEPRECATED** Please use puppet.editorService.puppet.modulePath instead
	"puppet.editorService.modulePath": null,

	// The protocol used to communicate with the Puppet Editor Service.  By default the local STDIO protocol is used
	"puppet.editorService.protocol": "stdio",

	// The Puppet configuration directory. See https://puppet.com/docs/puppet/latest/dirs_confdir.html for more information
	"puppet.editorService.puppet.confdir": "",

	// The Puppet environment to use. See https://puppet.com/docs/puppet/latest/config_print.html#environments for more information
	"puppet.editorService.puppet.environment": "",

	// Additional module paths to use when starting the Editor Services. On Windows this is delimited with a semicolon, and on all other platforms, with a colon. For example C:\Path1;C:\Path2
	"puppet.editorService.puppet.modulePath": "",

	// The Puppet cache directory. See https://puppet.com/docs/puppet/latest/dirs_vardir.html for more information
	"puppet.editorService.puppet.vardir": "",

	// The version of Puppet to use. For example '5.4.0'. This is generally only applicable when using the PDK installation type. If Puppet Editor Services is unable to use this version, it will default to the latest available version of Puppet.
	"puppet.editorService.puppet.version": "",

	// The IP address or hostname of the remote Puppet Editor Service to connect to, for example 'computer.domain' or '192.168.0.1'. Only applicable when the editorService.protocol is set to tcp
	"puppet.editorService.tcp.address": "",

	// The TCP Port of the remote Puppet Editor Service to connect to. Only applicable when the editorService.protocol is set to tcp
	"puppet.editorService.tcp.port": 0,

	// The timeout to connect to the Puppet Editor Service
	"puppet.editorService.timeout": 10,

	// Enable/disable the Puppet document formatter
	"puppet.format.enable": true,

	// The fully qualified path to the Puppet install directory. This can be a PDK or Puppet Agent installation. For example: 'C:\Program Files\Puppet Labs\Puppet' or '/opt/puppetlabs/puppet'. If this is not set the extension will attempt to detect the installation directory
	"puppet.installDirectory": null,

	// The type of Puppet installation. Either the Puppet Development Kit (pdk) or the Puppet Agent (agent). Choose 'auto' to have the extension detect which to use automatically based on default install locations
	"puppet.installType": "auto",

	// **DEPRECATED** Please use puppet.editorService.loglevel instead
	"puppet.languageclient.minimumUserLogLevel": null,

	// **DEPRECATED** Please use puppet.editorService.protocol instead
	"puppet.languageclient.protocol": null,

	// **DEPRECATED** Please use puppet.editorService.tcp.address instead
	"puppet.languageserver.address": null,

	// **DEPRECATED** Please use puppet.editorService.debugFilePath instead
	"puppet.languageserver.debugFilePath": null,

	// **DEPRECATED** Please use puppet.editorService.featureFlags with 'filecache' instead
	"puppet.languageserver.filecache.enable": null,

	// **DEPRECATED** Please use puppet.editorService.tcp.port instead
	"puppet.languageserver.port": null,

	// **DEPRECATED** Please use puppet.editorService.timeout instead
	"puppet.languageserver.timeout": null,

	// The type of notification used when a node graph is being generated. Default value of messagebox
	"puppet.notification.nodeGraph": "messagebox",

	// The type of notification used when a running Puppet Resouce. Default value of messagebox
	"puppet.notification.puppetResource": "messagebox",

	// **DEPRECATED** Please use puppet.installDirectory instead
	"puppet.puppetAgentDir": null,

	// Enable/disable the PDK New Module icon in the Editor Title Bar
	"puppet.titleBar.pdkNewModule.enable": true,

	// Path of a custom browser executable (eg. `C:\Program Files\Browser\Browser.exe`)
	"open-php-html-js-in-browser.customBrowserPath": "",

	// Custom url to open in browser (eg. `http://localhost:8888/${relativeDirnameDocumentRoot}/${fileBasename}`)
	"open-php-html-js-in-browser.customUrlToOpen": "http://localhost:8888/${relativeDirnameDocumentRoot}/${fileBasename}",

	// Base directory of your pages to serve from `http://localhost` domain (eg. `C:\xampp\htdocs\`, `/var/www/`, `etc.`)
	"open-php-html-js-in-browser.documentRootFolder": "",

	// Remember last browser selection. Uncheck and select `Ask always...` option if you want to always choose browser to launch
	"open-php-html-js-in-browser.rememberBrowserSelection": true,

	// Browser to open (`Chrome`, `Firefox`, ...)
	"open-php-html-js-in-browser.selectedBrowser": "",

	// Show the button `Open In Browser` in the vscode status bar
	"open-php-html-js-in-browser.showStatusBarItem": true,

	// Url scheme to open in browser (http://localhost or file:/// or custom)
	"open-php-html-js-in-browser.urlToOpen": "",

	// Are risky fixers allowed
	"php-cs-fixer.allowRisky": false,

	// when press down the key } auto fix the code in the brackets {}
	"php-cs-fixer.autoFixByBracket": true,

	// when press down the key ; auto fix the code at the current line
	"php-cs-fixer.autoFixBySemicolon": false,

	// config file (.php_cs, .php_cs.dist or custom defined) can place in workspace root folder or .vscode folder or any other folder (full path)
	"php-cs-fixer.config": ".php_cs;.php_cs.dist",

	// register php document formatting provider, right mouse-click context menu, show as 'Format Document', after changing this option you should restart your editor.
	"php-cs-fixer.documentFormattingProvider": true,

	// --path-mode=intersection has a conflict with auto format on save, so you can use `exclude option` instead of. glob strings.
	"php-cs-fixer.exclude": [],

	// Points to the php-cs-fixer exectuable, eg: win: php-cs-fixer.bat, other: php-cs-fixer; or points to php-cs-fixer.phar path, eg: /full/path/of/php-cs-fixer.phar
	"php-cs-fixer.executablePath": "php-cs-fixer",

	// Points to the php-cs-fixer exectuable on Windows environments, eg: php-cs-fixer.bat. Useful if you are sharing settings among different environments.
	"php-cs-fixer.executablePathWindows": "",

	// whether formatting html at the same time
	"php-cs-fixer.formatHtml": false,

	// last automatically download php-cs-fixer time, if you want to disable auto download for latest php-cs-fixer.phar set to 0. just for automatically installed user.
	"php-cs-fixer.lastDownload": 1,

	// Execute PHP CS Fixer on save
	"php-cs-fixer.onsave": false,

	// --path-mode can be override or intersection, intersection only works on explorer context menu action, not works for current focused file. detail see:https://github.com/FriendsOfPHP/PHP-CS-Fixer#usage
	"php-cs-fixer.pathMode": "override",

	// PHP CS Fixer level setting (@PSR1, @PSR2, @Symfony). Support json formatted value. @see: https://github.com/FriendsOfPHP/PHP-CS-Fixer
	"php-cs-fixer.rules": "@PSR2",

	// The extensions of the CSS files, where you can `go to` and `peek`.
	"CSSNavigation.activeCSSFileExtensions": [
		"css",
		"scss",
		"less"
	],

	// The extensions of the HTML files, in where you can `go to definition`.
	"CSSNavigation.activeHTMLFileExtensions": [
		"html",
		"ejs",
		"erb",
		"php",
		"hbs",
		"js",
		"ts",
		"jsx",
		"tsx",
		"vue",
		"twig"
	],

	// When set to `true`, also search CSS definitions in <style> tag for current document.
	"CSSNavigation.alsoSearchDefinitionsInStyleTag": false,

	// Enable searching CSS selector references in HTML files.
	"CSSNavigation.enableFindAllReferences": true,

	// Enable `go to definition` by clicking `F12` in HTML files.
	"CSSNavigation.enableGoToDefinition": true,

	// Enable auto complete for id and class name in HTML files.
	"CSSNavigation.enableIdAndClassNameCompletion": true,

	// Enable searching class and id name across workspace by clicking `Ctrl + T`.
	"CSSNavigation.enableWorkspaceSymbols": true,

	// A glob pattern, defines paths to exclude when searching for CSS definitions.
	"CSSNavigation.excludeGlobPatterns": [
		"**/node_modules/**",
		"**/bower_components/**",
		"**/vendor/**",
		"**/coverage/**"
	],

	// When `true` by default, custom element definitions in CSS will be ignored, such that it will go to it's defined place directly.
	"CSSNavigation.ignoreCustomElement": true,

	// When `true` by default, will ignore files and directories list in `.gitignore` and `.npmignore` when looking for css definitions.
	"CSSNavigation.ignoreFilesInGitIgnore": true,

	// When `true` by default, e.g.: If 'the-name.scss and 'the-name.css', which share the same basename, are exist in the same directory, the 'the-name.css' will be skipped. If you prefer compiling Scss or Less file to the same name CSS file, this would be very helpful.
	"CSSNavigation.ignoreSameNameCSSFile": true,

	// When `false` by default, CSS files are loaded only when required, that's why you need to wait for a while when searching for definitions at the first time. By set it to `true`, CSS files are loaded immediately after you save or project startup. If you are a heavy user in CSS definition searching, just check it.
	"CSSNavigation.preloadCSSFiles": false,

	// When `false` by default, only search CSS definition in current workspace folder. If your workspace folder requires css references from another workspace folder in current worksapce, you should set this to `true`.
	"CSSNavigation.searchAcrossWorkspaceFolders": false,

	// Install @types for "dependencies" to the "devDevependencies" section of package.json
	"types-autoinstaller.saveAsDevDependency": false,

	// Use yarn to instead of npm
	"types-autoinstaller.useYarn": false,

	// Use case sensitive comparison when performing filter operations.
	"textPowerTools.caseSensitiveFiltering": false,

	// Default pad string for the 'Pad start' and 'Pad end' functions.
	"textPowerTools.defaultPadString": "",

	// Insert uppercase GUIDs when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions.
	"textPowerTools.insertUppercaseGuids": false,

	// Insert uppercase hex numbers when using the 'Insert hex number' and other numeric functions.
	"textPowerTools.insertUppercaseHexNumbers": true,

	// By default all colors in a file are colorized and updated when needed, with this feature only what you see will be colorized/updated. ⚠️ This feature is still in beta, please report any bug [here](https://github.com/KamiKillertO/vscode-colorize/issues). ⚠️ A reload is required after any change to this setting.
	"colorize.colorize_only_visible_beta": false,

	// You can specified the type of color that should be colorized by the extension.
	// Available colors are:
	// * `HEXA`: for hexadecimal colors: `#RGB`, `#RGBA`, `#RRGGBB`, `#RRGGBBAA`, `0xRGB`, `0xRGBA`, `0xRRGGBB` or `0xRRGGBBAA`
	// * `ARGB`: for argb colors: `#RGB`, `#ARGB`, `#RRGGBB` or `#AARRGGBB`
	// * `RGB`: for rgb colors: `rgb(r,g,b)` or `rgba(r,g,b,a)`
	// * `HSL`: for HSL colors: `hsl(h,s,l)` or `hsla(h,s,l,a)`
	// * `BROWSERS_COLORS`: for native browser's colors like `white`, `red`, `blue`...
	"colorize.colorized_colors": [
		"BROWSERS_COLORS",
		"HEXA",
		"RGB",
		"HSL"
	],

	// You can specified the type of variables that should be colorized by the extension.
	"colorize.colorized_variables": [
		"CSS"
	],

	// When vscode starts, Colorize fetch all files targeted by the settings `colorize.include`, `colorize.languages` and `colorize.files_extensions` but not the ones targeted by the setting `colorize.exclude`. When the fetch is done, colorize open and parse all files searching for variables. That way variables will be colorized in every files. _⚠️ this setting can slown down your editor a little at opening time, read this [issue](https://github.com/KamiKillertO/vscode-colorize/issues/174) to learn more about it._
	"colorize.enable_search_variables": true,

	// Configure glob patterns for excluding files and folders. Colorize will not colorized colors in these files and folders and it'll also not search for variables inside. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"colorize.exclude": [
		"**/.git",
		"**/.svn",
		"**/.hg",
		"**/CVS",
		"**/.DS_Store",
		"**/.git",
		"**/node_modules",
		"**/bower_components",
		"**/tmp",
		"**/dist",
		"**/tests"
	],

	// [deprecated] Specified a list of files extension that should be colorized. This setting is deprecated and will be removed soon, you should use the setting `colorize.include` instead.
	"colorize.files_extensions": [],

	// Hide colors for the current line. Set to `false` to turn it off
	"colorize.hide_current_line_decorations": true,

	// Ignore the warning for `colorize.files_extensions`.
	"colorize.ignore_files_extensions_deprecation": false,

	// Configure glob patterns for including files and folders. By default Colorize is enable for files matching one the languages defined in the `colorize.languages` config, with this config you can enable colorize for other files or folders. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"colorize.include": [],

	// Configure a list of languages that should be colorized. You can learn about languages at https://code.visualstudio.com/docs/languages/overview.
	"colorize.languages": [
		"css",
		"sass",
		"scss",
		"less",
		"postcss",
		"sss",
		"stylus",
		"xml",
		"svg"
	],

	// The default remote source name used by GitLink extension, while the repo contains multiple remote sources.
	"gitlink.defaultRemote": "",

	// Append Rules Directories
	"cfnLint.appendRules": [],

	// Ignore Rules
	"cfnLint.ignoreRules": [],

	// (Optional) Path to an override specfile json file
	"cfnLint.overrideSpecPath": "",

	// Path to cfn-lint
	"cfnLint.path": "cfn-lint",

	// Changes systems default explorer to a specific one. Based on https://github.com/pwnall/node-open
	"view-in-browser.customBrowser": "",

	// Try to repair an hex file each times it's saved.
	"hex-fmt.repairOnSave": true,

	// 
	"funcList": {
		"doubleSpacing": false,
		"filters": [
			{
				"extensions": [
					".c",
					".h"
				],
				"native": "/^[a-z]+\\s+\\w+\\(/mgi",
				"display": "/\\S* +(\\w+)/1",
				"sort": 0
			},
			{
				"extensions": [
					".cpp",
					".hpp"
				],
				"native": "/(?:^\\w+\\s+|^)\\w+[:]*\\w+\\(/mgi",
				"display": "/[\\S ]+(\\w+)/",
				"sort": 0
			},
			{
				"extensions": [
					".ts",
					".php"
				],
				"native": "/(?:^|\\s)function\\s+\\w+\\(/mg",
				"display": "/\\s*function\\s+(\\w+)/1",
				"sort": 0
			},
			{
				"extensions": [
					".asm"
				],
				"native": "/^\\w+:\\s*$/mg",
				"display": "/\\w+/",
				"sort": 0
			},
			{
				"extensions": [
					".ps1"
				],
				"native": "/function\\s+\\w+-?\\w*\\s*{/img",
				"display": "/function\\s+(\\w+-?\\w*)/1i",
				"sort": 0
			}
		]
	},

	// Whether or not telemetry will be enabled fot the MSBuild Tools extension.
	"qub-msbuild.telemetry.enable": true,

	// The path to the file where telemetry will be logged to, if this value is provided.
	"qub-msbuild.telemetry.file": "",

	// Whether or not anonymous telemetry will be logged to Qub's remote telemetry server.
	"qub-msbuild.telemetry.remote": true,

	// Array of glob patterns for blackboxed resources
	"typelens.blackbox": [],

	// Localization for the case where the only usages are from blackboxed sources
	"typelens.blackboxTitle": "<< called from blackbox >>",

	// A flag which indicates whether the initiating reference should be decorated if it is unsed
	"typelens.decorateunused": true,

	// A flag which indicates whether the initiating reference should be excluded
	"typelens.excludeself": true,

	// Symbol names to be ignored
	"typelens.ignorelist": [
		"ngOnChanges",
		"ngOnInit",
		"ngDoCheck",
		"ngAfterContentInit",
		"ngAfterContentChecked",
		"ngAfterViewInit",
		"ngAfterViewChecked",
		"ngOnDestroy"
	],

	// Localization for the case when there are no references found
	"typelens.noreferences": "no references found for {0}",

	// Localization for the plural case
	"typelens.plural": "{0} references",

	// A flag which indicates whether to show references for classes
	"typelens.showReferencesForClasses": true,

	// A flag which indicates whether to show references for functions
	"typelens.showReferencesForFunctions": true,

	// A flag which indicates whether to show references for interfaces
	"typelens.showReferencesForInterfaces": true,

	// A flag which indicates whether to show references for methods
	"typelens.showReferencesForMethods": true,

	// A flag which indicates whether to show references for properties
	"typelens.showReferencesForProperties": true,

	// Localization for the singular case
	"typelens.singular": "{0} reference",

	// Languages where the references should not be shown
	"typelens.skiplanguages": [
		"csharp"
	],

	// Color for unused references
	"typelens.unusedcolor": "#999",

	// If true, attributes will be aligned with each other during formatting. If false, attributes will be indented one additional indent further than the tag's left angle bracket.
	"qub-xml-vscode.formatOptions.alignAttributes": false,

	// If true, elements with no text content (newlines are considered text elements) or child elements will be collapsed down to an empty element (<a></a> -> <a/>) when the document is formatted.
	"qub-xml-vscode.formatOptions.collapseEmptyElements": true,

	// Whether or not telemetry will be enabled for the XML Tools extension.
	"qub-xml-vscode.telemetry.enabled": true,

	// The default color to be used in svg previews
	"gutterpreview.currentColorForSVG": "white",

	// The maximum height of the image preview
	"gutterpreview.imagePreviewMaxHeight": "100",

	// Specify path mapping to be computed relative to project root.
	"gutterpreview.paths": {},

	// A flag which indicates whether the image preview should be shown on the gutter
	"gutterpreview.showImagePreviewOnGutter": true,

	// A flag which indicates whether to underline recognized URLs
	"gutterpreview.showUnderline": true,

	// Additional folder to consider when resolving relative urls
	"gutterpreview.sourceFolder": "src",

	// Convert stringified booleans into booleans, and back.
	"quicktype.inferBooleanStrings": true,

	// Use date-time types for strings that look like date-times.
	"quicktype.inferDateTimes": true,

	// Infer enums when there aren't many different string values.
	"quicktype.inferEnums": true,

	// Convert stringified integers into integers, and back.
	"quicktype.inferIntegerStrings": true,

	// Infer maps when object keys look like map keys.
	"quicktype.inferMaps": true,

	// Use UUID types for strings that look like UUIDs.
	"quicktype.inferUuids": true,

	// Produce just types, or (de-)serialization code as well?
	"quicktype.justTypes": true,

	// Controls which language backend to use: scry, custom, or default
	"crystal-ide.backend": "default",

	// For a custom backend, the command to execute when launching the server
	"crystal-ide.customCommand": "crystal",

	// For a custom backend, the arguments passed to the command
	"crystal-ide.customCommandArgs": [
		"run",
		"src/scry"
	],

	// How much logging is done by the backend: debug, info, warn, error, fatal
	"crystal-ide.logLevel": "info",

	// Controls the maximum number of problems produced by the server.
	"crystal-ide.maxNumberOfProblems": 100,

	// Permanently disable the native matchBrackets
	"subtleBrackets.disableNative": true,

	// Pairs of matching brackets
	"subtleBrackets.pairs": [
		{
			"open": "(",
			"close": ")"
		},
		{
			"open": "[",
			"close": "]"
		},
		{
			"open": "{",
			"close": "}"
		}
	],

	// If true, the document will be parsed so brackets within strings don't trigger the decoration
	"subtleBrackets.parse": true,

	// Default style for matching brackets
	"subtleBrackets.style": {
		"borderWidth": "1px",
		"borderStyle": "none none solid none"
	},

	// 
	"dashboard.customProjectCardBackground": null,

	// 
	"dashboard.customProjectNameColor": null,

	// 
	"dashboard.customProjectPathColor": null,

	// Absolute path of temporary file for editing the dashboard manually.
	"dashboard.customProjectsTempFileLocation": null,

	// 
	"dashboard.displayProjectPath": true,

	// Bitbucket server URL
	"bitbucket-pull-requests.serverURL": "https://bitbucket.org",

	// List of branches to get build status
	"travisClient.branches": [
		"master"
	],

	// Interval for auto refresh time in minutes
	"travisClient.interval": 5,

	// Travis owner for the projects
	"travisClient.owner": "",

	// Account type community or enterprise
	"travisClient.pro": false,

	// The path to Merge tool. 
	// replace: %E = EditorFile, %C = ClipboardFile, %M = MergedOutput 
	// ex: "\"C:\\Program Files\\KDiff3\\KDiff3.exe\" %E %C -o %M" 
	"merge-n-paste.pathToMergeTool": "",

	// Reflect source File to editor. 
	// replace: %E = EditorFile, %C = ClipboardFile, %M = MergedOutput 
	// ex: "Reflect clipboard text" = %C
	"merge-n-paste.reflectFile": "%M",

	// Auto strip module extensions
	"node-module-intellisense.autoStripExtensions": [
		".js",
		".jsx",
		".ts",
		".d.ts",
		".tsx"
	],

	// Module Paths to scan. Use ${workspaceRoot} for workspace lookup.
	"node-module-intellisense.modulePaths": [],

	// Scans builtin modules as well
	"node-module-intellisense.scanBuiltinModules": true,

	// Scans devDependencies as well
	"node-module-intellisense.scanDevDependencies": true,

	// Scans file modules as well
	"node-module-intellisense.scanFileModules": true,

	// Clears problems (linter warnings/errors) for a document when it is closed.
	"cssLanguageClient.clearProblemsOnDocumentClose": false,

	// Controls the maximum number of problems produced by the server.
	"cssLanguageClient.maxNumberOfProblems": 100,

	// Sphinx's HTML output folder. Defaults to 'restructuredtext.confPath'/_build/html This is an absolute path, and you can use ${workspaceFolder} to represent the workspace root folder.
	"restructuredtext.builtDocumentationPath": null,

	// Extensions that might lead to conflicts.
	"restructuredtext.conflictingExtensions": [
		"tht13.rst-vscode"
	],

	// Sphinx's configuration folder containing conf.py. Set this option if the path is not found automatically. This is an absolute path, and you can use ${workspaceFolder} to represent the workspace root folder.
	"restructuredtext.confPath": null,

	// Flag to enable experimental features.
	"restructuredtext.experimental": false,

	// Flag to disable language server based IntelliSense if critical issues happen.
	"restructuredtext.languageServer.disabled": true,

	// Controls the maximum number of problems produced by the server.
	"restructuredtext.languageServer.maxNumberOfProblems": 100,

	// Supported platforms of IntelliSense.
	"restructuredtext.languageServer.supportedPlatforms": [
		"Ubuntu Linux",
		"Fedora",
		"Debian",
		"Linux Mint",
		"SUSE Linux",
		"Alpine Linux",
		"RHEL",
		"Centos"
	],

	// Traces the communication between VSCode and the server.
	"restructuredtext.languageServer.trace.server": "off",

	// Flag to disable linter if critical issues happen.
	"restructuredtext.linter.disabled": false,

	// Points to the doc8 executable.
	"restructuredtext.linter.executablePath": null,

	// Extra arguments to doc8.
	"restructuredtext.linter.extraArgs": [],

	// Whether the linter is run on save or on type or disabled.
	"restructuredtext.linter.run": "onType",

	// Flag to disable docutil based preview if critical issues happen.
	"restructuredtext.preview.docutil.disabled": false,

	// Double click in the rst preview to switch to the editor.
	"restructuredtext.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the restructuredtext preview.
	"restructuredtext.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the restructuredtext preview.
	"restructuredtext.preview.fontSize": 14,

	// Controls the line height used in the restructuredtext preview. This number is relative to the font size.
	"restructuredtext.preview.lineHeight": 1.6,

	// Mark the current editor selection in the preview.
	"restructuredtext.preview.markEditorSelection": true,

	// When a preview is scrolled, update the view of the editor.
	"restructuredtext.preview.scrollEditorWithPreview": true,

	// When an editor is scrolled, update the view of the preview.
	"restructuredtext.preview.scrollPreviewWithEditor": true,

	// Flag to disable sphinx based preview if critical issues happen.
	"restructuredtext.preview.sphinx.disabled": false,

	// The full path of the sphinx-build executable. This is an absolute path, and you can use ${workspaceFolder} to represent the workspace root folder.
	"restructuredtext.sphinxBuildPath": null,

	// A list of URLs or local paths to CSS style sheets to use from the restructuredtext preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the restructuredtext file. All '\' need to be written as '\\'.
	"restructuredtext.styles": [],

	// Enable debug logging for this extension.
	"restructuredtext.trace": "verbose",

	// Flag to control after how long a changed event triggers preview update.
	"restructuredtext.updateDelay": "300",

	// Flag to control whether text changed event triggers preview update.
	"restructuredtext.updateOnTextChanged": "true",

	// Write-only. Don't modify the value. This is a reserved setting for IntelliSense.
	"restructuredtext.workspaceRoot": "${workspaceFolder}",

	// Defines if any imports should be removed at all on an organize imports command.
	"typescriptHero.imports.disableImportRemovalOnOrganize": false,

	// Defines if sorting is disable during organize imports.
	"typescriptHero.imports.disableImportsSorting": false,

	// Defines the groups of the imports ordering. Multiple groups possible, see readme for instructions.
	"typescriptHero.imports.grouping": [
		"Plains",
		"Modules",
		"Workspace"
	],

	// Defines imports (libraries, so the 'from' part), which are not removed during 'organize imports'.
	"typescriptHero.imports.ignoredFromRemoval": [
		"react"
	],

	// Defines if there should be a semicolon at the end of a statement.
	"typescriptHero.imports.insertSemicolons": true,

	// Defines if there should be a space inside the curly braces of an import statement.
	"typescriptHero.imports.insertSpaceBeforeAndAfterImportBraces": true,

	// Defined if multi line imports contain the last trailing comma.
	"typescriptHero.imports.multiLineTrailingComma": true,

	// Defines the threshold when an import should be wrapped into a multiline import.
	"typescriptHero.imports.multiLineWrapThreshold": 125,

	// Defines if the imports should be organized on save.
	"typescriptHero.imports.organizeOnSave": false,

	// Defines if the imports are organized by first specifier/alias instead of module path.
	"typescriptHero.imports.organizeSortsByFirstSpecifier": false,

	// Defines if a trailing '/index' should be removed from imports.
	"typescriptHero.imports.removeTrailingIndex": true,

	// Defines if single or double quotes should be used.
	"typescriptHero.imports.stringQuoteStyle": "'",

	// Defines the log output level in the output window. In the log file, it's always info or debug.
	"typescriptHero.verbosity": "warn",

	// Automatically launch color picker when color edited
	"vs-color-picker.autoLaunch": true,

	// delay before auto launch
	"vs-color-picker.autoLaunchDelay": 100,

	// Controls the maximum number of problems produced by the server.
	"reacted.maxNumberOfProblems": 100,

	// Traces the communication between VSCode and the language server.
	"reacted.trace.server": "off",

	// Close terminal after execution finished. (experimental)
	"quicktask.closeTerminalAfterExecution": false,

	// You can add default tasks like ["npm update"].
	"quicktask.defaultTasks": [],

	// Enables the scanning of batch file.
	"quicktask.enableBatchFile": true,

	// Enables the scanning of Gulp tasks.
	"quicktask.enableGulp": true,

	// Enables the scanning of NPM tasks.
	"quicktask.enableNpm": true,

	// Enables the scanning of Perl scripts.
	"quicktask.enablePerl": true,

	// Enables the scanning of Powershell scripts.
	"quicktask.enablePowershell": true,

	// Enables the scanning of Python scripts.
	"quicktask.enablePython": true,

	// Enables the scanning of Ruby scripts.
	"quicktask.enableRuby": true,

	// Enables the scanning of Shell scripts.
	"quicktask.enableShell": true,

	// Enables the scanning of vscode tasks (in tasks.json).
	"quicktask.enableVsTasks": true,

	// The glob which Quick Task will exclude from scans.
	"quicktask.excludesGlob": "**/{node_modules,.vscode-test,.git,bower_components}",

	// The glob which Quick Task will scan for gulp tasks.
	"quicktask.gulpGlob": "{gulpfile.js,gulpfile.ts,gulpfile.babel.js}",

	// The glob which Quick Task will scan for npm tasks.
	"quicktask.npmGlob": "package.json",

	// Search task from subdirectories for npm and gulp etc. (experimental)
	"quicktask.searchTaskFileInSubdirectories": false,

	// Show terminal when executing.
	"quicktask.showTerminal": true,

	// Use yarn instead of npm.
	"quicktask.useYarn": false,

	// Watch for task changes and update task list automatically.
	"quicktask.watchTaskChanges": true,

	// Method to use for code completion. Use `false` to disable or if another extension provides this feature.
	"ruby.codeCompletion": false,

	// Which system to use for formatting. Use `false` to disable or if another extension provides this feature.
	"ruby.format": false,

	// Method to use for intellisense (go to definition, etc.). Use `false` to disable or if another extension provides this feature.
	"ruby.intellisense": false,

	// Path to the Ruby interpreter.  Set this to an absolute path to select from multiple installed Ruby versions.
	"ruby.interpreter.commandPath": "ruby",

	// Set individual ruby linters to use
	"ruby.lint": {},

	// Time (ms) to wait after keypress before running enabled linters. Ensures linters are only run when typing has finished and not for every keypress
	"ruby.lintDebounceTime": 500,

	// Defines where the Ruby extension will look to find Modules, Classes and methods.
	"ruby.locate": {
		"exclude": "{**/@(test|spec|tmp|.*),**/@(test|spec|tmp|.*)/**,**/*_spec.rb}",
		"include": "**/*.rb"
	},

	// Path to the bundler executable (used if useBundler is true)
	"ruby.pathToBundler": "bundle",

	// Path to the rct-complete command.  Set this to an absolute path to select from multiple installed Ruby versions.
	"ruby.rctComplete.commandPath": "rct-complete",

	// Whether ruby tools should be started using Bundler
	"ruby.useBundler": false,

	// Use built-in language server
	"ruby.useLanguageServer": false,

	// Enable format edge file
	"edge.format.enable": false,

	// Whether to enable or disable autocompletion.
	"red.autoComplete": true,

	// Directory to put compiling result of Red Source file. If not set, use workspace root directory by default.
	"red.buildDir": "",

	// Advanced options used to enable new features or produce detailed diagnostics to identify extension issues.
	"red.devOptions": [],

	// Path to Red toolchain
	"red.redPath": "",

	// Whether to enable or disable 'Red language server' debug.
	"red.rls-debug": false,

	// Traces the communication between VS Code and the language server.
	"red.server.trace.server": "off",

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a Code Lens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// Controls the maximum number of problems produced by the server.
	"dependencyAnalyticsServer.maxNumberOfProblems": 100,

	// Traces the communication between VSCode and the dependencyAnalyticsServer service.
	"dependencyAnalyticsServer.trace.server": "off",

	// Specifies absolute path of mvn executable.
	"maven.executable.path": "",

	// Specifies absolute path of npm executable.
	"npm.executable.path": "",

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When enabled, commits will automatically be fetched from the default remote of the current Git repository.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names.
	"git.branchWhitespaceChar": "-",

	// Controls what type of branches are listed when running `Checkout to...`.
	//  - all: Show all references.
	//  - local: Show only local branches.
	//  - tags: Show only tags.
	//  - remote: Show only remote branches.
	"git.checkoutType": "all",

	// Always confirm the creation of empty commits.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the git badge counter.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the explorer and the open editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Fetch all branches when pulling or just the current one.
	"git.fetchOnPull": false,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows).
	"git.path": null,

	// Runs a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'Git Push' after a successful commit.
	//  - sync: Run 'Git Sync' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	"git.promptToSaveFilesBeforeCommit": true,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// List of modules to allow access to, for example ["jdk.compiler/com.sun.tools.javac.api"]
	"java.addExports": [],

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Relative paths from workspace root to .jar files, .zip files, or folders that should be included in the Java class path
	"java.classPath": [],

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": false,

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.
	"java.completion.importOrder": [
		"java",
		"javax",
		"com",
		"org"
	],

	// When set to true, code completion overwrites the current text. When set to false, code is simply added instead.
	"java.completion.overwrite": true,

	// Checks if the extension-generated project settings files (.project, .classpath, .factorypath, .settings/) should be excluded from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": true,

	// Path to Maven's settings.xml
	"java.configuration.maven.userSettings": null,

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Command to debug one test method, for example ["mvn", "test", "-Dmaven.surefire.debug", "-Dtest=${class}#${method}". The test should start paused, listening for the debugger on port 5005.
	"java.debugTestMethod": [],

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// External dependencies of the form groupId:artifactId:version or groupId:artifactId:packaging:version:scope
	"java.externalDependencies": [],

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// Specifies the folder path to the JDK (8 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk1.8.0_161"
	"java.home": null,

	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,

	// Configure glob patterns for excluding folders
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Setting for GRADLE_HOME.
	"java.import.gradle.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Gradle version, used if the gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Enable/disable the Gradle wrapper.
	"java.import.gradle.wrapper.enabled": true,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-noverify -Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector
	"java.jdt.ls.vmargs": "-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication",

	// Enable/disable eager download of Maven source artifacts.
	"java.maven.downloadSources": false,

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": false,

	// Command to run all tests in a class, for example ["mvn", "test", "-Dtest=${class}"
	"java.testClass": [],

	// Command to run one test method, for example ["mvn", "test", "-Dtest=${class}#${method}"
	"java.testMethod": [],

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// A list of vscode language names where the extension should be used.
	"file_peek.activeLanguages": [
		"typescript",
		"javascript",
		"python"
	],

	// A list of extensions that should be tried for finding peeked files.  These are tried in order as further extensions of the potential file name and also as alternative file endings instead of the existing file extension (if available).
	"file_peek.searchFileExtensions": [
		".js",
		".ts",
		".html",
		".css",
		".scss"
	],

	// Enable/disable completion feature
	"yaml.completion": true,

	// Custom tags for the parser to use
	"yaml.customTags": [],

	// Print spaces between brackets in objects
	"yaml.format.bracketSpacing": true,

	// Enable/disable default YAML formatter (requires restart)
	"yaml.format.enable": false,

	// Specify the line length that the printer will wrap on
	"yaml.format.printWidth": 80,

	// Always: wrap prose if it exeeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
	"yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes
	"yaml.format.singleQuote": false,

	// Enable/disable hover feature
	"yaml.hover": true,

	// Associate schemas to Yaml files in the current workspace
	"yaml.schemas": {},

	// Automatically pull available YAML schemas from JSON Schema Store
	"yaml.schemaStore.enable": true,

	// Traces the communication between VSCode and the YAML language service.
	"yaml.trace.server": "off",

	// Enable/disable validation feature
	"yaml.validate": true,

	// File extensions for header files
	"include-autocomplete.extensions": [
		"",
		".h",
		".hpp",
		".hxx"
	],

	// Configuration options for easycompile.
	"easycompile.compile": {},

	// Configuration options for Css.
	"easycompile.css": {},

	// Configuration options for minify Javascript.
	"easycompile.js": {},

	// Configuration options for LESS.
	"easycompile.less": {},

	// Configuration options for SASS/SCSS.
	"easycompile.sass": {},

	// Configuration options for TypeScript.
	"easycompile.typescript": {},

	// 下载安装数据库可执行文件的架构。注意：我们不推荐您修改此选项，因为我们会自动判断您的安装环境。此选项仅在需要时修改。
	"autoMongoDB.binary.arch": "",

	// 数据库可执行文件的下载路径。默认存储位置：~/.mongodb/binaries (POSIX)，C:\Users\用户名\.mongodb\binaries (Windows)。
	"autoMongoDB.binary.downloadDir": "",

	// 下载安装数据库可执行文件的平台。注意：我们不推荐您修改此选项，因为我们会自动判断您的安装环境。此选项仅在需要时修改。
	"autoMongoDB.binary.platform": "",

	// 下载安装数据库可执行文件的版本。
	"autoMongoDB.binary.version": "3.4.4",

	// 数据库文件存储路径。 默认存储位置：~/.mongodb/data (POSIX)，C:\Users\用户名\.mongodb\data (Windows)。
	"autoMongoDB.instance.dbPath": "",

	// 数据库运行端口。
	"autoMongoDB.instance.port": 27017,

	// 数据库存储引擎模式。
	"autoMongoDB.instance.storageEngine": "ephemeralForTest",

	// Always start at the currently opened workspace folder.
	"startanyshell.openworkspaceroot": true,

	// Shell commands, see default for examples. The variable %path% will be replaced with the current working directory or file path.
	"startanyshell.shells": [
		{
			"description": "Windows Command Prompt",
			"command": "start \"%description%\" /WAIT %comspec%"
		},
		{
			"description": "Git Bash 2",
			"command": "\"C:\\Program Files\\Git\\git-bash.exe\" \"--cd=%path%\""
		},
		{
			"description": "Windows Powershell",
			"command": "start \"%description%\" powershell.exe -noexit"
		},
		{
			"description": "Developer Command Prompt for VS2015",
			"command": "start \"%description%\" /WAIT \"%HOMEDRIVE%\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\VsDevCmd.bat\""
		},
		{
			"description": "Cmder",
			"command": "cmder.exe /start \"%path%\""
		}
	],

	// Arguments for gitk
	"gitTools.gitkArgs": " --all",

	// Align colons in multiline object literals. Does nothing if object has computed property names.
	"prettier.alignObjectProperties": false,

	// Expand arrays into one item per line
	"prettier.arrayExpand": false,

	// Always put parentheses on arrow function arguments
	"prettier.arrowParens": true,

	// Scroll automatically to line where error has been detected
	"prettier.autoScroll": true,

	// Print spaces between brackets in object literals
	"prettier.bracesSpacing": true,

	// Print spaces between brackets in array literals
	"prettier.bracketSpacing": true,

	// Put else clause in a new line
	"prettier.breakBeforeElse": false,

	// Allow object properties to break lines between the property name and its value
	"prettier.breakProperty": false,

	// Advanced feature. Enable Prettier parser for styling files.
	"prettier.cssEnable": [
		"css",
		"less",
		"scss",
		"postcss"
	],

	// Format ternaries in a flat style
	"prettier.flattenTernaries": false,

	// Advanced feature. Enable Prettier parser for GraphQL.
	"prettier.graphqlEnable": [
		"graphql"
	],

	// Advanced feature. Enable Prettier parser for JavaScript.
	"prettier.javascriptEnable": [
		"javascript",
		"javascriptreact"
	],

	// Advanced feature. Enable Prettier parser for JSON.
	"prettier.jsonEnable": [
		"json"
	],

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// If true, will use single instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Omit space before empty anonymous function body
	"prettier.noSpaceEmptyFn": false,

	// Automatically opens Prettier output when an error is detected
	"prettier.openOutput": true,

	// Fit code within this line limit
	"prettier.printWidth": 120,

	// Print semicolons at the ends of statements
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": true,

	// Put a space before function parenthesis
	"prettier.spaceBeforeFunctionParen": false,

	// Display Prettier status in the bottom bar
	"prettier.statusBar": true,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 4,

	// Controls the printing of trailing commas wherever possible
	"prettier.trailingComma": "none",

	// Advanced feature. Enable Prettier parser for TypeScript.
	"prettier.typescriptEnable": [
		"typescript",
		"typescriptreact"
	],

	// Use tabs instead of spaces
	"prettier.useTabs": true,

	// Defines classes of newly inserted svgs
	"material-icons.classList": "material-icon",

	// Choose whether the xmlns attribute should be included
	"material-icons.includeXmlns": false,

	// Use an icon font instead of the svgs
	"material-icons.useFont": false,

	// Settings to override the sort order (i.e. to be at the start of the order)
	"sortJSON.orderOverride": [],

	// Settings to underride the sort order (i.e. to be at the end of the order)
	"sortJSON.orderUnderride": [],

	// Cycles through open documents on launch to enable autocomplete to include those documents on restore. (VSCode Issue#15178)
	"AllAutocomplete.cycleOpenDocumentsOnLaunch": false,

	// Disable special handling for 
	"AllAutocomplete.disableNumberHandling": false,

	// Glob pattern for files to exclude from autocomplete search.
	"AllAutocomplete.excludeFiles": "**/*.+(git|rendered)",

	// Words to ignore(separated by AllAutocomplete.whitespace) from autocomplete.
	"AllAutocomplete.ignoredWords": "",

	// Language specific special characters that can be a part of autocompletion(that can fit with all strings)
	"AllAutocomplete.languageSpecialCharacters": {
		"css": "^[\\.#]",
		"scss": "^[\\.#]",
		"csv": "^[\\: ]"
	},

	// Language specific settings for the whitespace splitter
	"AllAutocomplete.languageWhitespace": {
		"ruby": "[^\\w\\-_\\$:\\u0080-\\uFFFF]+",
		"javascript": "[^\\w_\\$\\u0080-\\uFFFF]+",
		"javascriptreact": "[^\\w_\\-\\$\\@\\u0080-\\uFFFF]+",
		"typescript": "[^\\w_\\-\\$\\@\\u0080-\\uFFFF]+",
		"php": "[^\\w_\\$\\u0080-\\uFFFF]+",
		"css": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",
		"scss": "[^\\w\\-_\\$\\@\\u0080-\\uFFFF]+",
		"html": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",
		"python": "[^\\w\\-_\\u0080-\\uFFFF]+",
		"elm": "[^\\w\\-_\\u0080-\\uFFFF]+",
		"cpp": "[^\\w_\\u0080-\\uFFFF]+",
		"csv": "[^\\w_\\u0080-\\uFFFF \\:]+"
	},

	// All Autocomplete: Maximum number of items sent for autocomplete in a single API call.
	"AllAutocomplete.maxItemsInSingleList": 999,

	// All Autocomplete: Maximum number of lines to read from a file.
	"AllAutocomplete.maxLines": 9999,

	// All Autocomplete: Minimum word length to keep in autocomplete list.
	"AllAutocomplete.minWordLength": 3,

	// Show results from the current document in the autocomplete results(Disable to improve performance).
	"AllAutocomplete.showCurrentDocument": true,

	// Show results from the other open document in the autocomplete results(Disable to have results only from the current document if showCurrentDocument is true).
	"AllAutocomplete.showOpenDocuments": true,

	// Do not update the autocomplete list unless the document is saved.
	"AllAutocomplete.updateOnlyOnSave": false,

	// All Autocomplete: Regex to use for splitting whitespace
	"AllAutocomplete.whitespace": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",

	// List of files to initialize the word list from. These files behave as if they are always open. Expects an absolute path. Can work with relative path if the workspace contains a single folder.
	"AllAutocomplete.wordListFiles": [],

	// Automatically add vendor prefixes to unsupported CSS properties (e. g. transform -> -ms-transform). Specify what browsers to target with an array of strings (uses [Browserslist](https://github.com/ai/browserslist)). Pass `null` to turn off. 
	// Default is `null`
	"liveSassCompile.settings.autoprefix": [
		"> 2%",
		"last 2 versions"
	],

	// All Sass/Scss files inside the folders will be excluded. 
	// 
	// Examples: 
	// '**/node_modules/**',
	// '.vscode/**', 
	// '.history/**' 
	// 
	// Glob Patterns are accepted.
	"liveSassCompile.settings.excludeList": [
		"**/node_modules/**",
		".vscode/**"
	],

	// Set your exported CSS Styles, Formats & save location.
	"liveSassCompile.settings.formats": [
		{
			"format": "expanded",
			"extensionName": ".css",
			"savePath": null
		}
	],

	// Set it as `false` if you don't want `.map` file for compiled CSS. 
	// Default is `true`
	"liveSassCompile.settings.generateMap": true,

	// This setting is useful when you deals with only few of sass files. Only mentioned Sass files will be included. 
	// NOTE: No need to include partial sass files.
	"liveSassCompile.settings.includeItems": null,

	// Set this to `false` if you do not want the output window to show.
	// Note: You can use the command palette to open the Live Sass output window.
	// Default is `true`
	"liveSassCompile.settings.showOutputWindow": true,

	// Whether you want to save the current file before compile
	"AIOcompiler.autoSaveOnCompile": true,

	// Specify the location of the Makefile
	"AIOcompiler.defaultMakefilePath": "/.output/",

	// Whether you want to execute Makefile by default
	"AIOcompiler.executeMakefileByDefault": true,

	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",

	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": true,

	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": "Chrome",

	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,

	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,

	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",

	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behviour by making this setting as `true`
	"liveServer.settings.fullReload": false,

	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",

	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},

	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],

	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],

	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,

	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,

	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,

	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},

	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",

	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,

	// Open in Browser Preview inside VS Code, instead of default browser
	"liveServer.settings.useBrowserPreview": true,

	// Use local IP as host
	"liveServer.settings.useLocalIp": true,

	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,

	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,

	// Makes it easier to develop the extension
	"god.debug": false,

	// The current tsconfig project active in God 👁
	"god.tsconfig": "",

	// Set text color for the filename in the status bar.
	"ActiveFileInStatusBar.color": "",

	// Enable/Disable ActiveFileInStatusBar
	"ActiveFileInStatusBar.enable": true,

	// Show fullpath or relative path in status bar.
	"ActiveFileInStatusBar.fullpath": true,

	// Reveal the active file in the file system.
	"ActiveFileInStatusBar.revealFile": false,

	// Enable/Disable visual 'pip' decoration, that sits alongside the line number.
	"svn-gutter.enablePips": true,

	// After pasting and indenting selects the probably wrong indented region.
	"pasteAndIndent.selectAfter": false,

	// Color fields not to display. Overrides `colorInfo.fields`.
	"colorInfo.excludedFields": null,

	// Ordered list of color fields to display.
	"colorInfo.fields": null,

	// 
	"colorInfo.languages": [
		{
			"selector": "css",
			"colors": "css"
		},
		{
			"selector": "sass",
			"colors": "css"
		},
		{
			"selector": "scss",
			"colors": "css"
		},
		{
			"selector": "less",
			"colors": "css"
		}
	],

	// coverage file names for the extension to automatically look for
	"coverage-gutters.coverageFileNames": [
		"lcov.info",
		"cov.xml",
		"jacoco.xml"
	],

	// default coverage report file names(can be glob style) to look for when using the preview command
	"coverage-gutters.coverageReportFileName": "coverage/**/index.html",

	// enable or disable quick commands in the context menu
	"coverage-gutters.customizable.context-menu": true,

	// enable or disable the status bar item
	"coverage-gutters.customizable.status-bar-toggler-watchCoverageAndVisibleEditors-enabled": true,

	// path to an icon (svg, png, etc) for displaying in the gutter for full coverage
	"coverage-gutters.gutterIconPathDark": "./app_images/gutter-icon-dark.svg",

	// path to an icon (svg, png, etc) for displaying in the gutter for full coverage
	"coverage-gutters.gutterIconPathLight": "./app_images/gutter-icon-light.svg",

	// dark themed highlight for code coverage
	"coverage-gutters.highlightdark": "rgba(45, 121, 10, 0.75)",

	// light themed highlight for code coverage
	"coverage-gutters.highlightlight": "rgba(166, 220, 142, 0.75)",

	// paths that will be ignored by the extension
	"coverage-gutters.ignoredPathGlobs": "**/{node_modules,venv,vendor}/**",

	// name of your lcov file
	"coverage-gutters.lcovname": "lcov.info",

	// take manual control over the absolute path to your coverage file(s)
	"coverage-gutters.manualCoverageFilePaths": [],

	// path to an icon (svg, png, etc) for displaying in the gutter for no coverage
	"coverage-gutters.noGutterIconPathDark": "./app_images/no-gutter-icon-dark.svg",

	// path to an icon (svg, png, etc) for displaying in the gutter for no coverage
	"coverage-gutters.noGutterIconPathLight": "./app_images/no-gutter-icon-light.svg",

	// dark theme partial highlight for code coverage
	"coverage-gutters.noHighlightDark": "rgba(121, 31, 10, 0.75)",

	// light theme partial highlight for code coverage
	"coverage-gutters.noHighlightLight": "rgba(220, 143, 143, 0.75)",

	// path to an icon (svg, png, etc) for displaying in the gutter for partial coverage
	"coverage-gutters.partialGutterIconPathDark": "./app_images/partial-gutter-icon-dark.svg",

	// path to an icon (svg, png, etc) for displaying in the gutter for partial coverage
	"coverage-gutters.partialGutterIconPathLight": "./app_images/partial-gutter-icon-light.svg",

	// dark theme partial highlight for code coverage
	"coverage-gutters.partialHighlightDark": "rgba(121, 86, 10, 0.75)",

	// light theme partial highlight for code coverage
	"coverage-gutters.partialHighlightLight": "rgba(220, 213, 143, 0.75)",

	// helps with coverage generated outside the local file system by swapping fragments of remote paths with local ones (EG ['/var/www/', '/home/project/']). See https://github.com/ryanluker/vscode-coverage-gutters/issues/201 for more info.
	"coverage-gutters.remotePathResolve": [],

	// show or hide the gutter coverage
	"coverage-gutters.showGutterCoverage": true,

	// show or hide the line coverage
	"coverage-gutters.showLineCoverage": false,

	// show or hide the ruler coverage
	"coverage-gutters.showRulerCoverage": false,

	// name of your xml file
	"coverage-gutters.xmlname": "cov.xml",

	// Automatically deselect the closing tag after inserting a space.
	"htmltagwrap.autoDeselectClosingTag": true,

	// The default HTML tag to insert when using htmltagwrap.
	"htmltagwrap.tag": "p",

	// Docker command to get container running
	"artisan.docker.command": null,

	// Should commands get executed using docker?
	"artisan.docker.enabled": false,

	// Additional Artisan locations
	"artisan.location": [],

	// Largest amount of data in bytes allowed on stdout or stderr
	"artisan.maxBuffer": 204800,

	// Sets a custom location to the php executable
	"artisan.php.location": "php",

	// Sets the default server address for artisan serve
	"artisan.serve.defaultHost": "localhost",

	// Sets the default port address for artisan serve
	"artisan.serve.defaultPort": "8000",

	// Arguments for the glslangValidator executable
	"glsllint.glslangValidatorArgs": "",

	// The path to the glslangValidator executable
	"glsllint.glslangValidatorPath": "",

	// Commands appear on the context menu. Unlisted commands will appear on the menu
	"partialDiff.commandsOnContextMenu": {
		"markSection1": true,
		"markSection2AndTakeDiff": true,
		"diffSelectionWithClipboard": true,
		"diffVisibleEditors": true,
		"togglePreComparisonTextNormalizationRules": true
	},

	// Enable usage data to be sent to the extension authour
	"partialDiff.enableTelemetry": true,

	// (DEPRECATED) Hide Partial Diff commands on the context menu. Use `partialDiff.commandsOnContextMenu` instead
	"partialDiff.hideCommandsOnContextMenu": false,

	// Rules to normalize texts before taking a diff
	"partialDiff.preComparisonTextNormalizationRules": [],

	// When creating a filesystem file from glTF or GLB import or export should a prompt be shown to select the result filename?
	"glTF.alwaysOverwriteDefaultFilename": false,

	// The path to a BabylonJS-ready DDS environment file.  See: https://doc.babylonjs.com/how_to/physically_based_rendering#creating-a-dds-environment-file-from-an-hdr-image
	"glTF.Babylon.environment": "{extensionRootPath}environments/babylon/countrySpecularHDR.dds",

	// The default 3D engine that will be used when previewing a glTF 1.0 model.  You can always change the current engine within the preview pane.
	"glTF.defaultV1Engine": "Cesium",

	// The default 3D engine that will be used when previewing a glTF 2.0 model.  You can always change the current engine within the preview pane.
	"glTF.defaultV2Engine": "Babylon.js",

	// When the editor selection changes the glTF outline will expand to include the current selection.
	"glTF.expandOutlineWithSelection": false,

	// Show a button on the toolbar to activate the 3D Preview window.
	"glTF.showToolbar3D": true,

	// The path to a set of environment cube faces usable by ThreeJS.  Use {face} for the face name, and six files must exist with the following face names: posx, negx, posy, negy, posz, and negz.
	"glTF.Three.environment": "{extensionRootPath}environments/threejs/Park2/{face}.jpg",

	// The number of milliseconds to wait for multiple requests to re-validate a glTF document.
	"glTF.Validation.debounce": 500,

	// When true, automatically run the glTF Validator and report any found issues to the document problems window.
	"glTF.Validation.enable": true,

	// Array of issue codes to ignore during validation.  See https://github.com/KhronosGroup/glTF-Validator/blob/master/ISSUES.md
	"glTF.Validation.ignoredIssues": [],

	// Controls the maximum number of issues reported by the glTF Validator.
	"glTF.Validation.maxIssues": 200,

	// Override severity code of any glTF validation message by code.  See https://github.com/KhronosGroup/glTF-Validator/blob/master/ISSUES.md
	"glTF.Validation.severityOverrides": {},

	// command sequence list.
	"multiCommand.commands": [],

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// Path to the executable file for VS Code
	"vscodeWorkspaceSwitcher.codeExecutable": "code",

	// Path to the executable file for VS Code Insiders
	"vscodeWorkspaceSwitcher.codeInsidersExecutable": "code-insiders",

	// Paths of directories when `.code-workspace` files can be saved and then read from
	"vscodeWorkspaceSwitcher.paths": [],

	// Whether or not to show the activity bar tree view container
	"vscodeWorkspaceSwitcher.showInActivityBar": true,

	// Whether or not to show the list of workspaces in the explorer tree view container
	"vscodeWorkspaceSwitcher.showInExplorer": true,

	// Transform classnames in autocomplete suggestions.
	"cssModules.camelCase": false,

	// When comment-ts.includeAuthorTag is enabled, will add @author tag with this value.
	"comment-ts.authorName": "(Set the text for this tag by adding docthis.authorName to your settings file.)",

	// When enabled, will add the @author tag.
	"comment-ts.includeAuthorTag": false,

	// When enabled, JSDoc comments for functions and methods will include @description.
	"comment-ts.includeDescriptionTag": false,

	// When comment-ts.parseNames is enabled, comments are generated from the name semantics.
	"comment-ts.parseNames": true,

	// When enabled, selected JSDoc comments will be updated, else the previous comments will be preserved.
	"comment-ts.replaceComments": true,

	// Only show private variables from current class based on cursor position.
	"comment-ts.scoped": true,

	// Inserts TODO in created comments.
	"comment-ts.todoComments": false,

	// CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.activeScopeCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// Should different brackets share a color group (Consecutive), or use their own color group (Independent)
	"bracket-pair-colorizer-2.colorMode": "Consecutive",

	// Scope colors
	"bracket-pair-colorizer-2.colors": [
		"Gold",
		"Orchid",
		"LightSkyBlue"
	],

	// Don't colorize files of these languages
	"bracket-pair-colorizer-2.excludedLanguages": [],

	// Should opening brackets iterate the color cycle even if they are not nested
	"bracket-pair-colorizer-2.forceIterationColorCycle": false,

	// Ensure that an opening brackets color does not match a previous brackets color
	"bracket-pair-colorizer-2.forceUniqueOpeningColor": false,

	// Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
	"bracket-pair-colorizer-2.highlightActiveScope": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.rulerPosition": "Center",

	// CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.scopeLineCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
	"bracket-pair-colorizer-2.scopeLineRelativePosition": true,

	// Show active bracket scope in gutter?
	"bracket-pair-colorizer-2.showBracketsInGutter": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.showBracketsInRuler": false,

	// Show a horizontal line to create a block around the active bracket scope?
	"bracket-pair-colorizer-2.showHorizontalScopeLine": true,

	// Show a vertical line on the left side of the editor representing the active bracket scope?
	"bracket-pair-colorizer-2.showVerticalScopeLine": true,

	// Unmatched Scope Color
	"bracket-pair-colorizer-2.unmatchedScopeColor": "Red",

	// When enabled, the full file path is included in the metainfo.
	"copy-text.fullPath": false,

	// When enabled, the date is added to the metainfo.
	"copy-text.includeDate": true,

	// When enabled, the time is added to the metainfo.
	"copy-text.includeTime": true,

	// Open or not open the preview screen automatically
	"svgviewer.enableautopreview": false,

	// How to open the screen (vscode.ViewColumn)
	"svgviewer.previewcolumn": "Beside",

	// Show zoom in/out button in preview windows
	"svgviewer.showzoominout": false,

	// Color setting for transparency
	"svgviewer.transparencycolor": null,

	// Show Transparency Grid
	"svgviewer.transparencygrid": true,

	// Allow Apex Language Server to surface semantic errors. As a beta feature, this feature is a preview and isn’t part of the “Services” under your master subscription agreement with Salesforce. Use this feature at your sole discretion, and make your purchase decisions only on the basis of generally available products and features. Salesforce doesn’t guarantee general availability of this feature within any particular time frame or at all, and we can discontinue it at any time. This feature is for evaluation purposes only, not for production use. It’s offered as is and isn’t supported, and Salesforce has no liability for any harm or damage arising out of or in connection with it. All restrictions, Salesforce reservation of rights, obligations concerning the Services, and terms for related Non-Salesforce Applications and Content apply equally to your use of this feature.
	"salesforcedx-vscode-apex.enable-semantic-errors": false,

	// If a project has no sObject definitions, specifies whether to automatically refresh sObject definitions on extension activation (true) or not (false).
	"salesforcedx-vscode-apex.enable-sobject-refresh-on-startup": false,

	// Specifies the folder path to the Java 8 or Java 11 runtime used to launch the Apex Language Server (for example, /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home).
	"salesforcedx-vscode-apex.java.home": null,

	// Set your c compiler if it is not working
	"c-cpp-compile-run.c-compiler": "gcc",

	// Flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.c-flags": "-Wall -Wextra",

	// Set your cpp compiler if it is not working
	"c-cpp-compile-run.cpp-compiler": "g++",

	// Flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.cpp-flags": "-Wall -Wextra",

	// Run arguments
	"c-cpp-compile-run.run-args": "",

	// Run in a new external terminal
	"c-cpp-compile-run.run-in-external-terminal": false,

	// Saves the file before compilation
	"c-cpp-compile-run.save-before-compile": true,

	// Connection timeout for Apex Debugger API requests (in milliseconds).
	"salesforcedx-vscode-apex-debugger.connectionTimeoutMs": 20000,

	// Include backticks when selecting or switching any quotes
	"quick-select.includeBackticks": true,

	// Specifies whether or not to set up internal development mode which provides limited SFDX commands.
	"salesforcedx-vscode-core.internal-development": false,

	// (Beta) Indicates whether the Org Browser view is displayed when the default org is a non-scratch org. See Org Browser [documentation](https://forcedotcom.github.io/salesforcedx-vscode/user-guide/org-browser).
	"salesforcedx-vscode-core.orgBrowser.enabled": false,

	// Specifies whether or not to automatically run force:source:push (for source-tracked orgs) or force:source:deploy (for non-source-tracked orgs) when a local source file is saved.
	"salesforcedx-vscode-core.push-or-deploy-on-save.enabled": false,

	// Specifies whether code coverage results are calculated and retrieved when you run Apex tests.
	"salesforcedx-vscode-core.retrieve-test-code-coverage": false,

	// Specifies whether status messages for Salesforce CLI commands run using the VS Code command palette will appear as pop-up information messages (true) or as status bar messages (false).
	"salesforcedx-vscode-core.show-cli-success-msg": true,

	// Specifies whether to enable Salesforce telemetry. Even when enabled, still abides by the overall `telemetry.enableTelemetry` vscode setting.
	"salesforcedx-vscode-core.telemetry.enabled": true,

	// Add custom file types.
	"stuckOverflow.customFileTypes": [],

	// Enable exact search on the quick action menu.
	"stuckOverflow.enableExactSearch": false,

	// Enable fuzzy search on the quick action menu.
	"stuckOverflow.enableFuzzySearch": true,

	// Prepend the file type to searches.
	"stuckOverflow.prependFileType": true,

	// Convert underscores to dashes.
	"sassFormat.dasherize": false,

	// Specify the default encoding for input files. Defaults to "UTF-8".
	"sassFormat.defaultEncoding": "UTF-8",

	// How many spaces to use for each level of indentation. Defaults to 4. "t" means use hard tabs.
	"sassFormat.indent": 4,

	// Keep inline comments inline. Experimental support.
	"sassFormat.inlineComments": true,

	// Keep leading zero in numbers. Experimental support.
	"sassFormat.numberLeadingZero": true,

	// Output the old-style ":prop val" property syntax. Only meaningful when formating Sass.
	"sassFormat.oldStyle": false,

	// Custom Sass PATH.
	"sassFormat.sassPath": null,

	// Use Unix-style newlines in written files. Always true on Unix. This setting is deprecated. Please use "End of Line" setting from VS Code.
	"sassFormat.unixNewlines": false,

	// Use single quotes. Double quotes in comments will remain untouched.
	"sassFormat.useSingleQuotes": false,

	// Files excluded from counting.
	"line-counter.excludes": [
		"**/.vscode/**"
	],

	// 
	"line-counter.includes": [
		"**/*"
	],

	// Specifies the directory containing workspace related code actions.
	"javascriptBooster.codemodDir": "codemods",

	// Specifies formatting options that will be used for newly generated code. Only the code fragment affected by a chosen code action is reformatted.
	"javascriptBooster.formattingOptions": {},

	// Specifies the fallback command that should be executed if the file is not supported by smart selection.
	"javascriptBooster.smartExtendFallbackCommand": "editor.action.smartSelect.grow",

	// Specifies the fallback command that should be executed if the file is not supported by smart selection.
	"javascriptBooster.smartShrinkFallbackCommand": "editor.action.smartSelect.shrink",

	// Sets the style of indentation during CSS and JavaScript beautification. The default value "knr" and the other value "allman" puts opening curly braces.
	"sfmt.braces": "knr",

	// Determines whether comments should be indented. This property is only used in beautification mode.
	"sfmt.comments": "indent",

	// Whether a blank line should be forced above markup comments.
	"sfmt.commline": true,

	// Forces new line characters between blocks of CSS code. This option will override option preserve.
	"sfmt.cssinsertlines": true,

	// Stores the character literal used for an indentation. A single indentation is the result of this value repeated the number of times specified in the insize option. For tabs use '	'
	"sfmt.inchar": " ",

	// Stores the number of times the inchar value must repeat to comprise a single indentation.
	"sfmt.insize": 2,

	// If in CSS values leading 0s immediately preceeding a decimal should be removed or prevented.
	"sfmt.noleadzero": true,

	// Sorts properties of objects in JavaScript and/or CSS and/or attributs in HTML. The accepted values determine which language this option should be applied.
	"sfmt.objsort": "none",

	// Retain empty lines in either JavaScript or CSS like languages. Consecutive empty lines will be converted to a single empty line.
	"sfmt.preserve": "css",

	// Convert the quote characters delimiting strings from either double or single quotes to the other. Applies to JavaScript and CSS and to attributes in markup.
	"sfmt.quoteconvert": "double",

	// Retains comma separated CSS selectors on a single line of code.
	"sfmt.selectorlist": false,

	// Preserve all text exactly as provided. This option eliminates any sort of beautification or wrapping upon text content in markup type languages.
	"sfmt.textpreserve": true,

	// If lists of assignments or properties should be vertically aligned for faster and easier reading. The accepted values determine to which language this option should be applied.
	"sfmt.vertical": "none",

	// npm bin name
	"npm.bin": "npm",

	// Enable npm commands in the macOS touchbar.
	"npm.enableTouchbar": false,

	// Look for 'package.json' files in these directories
	"npm.includeDirectories": [],

	// Run npm commands in a terminal, otherwise shows the output in the output panel
	"npm.runInTerminal": true,

	// Look for 'package.json' in the root directory of the workspace
	"npm.useRootDirectory": true,

	// Validate installed modules
	"npm.validate.enable": true,

	// An array of custom patterns that shall be highlighted.
	"logFileHighlighter.customPatterns": [],

	// This property is intended only for migrating old settings system to a new one. It will be removed in new versions. Don't use it, use "materialTheme.cache.workbench.settings" instead.
	"materialTheme.cache.workbench.accent": "",

	// Material theme settings object.
	"materialTheme.cache.workbench.settings": {},

	// a sample configuration
	"nunjucks-template.sample": true,

	// 
	"actionButtons": {},

	// The browser to refresh
	"browserRefresh.browser": "Google Chrome",

	// Delay after which ⌘R will be sent to the browser
	"browserRefresh.delay": 0,

	// Keep the focus on the browser
	"browserRefresh.focus": false,

	// Add a custom commit message to the merge
	"gitMerger.customCommitMessage": false,

	// Add your custom message after the auto commit message
	"gitMerger.extendAutoCommitMessage": true,

	// Add options to the git merge command
	"gitMerger.mergeCommandOptions": [
		"commit",
		"no-ff"
	],

	// Kill all the terminals created from this configuration when the project is removed from the workspace
	"terminals.autokill": false,

	// Execute `Terminals: Run` automatically at startup or when the project is added to the workspace
	"terminals.autorun": false,

	// The location of the configuration file
	"terminals.configPath": "",

	//  Global environment variables that will be applied to all terminals
	"terminals.env": {},

	// Invert a terminal commands and description in the quickpick
	"terminals.invertCommandsAndDescription": false,

	// The terminal multiplexer to use for persistent terminals
	"terminals.multiplexer": "screen",

	// Show terminals' commands in the quickpick
	"terminals.showCommands": false,

	// Show terminals' descriptions in the quickpick
	"terminals.showDescriptions": true,

	// Sort terminals alphabetically
	"terminals.sortTerminals": false,

	// Array of terminals to open
	"terminals.terminals": [],

	// Ask gist name upon creating. Helps you to identify the gist if you have multiple gists.
	"sync.askGistName": false,

	// Set it true to Auto Download the settings on code start. [Code Restart Required]
	"sync.autoDownload": false,

	// Set it true to Auto Upload on the settings change. [Code Restart Required]
	"sync.autoUpload": false,

	// Set it to true if you want to download the settings even when you have the latest settings.
	"sync.forceDownload": false,

	// Set it to true if you want to upload the settings even when the GIST has newer settings.
	"sync.forceUpload": false,

	// GitHub GIST ID for Settings Sync.
	"sync.gist": "",

	// When set to true, will show the result in status bar instead of summary page.
	"sync.quietSync": false,

	// Set it to false if you don't want to remove extensions while downloading.
	"sync.removeExtensions": true,

	// Set it to false if you don't want to upload/download the extensions.
	"sync.syncExtensions": true,

	// Specifies the base folders to search for git repositories
	"gitProjectManager.baseProjectsFolders": [],

	// Indicates if extension will validate and get the remote origin of the git repository
	"gitProjectManager.checkRemoteOrigin": true,

	// Specifies full path to Code command to use when opening a project.
	"gitProjectManager.codePath": "code",

	// Indicates if project path will be displayed in project picker.
	"gitProjectManager.displayProjectPath": false,

	// Specifies folders to be ignored. (node_modules for example), improving search performance
	"gitProjectManager.ignoredFolders": [],

	// Indicate the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"gitProjectManager.maxDepthRecursion": 4,

	// Define the behavior when opening a new project, if true a new VSCode will be opened with the selected project
	"gitProjectManager.openInNewWindow": false,

	// Number of recent projects to be kept to use with GPM - Open Recent
	"gitProjectManager.recentProjectsListSize": 5,

	// Define if extension should look for Git projects inside other Git projects.
	"gitProjectManager.searchInsideProjects": true,

	// Specifies whether saves repository folders' data between sessions
	"gitProjectManager.storeRepositoriesBetweenSessions": false,

	// Define if extension should look for Mercurial projects too.
	"gitProjectManager.supportsMercurial": false,

	// Define if extension should look for for SVN projects too.
	"gitProjectManager.supportsSVN": false,

	// Allows to list projects that are not versioned in "List Repositories" command
	"gitProjectManager.unversionedProjects": [],

	// Define if extension should show a warn if a configured project folder is not found while searching for projects
	"gitProjectManager.warnIfFolderNotFound": false,

	// Controls the background color of the trailing space decoration.
	"trailing-spaces.backgroundColor": "rgba(255,0,0,0.3)",

	// Controls the color of the border around the trailing space decoration.
	"trailing-spaces.borderColor": "rgba(255,100,100,0.15)",

	// By default, trailing spaces are deleted within the whole document. Set to true to affect only the lines you edited since last save. Trailing spaces will still be searched for and highlighted in the whole document.
	"trailing-spaces.deleteModifiedLinesOnly": false,

	// By default, the line being currently edited will have its trailing spaces highlighted. Set to false to ignore trailing spaces on the edited line.
	"trailing-spaces.highlightCurrentLine": true,

	// By default, empty lines are cleared as well when calling the deletion command. Set to false to ignore empty lines upon deletion.
	"trailing-spaces.includeEmptyLines": true,

	// By default, Trailing Spaces is "live". It means the trailing spaces regions will be matched in the background, and highlighted if a color scope is defined, when the document is opened and edited. Set to false to disable live matching and highlighting (the deletion command remains available, so-called "lazy matching").
	"trailing-spaces.liveMatching": true,

	// Controls the verbosity of logging. Logs can be seen in the console by opening the dev tools. `log` is the most verbose and `error` will only show critical errors.
	"trailing-spaces.logLevel": "warn",

	// By default, only simple spaces and tabs are matched as "trailing spaces".
	"trailing-spaces.regexp": "[ \t]+",

	// With this option you can ignore specific schemes. An item has to match the case-sensitive string of the scheme of the document.
	"trailing-spaces.schemeIgnore": [
		"output"
	],

	// By default, trailing space deletions will be communicated through a status bar message. Set to false to disable these messages.
	"trailing-spaces.showStatusBarMessage": true,

	// With this option you can ignore specific files based on the syntax used. An item has to match the case-sensitive string of the language used in the file.
	"trailing-spaces.syntaxIgnore": [],

	// Controls whether trailing spaces are trimmed automatically when saving a file.
	"trailing-spaces.trimOnSave": false,

	// Specifies whether C# scripts/snippets should be executed in debug mode.
	"scriptcsRunner.debug": false,

	// Location of scriptcs executable. Defaults to 'scriptcs', meaning it just tries to use your PATH environment variable.
	"scriptcsRunner.scriptcsPath": "scriptcs",

	// Control whether Standard is enabled for JavaScript files or not.
	"standard.enable": false,

	// Show the lens when there are no notes
	"provisionlens.alwaysShow": false,

	// The order in which items need to be shown in the dropdown
	"provisionlens.dropdownOrder": "line_numbers_asc",

	// The appereance of the dropdown items
	"provisionlens.dropdownType": "normal",

	// Array of group names with designated keywords (case sensitive)
	"provisionlens.groups": [
		{
			"keywords": [
				"TODO",
				"FIXME"
			],
			"tooltip": "These are all the 'TODO' and 'FIXME' notes in this file",
			"text": {
				"one": "📝 {0} TODO",
				"multiple": "📝 {0} TODOs"
			}
		},
		{
			"keywords": [
				"NOTE"
			],
			"tooltip": "These are all the notes in this file",
			"text": {
				"one": "📝 {0} Note",
				"multiple": "📝 {0} Notes"
			}
		}
	],

	// Enable/disable syntax highlighting
	"provisionlens.highlighting": true,

	// Array of ignore files for the lens to blacklist (relative to project root)
	"provisionlens.ignoreFiles": [
		".gitignore",
		".ignore"
	],

	// Jump to a note instead of showing the dropdown when there is only one
	"provisionlens.instant": true,

	// Object with keywords to use
	"provisionlens.keywords": {
		"TODO": {
			"color": "#fff",
			"backgroundColor": "#f2b01f",
			"rulerPlacement": "right",
			"rulerColor": "rgba(242, 176, 31, 0.8)",
			"highlight": "keyword",
			"useColons": true,
			"caseSensitive": true
		},
		"FIXME": {
			"color": "#fff",
			"backgroundColor": "#d85f88",
			"rulerPlacement": "right",
			"rulerColor": "rgba(216, 95, 136, 0.8)",
			"highlight": "keyword",
			"useColons": true,
			"caseSensitive": true
		},
		"NOTE": {
			"color": "#aaa",
			"backgroundColor": "#434343",
			"rulerPlacement": "right",
			"rulerColor": "rgba(67, 67, 67, 0.8)",
			"highlight": "keyword",
			"useColons": true,
			"caseSensitive": true
		}
	},

	// Location in editor to show a quick overview of all notes
	"provisionlens.overview": "auto",

	// Show a seperate lens above functions and/or classes
	"provisionlens.position": "above_functions",

	// Object with translations
	"provisionlens.translations": {},

	// Array of files/folders for the lens to whitelist (relative to project root)
	"provisionlens.whitelist": [],

	// A stylelint configuration object.
	"stylelint.config": null,

	// A partial stylelint config whose properties override the existing ones.
	"stylelint.configOverrides": null,

	// Control whether stylelint is enabled for CSS/SCSS/Less files or not.
	"stylelint.enable": true,

	// Whether to clear previous output before each run.
	"code-runner.clearPreviousOutput": false,

	// Set the custom command to run.
	"code-runner.customCommand": "echo Hello",

	// Set the working directory.
	"code-runner.cwd": "",

	// Set the default language to run.
	"code-runner.defaultLanguage": "",

	// Whether to enable AppInsights to track user telemetry data.
	"code-runner.enableAppInsights": true,

	// Set the executor of each language.
	"code-runner.executorMap": {
		"javascript": "node",
		"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
		"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"php": "php",
		"python": "python -u",
		"perl": "perl",
		"perl6": "perl6",
		"ruby": "ruby",
		"go": "go run",
		"lua": "lua",
		"groovy": "groovy",
		"powershell": "powershell -ExecutionPolicy ByPass -File",
		"bat": "cmd /c",
		"shellscript": "bash",
		"fsharp": "fsi",
		"csharp": "scriptcs",
		"vbscript": "cscript //Nologo",
		"typescript": "ts-node",
		"coffeescript": "coffee",
		"scala": "scala",
		"swift": "swift",
		"julia": "julia",
		"crystal": "crystal",
		"ocaml": "ocaml",
		"r": "Rscript",
		"applescript": "osascript",
		"clojure": "lein exec",
		"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
		"racket": "racket",
		"scheme": "csi -script",
		"ahk": "autohotkey",
		"autoit": "autoit3",
		"dart": "dart",
		"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		"haskell": "runhaskell",
		"nim": "nim compile --verbosity:0 --hints:off --run",
		"lisp": "sbcl --script",
		"kit": "kitc --run"
	},

	// Set the executor of each file extension.
	"code-runner.executorMapByFileExtension": {
		".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
		".vbs": "cscript //Nologo",
		".scala": "scala",
		".jl": "julia",
		".cr": "crystal",
		".ml": "ocaml",
		".exs": "elixir",
		".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		".rkt": "racket",
		".scm": "csi -script",
		".ahk": "autohotkey",
		".au3": "autoit3",
		".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
		".kts": "kotlinc -script",
		".dart": "dart",
		".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		".hs": "runhaskell",
		".nim": "nim compile --verbosity:0 --hints:off --run",
		".csproj": "dotnet run --project",
		".fsproj": "dotnet run --project",
		".lisp": "sbcl --script",
		".kit": "kitc --run"
	},

	// Set the executor by glob.
	"code-runner.executorMapByGlob": {
		"pom.xml": "cd $dir && mvn clean package"
	},

	// Whether to use the directory of the file to be executed as the working directory.
	"code-runner.fileDirectoryAsCwd": false,

	// Whether to ignore selection to always run entire file.
	"code-runner.ignoreSelection": false,

	// Set the mapping of languageId to file extension.
	"code-runner.languageIdToFileExtensionMap": {
		"bat": ".bat",
		"powershell": ".ps1",
		"typescript": ".ts"
	},

	// Whether to preserve focus on code editor after code run is triggered.
	"code-runner.preserveFocus": true,

	// Whether to respect Shebang to run code.
	"code-runner.respectShebang": true,

	// Whether to run code in Integrated Terminal.
	"code-runner.runInTerminal": false,

	// Whether to save all files before running.
	"code-runner.saveAllFilesBeforeRun": false,

	// Whether to save the current file before running.
	"code-runner.saveFileBeforeRun": false,

	// Whether to show extra execution message like [Running] ... and [Done] ...
	"code-runner.showExecutionMessage": true,

	// Whether to show 'Run Code' command in editor context menu.
	"code-runner.showRunCommandInEditorContextMenu": true,

	// Whether to show 'Run Code' command in explorer context menu.
	"code-runner.showRunCommandInExplorerContextMenu": true,

	// Whether to show 'Run Code' icon in editor title menu.
	"code-runner.showRunIconInEditorTitleMenu": true,

	// Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
	"code-runner.temporaryFileName": "tempCodeRunnerFile",

	// For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
	"code-runner.terminalRoot": "",

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "avoid",

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [
		"vue"
	],

	// Specify the end of line used by prettier
	"prettier.endOfLine": "auto",

	// Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.
	"prettier.eslintIntegration": false,

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options: 
	// 'css' - Respect the default value of CSS display property. 
	// 'strict' - Whitespaces are considered sensitive. 
	// 'ignore' - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore or similar file
	"prettier.ignorePath": ".prettierignore",

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Override the parser. You shouldn't have to change this setting.
	"prettier.parser": "babylon",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Require a 'prettierconfig' to format
	"prettier.requireConfig": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.
	"prettier.stylelintIntegration": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible.
	//  Valid options:
	//     'none' - No trailing commas
	//     'es5' - Trailing commas where valid in ES5 (objects, arrays, etc)
	//     'all' - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "none",

	// Use 'prettier-tslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from tslint rules.
	"prettier.tslintIntegration": false,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// the trigger effect  on the language
	"shellformat.effectLanguages": [
		"shellscript",
		"dockerfile",
		"dotenv",
		"hosts",
		"jvmoptions",
		"ignore",
		"gitignore",
		"properties",
		"spring-boot-properties",
		"azcli"
	],

	// shfmt -h  to see detail usage , example: -p -bn -ci
	"shellformat.flag": null,

	// the shfmt fullpath  example[ mac,linux ] /usr/local/bin/shfmt  [windows] C:/bin/shfmt.exe   download fron https://github.com/mvdan/sh/releases
	"shellformat.path": null,

	// Force header cell to be center aligned or not.
	"tableformatter.common.centerAlignedHeader": true,

	// Characters processed as fullwidth forcibly.
	"tableformatter.common.explicitFullwidthChars": [],

	// Remove trailing whitespace or not when formatting table.
	"tableformatter.common.trimTrailingWhitespace": true,

	// [Markdown only] Header separator in markdown has one space padding at both ends or not.
	"tableformatter.markdown.oneSpacePadding": true,

	// [Markdown only] Type of formatted table's delimiters on its both sides. (Auto, Normal or Borderless)
	"tableformatter.markdown.tableEdgesType": "Auto",

	// The file name of the formatting utility. Should be available at $PATH, otherwise specify the full file name. Default value is 'clang-format' which is shipped with 'ms-vscode.cpptools' extension.
	"opencl.formatting.name": "clang-format",

	// Command line arguments for a formatting utility. Options are ommited if default 'clang-format' utility is used. In this case create '.clang-format' file in the root of the project to override default options. If other utility is specified (e.g. astyle) provide a list of arguments. Use variable ${workspaceRoot} to specify configuration file in a workspace (e.g. '--options=${workspaceRoot}/.astylerc' for Artistic Style).
	"opencl.formatting.options": [],

	// Url to auth server. @see https://github.com/ShyykoSerhiy/vscode-spotify-auth
	"spotify.authServerUrl": "https://vscode-spotify-auth.azurewebsites.net",

	// Whether to enable logs.
	"spotify.enableLogs": false,

	// Whether to force web api implementation on Linux or MacOs. If you you want this enabled, please, consider using your own spotify.authServerUrl .
	"spotify.forceWebApiImplementation": false,

	// Priority of lyrics button.
	"spotify.lyricsButtonPriority": 0,

	// Url for lyrics server. @see https://github.com/ShyykoSerhiy/vscode-spotify-lyrics .
	"spotify.lyricsServerUrl": "https://vscode-spotify-lyrics.azurewebsites.net/lyrics",

	// Priority of mute button.
	"spotify.muteButtonPriority": 5,

	// Priority of mute|unmute button.
	"spotify.muteUnmuteButtonPriority": 3,

	// Priority of next button.
	"spotify.nextButtonPriority": 8,

	// Panel to display the Lyrics
	"spotify.openPanelLyrics": 1,

	// Priority of pause button.
	"spotify.pauseButtonPriority": 6,

	// Priority of play button.
	"spotify.playButtonPriority": 7,

	// Priority of play|pause button.
	"spotify.playPauseButtonPriority": 9,

	// Priority of previous button.
	"spotify.previousButtonPriority": 10,

	// Base value of priority for all vscode-spotify elements in Status Bar(priority = basePriority+priority). This is done to avoid 'conflicts' with other extensions. 
	"spotify.priorityBase": 30,

	// Whether to show lyrics button.
	"spotify.showLyricsButton": true,

	// Whether to show mute|unmute button.
	"spotify.showMuteUnmuteVolumeButton": true,

	// Whether to show mute button.
	"spotify.showMuteVolumeButton": false,

	// Whether to show next button.
	"spotify.showNextButton": true,

	// Whether to show pause button.
	"spotify.showPauseButton": false,

	// Whether to show play button.
	"spotify.showPlayButton": false,

	// Whether to show play|pause button.
	"spotify.showPlayPauseButton": true,

	// Whether to show previous button.
	"spotify.showPreviousButton": true,

	// Whether to show sign in button.
	"spotify.showSignInButton": true,

	// Whether to show sign out button.
	"spotify.showSignOutButton": true,

	// Whether to show toggle repeating button.
	"spotify.showToggleRepeatingButton": false,

	// Whether to show toggle shuffling button.
	"spotify.showToggleShufflingButton": false,

	// Whether to show unmute button.
	"spotify.showUnmuteVolumeButton": false,

	// Whether to show volume down button.
	"spotify.showVolumeDownButton": false,

	// Whether to show volume up button.
	"spotify.showVolumeUpButton": false,

	// Priority of sign in button.
	"spotify.signInButtonPriority": 15,

	// Priority of sign out button.
	"spotify.signOutButtonPriority": 15,

	// Url to spotify api server. @see https://beta.developer.spotify.com/documentation/web-api/reference/playlists/
	"spotify.spotifyApiUrl": "https://api.spotify.com/v1",

	// Interval of spotify status checks. Frequent status checks may result in faster battery drain and high CPU load (especially on MacOs). Note that with web api implementation 5000 is mimimal possible value.
	"spotify.statusCheckInterval": 5000,

	// Priority of toggle repeating button.
	"spotify.toggleRepeatingButtonPriority": 11,

	// Priority of toggle shuffling button.
	"spotify.toggleShufflingButtonPriority": 12,

	// What to do when trackInfo is clicked: 'none' - do nothing, 'focus_song' - current song will be selected Playlists/Tracks section if it exists there, 'play_pause' - trackInfo essentially becomes playPause button (great option for minimal ui). 
	"spotify.trackInfoClickBehaviour": "focus_song",

	// Current track info that will be displayed. Available keywords: albumName, artistName, trackName
	"spotify.trackInfoFormat": "artistName - trackName",

	// Priority of track info.
	"spotify.trackInfoPriority": 0,

	// Priority of unmute button.
	"spotify.unmuteButtonPriority": 4,

	// Priority of volume down button.
	"spotify.volumeDownButtonPriority": 1,

	// Priority of volume up button.
	"spotify.volumeUpButtonPriority": 2,

	// Specify the line length that the formatter will wrap on
	"scssFormatter.printWidth": 120,

	// Use single quotes instead of double quotes.
	"scssFormatter.singleQuote": false,

	// Specify the number of spaces per indentation-level.
	"scssFormatter.tabWidth": 2,

	// Indent lines with tabs instead of spaces.
	"scssFormatter.useTabs": false,

	// The setting `github.hosts` has been deprecated in favor of `githubPullRequests.hosts`.
	// List of host credentials. For example, "github.hosts": [ { "host": "https://github.com", "token": "GITHUB TOKEN" } ]
	"github.hosts": [],

	// The method to use when merging pull requests.
	"githubPullRequests.defaultMergeMethod": "merge",

	// List of host credentials. For example, "githubPullRequests.hosts": [ { "host": "https://github.com", "token": "GITHUB TOKEN" } ]
	"githubPullRequests.hosts": [],

	// The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.
	// By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.
	"githubPullRequests.includeRemotes": "default",

	// Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request.
	"githubPullRequests.logLevel": "info",

	// Specifies what queries should be used in the GitHub Pull Requests tree. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories "Waiting For My Review", "Assigned To Me" and "Created By Me". If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],

	// List of remotes to fetch pull requests from. If no remotes are specified, will default to `upstream` or `origin` if these remotes are present, or all valid GitHub remotes.
	"githubPullRequests.remotes": null,

	// When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.
	"githubPullRequests.showInSCM": false,

	// Enable usage data and errors to be sent to a GitHub online service
	"githubPullRequests.telemetry.enabled": true,

	// The setting `telemetry.optout` has been deprecated in favor of `githubPullRequests.telemetry.enabled`.
	// Disable usage data and errors to be sent to a GitHub online service
	"telemetry.optout": false,

	// If true, then auto-update the proof view with the cached state at the cursor
	"coq.autoRevealProofStateAtCursor": false,

	// Control how to indent the line after a bullet. "none" - no indent; "indent" - tab-indent
	"coq.editor.indentAfterBullet": "none",

	// Choose to host external proof-views either via the file system or a web service. "file": let the filesystem host the webpage (file:///); "http": run a webserver to host the webpage. Some external viewers (like Window's 'start' and OSX's 'open') do not preserve query parameters when viewing "file" schemes, so you may try "http" instead.
	"coq.externalViewScheme": "http",

	// The command to execute to view a url.
	"coq.externalViewUrlCommand": "${url}",

	// Hack: vscode does not currently indicate to extensions where user-settings should be stored. Currently, we store such settings in this extension's own directory, but these will be overriden when this extension is updated. This setting allows you to override where user-settings are stored. WARNING: this setting will eventually go away.
	"coq.hacks.userSettingsLocation": null,

	// Interpret to point will interpret up to *and including* the sentence at the cursor
	"coq.interpretToEndOfSentence": false,

	// Load settings from _CoqProject (if found at the root of the Code project)
	"coq.loadCoqProject": true,

	// Move the editor's cursor position as Coq interactively steps forward/backward a command
	"coq.moveCursorToFocus": true,

	// A list of arguments to send to coqtop.
	"coqtop.args": [],

	// On Windows: if `coqtop.wrapper` is not specified or the file does not exist, attempt to automatically find and use a wrapper for coqtop.
	"coqtop.autoUseWrapper": true,

	// Path to coqc and coqtop binaries.
	"coqtop.binPath": "",

	// If using the coqtop-wrapper, instruct it to generate a trace file of its xml-protocol interactions. The trace file will be located adjacent to the Coq script with extension `.coq-trace.xml`
	"coqtop.traceXmlProtocol": false,

	// The filename of an executable to act as an intermediary between coqtop and this extension. It should support an additional `<call val="Interrupt"><unit/></call>` command to send SIGNIT to coqtop and support HOST:PORT addresses (one port number -- not two).
	"coqtop.wrapper": "",

	// Colour of the active icon
	"activitusbar.activeColour": "",

	// Position of the activitus bar section within the status bar
	"activitusbar.alignment": "Left",

	// Colour of inactive icons
	"activitusbar.inactiveColour": "",

	// Controls the position within the status bar (higher values will move the icons further to the left
	"activitusbar.priority": 99999,

	// Set this to true if you use the search view in the bottom panel instead of the side bar. Do not set this to true when the search view is in the normal location!
	"activitusbar.searchViewInPanel": "false",

	// Set this to false if you don't want to toggle the side bar if the same view is selected again
	"activitusbar.toggleSidebar": true,

	// Views to include on the status bar with associated icons
	"activitusbar.views": {
		"explorer": "file-text",
		"search": "search",
		"scm": "repo-forked",
		"debug": "bug",
		"extensions": "package"
	},

	// Color of the indent marker for dark themes
	"indenticator.color.dark": "#888",

	// Color of the indent marker for light themes
	"indenticator.color.light": "#999",

	// Lines before the current indent to be shown on hover
	"indenticator.hover.peekBack": 1,

	// Block placeholder to be written between peeked lines
	"indenticator.hover.peekBlockPlaceholder": "...",

	// Lines after the current indent to be shown on hover
	"indenticator.hover.peekForward": 0,

	// Remove lines from the hover at the beginning and end that have less characters than this
	"indenticator.hover.trimLinesShorterThan": 2,

	// Color of the inner indent marker for dark themes
	"indenticator.inner.color.dark": "",

	// Color of the inner indent marker for light themes
	"indenticator.inner.color.light": "#999",

	// Lines before the current inner indent to be shown on hover
	"indenticator.inner.hover.peekBack": 1,

	// Block placeholder to be written between peeked lines for the hover of the inner indent
	"indenticator.inner.hover.peekBlockPlaceholder": "...",

	// Lines after the current inner indent to be shown on hover
	"indenticator.inner.hover.peekForward": 0,

	// Remove lines from the inner indent hover at the beginning and end that have less characters than this
	"indenticator.inner.hover.trimLinesShorterThan": 2,

	// Whether to highlight the indent of the block enclosed by the current line
	"indenticator.inner.showHighlight": false,

	// Whether to display the hover near the inner indent line, or minimum number of lines in current indent block to activate the hover.
	"indenticator.inner.showHover": false,

	// Line style of the inner indent marker
	"indenticator.inner.style": "inset",

	// Width of the inner indent marker in pixels
	"indenticator.inner.width": 1,

	// A construct with language identifiers as properties containing a subset of indenticator options to be applied to that language
	"indenticator.languageSpecific": {},

	// Whether to display the current indent depth on the statusbar
	"indenticator.showCurrentDepthInStatusBar": true,

	// Whether to highlight the indent of the block enclosing the current line
	"indenticator.showHighlight": true,

	// Whether to display the hover near the indent line, or minimum number of lines in current indent block to activate the hover.
	"indenticator.showHover": false,

	// Line style of the indent marker
	"indenticator.style": "inset",

	// Width of the indent marker in pixels
	"indenticator.width": 1,

	// only complete directives related to the block where cursor is located
	"nginx-conf-hint.enableStrictCompletion": true,

	// Syntaxes for Nginx config file, "original" or "sublime". (Need to reload VS Code)
	"nginx-conf-hint.syntax": "original",

	// Opacity value. Should be between 0 and 255, where 0 is invisible window
	"winopacity.opacity": 245,

	// Additional resource directory paths SVG Editor can access.
	"svgeditor.additionalResourcePaths": [],

	// Collect two or more transform functions into a matrix.
	"svgeditor.collectTransformMatrix": true,

	// The number of decimal places.
	"svgeditor.decimalPlaces": 1,

	// Specifies the unit when creating some shapes.
	"svgeditor.defaultUnit": null,

	// Initial filename extension of new untitled file.
	"svgeditor.filenameExtension": "svg",

	// Initial height of new untitled file.
	"svgeditor.height": "400px",

	// Indent size of spaces for auto-formatting.
	"svgeditor.indentSize": 4,

	// Indent style for auto-formatting.
	"svgeditor.indentStyle": "space",

	// Use style attribute instead of presentation attriubte when there are no previous specifications.
	"svgeditor.useStyleAttribute": false,

	// Initial width of new untitled file.
	"svgeditor.width": "400px",

	// Controls if it should ask for confirmation when deleting a file.
	"fileutils.delete.confirm": true,

	// Move file to the recycle bin instead of deleting it permanently.
	"fileutils.delete.useTrash": false,

	// Controls whether to close the tab of the moved file (Will work only if 'Close On File Delete' setting is disabled)
	"fileutils.move.closeOldTab": true,

	// Controls whether to close the tab of the renamed file (Will work only if 'Close On File Delete' setting is disabled)
	"fileutils.rename.closeOldTab": true,

	// Controls if directory selector should be shown.
	"fileutils.typeahead.enabled": true,

	// Configure glob patterns for excluding files and folders.
	"fileutils.typeahead.exclude": {},

	// Settings specific to CSS minification. Tool tips and completion are provided when editing your settings.
	"minify.css": {
		"advanced": true,
		"aggressiveMerging": true,
		"compatibility": "*",
		"inliner": {},
		"keepBreaks": false,
		"keepSpecialComments": "*",
		"mediaMerging": true,
		"processImport": true,
		"processImportFrom": [
			"all"
		],
		"rebase": true,
		"restructuring": true,
		"root": "${workspaceRoot}",
		"roundingPrecision": 2,
		"semanticMerging": false,
		"shorthandCompacting": true
	},

	// Settings specific to HTML minification. Tool tips and completion are provided when editing your settings.
	"minify.html": {
		"caseSensitive": false,
		"collapseBooleanAttributes": true,
		"collapseInlineTagWhitespace": false,
		"collapseWhitespace": true,
		"conservativeCollapse": false,
		"customAttrAssign": [],
		"customAttrCollapse": "",
		"customAttrSurround": [],
		"customEventAttributes": [
			"^on[a-z]{3,}$"
		],
		"decodeEntities": false,
		"html5": true,
		"ignoreCustomComments": [
			"^!"
		],
		"ignoreCustomFragments": [
			"<%[\\s\\S]*?%>",
			"<\\?[\\s\\S]*?\\?>"
		],
		"includeAutoGeneratedTags": true,
		"keepClosingSlash": false,
		"maxLineLength": false,
		"minifyCSS": true,
		"minifyJS": true,
		"minifyURLs": false,
		"preserveLineBreaks": false,
		"preventAttributesEscaping": false,
		"processConditionalComments": false,
		"processScripts": [],
		"quoteCharacter": "\"",
		"removeAttributeQuotes": false,
		"removeComments": false,
		"removeEmptyAttributes": false,
		"removeEmptyElements": false,
		"removeOptionalTags": false,
		"removeRedundantAttributes": false,
		"removeScriptTypeAttributes": false,
		"removeStyleLinkTypeAttributes": false,
		"sortAttributes": false,
		"sortClassName": false,
		"trimCustomFragments": false,
		"useShortDoctype": false
	},

	// Settings specific to Javascript minification. Tool tips and completion are provided when editing your settings.
	"minify.js": {
		"mangle": true,
		"compress": {
			"sequences": true,
			"properties": true,
			"dead_code": true,
			"drop_debugger": true,
			"unsafe": false,
			"unsafe_comps": false,
			"conditionals": true,
			"comparisons": true,
			"evaluate": true,
			"booleans": true,
			"loops": true,
			"unused": true,
			"hoist_funs": true,
			"keep_fargs": true,
			"keep_fnames": false,
			"hoist_vars": false,
			"if_return": true,
			"join_vars": true,
			"collapse_vars": false,
			"reduce_vars": false,
			"side_effects": true,
			"pure_getters": false,
			"pure_funcs": null,
			"negate_iife": false,
			"drop_console": false,
			"passes": 1,
			"global_defs": {}
		},
		"output": {
			"ascii_only": false,
			"inline_script": false,
			"max_line_len": 32000,
			"braces": false,
			"semicolons": true,
			"comments": false,
			"shebang": true,
			"preamble": null,
			"quote_style": "best"
		}
	},

	// Minify file on save if a related (.min.[ext]) file already exists. Includes directory minification/
	"minify.minifyExistingOnSave": false,

	// Controls when to activate the extension
	"perforce.activationMode": "autodetect",

	// Automatically Add a file to depot when Created
	"perforce.addOnFileCreate": false,

	// Output changelist numbers rather than revision numbers for each line
	"perforce.annotate.changelist": false,

	// Show annotation for every file
	"perforce.annotate.enable": false,

	// Output the user who modified the line in the file and the date it was modified
	"perforce.annotate.user": false,

	// How long can the queue be? When the queue length exceeds that value, the selected strategy is executed to shed the load
	"perforce.bottleneck.highWater": 50,

	// How many jobs can be executing at the same time
	"perforce.bottleneck.maxConcurrent": null,

	// How long to wait after launching a job before launching another one
	"perforce.bottleneck.minTime": 0,

	// The penalty value used by the BLOCK strategy
	"perforce.bottleneck.penalty": null,

	// Which strategy to use when the queue gets longer than the high water mark
	"perforce.bottleneck.strategy": "",

	// Specifies the direction of the chnagelist sorting
	"perforce.changelistOrder": "descending",

	// Overrides any P4CLIENT setting with the specified client name
	"perforce.client": "none",

	// Configure a path to p4 or an alternate command if needed
	"perforce.command": "none",

	// Specify if we should run in compatibility mode, currently support 'perforce' and 'sourcedepot'
	"perforce.compatibilityMode": "perforce",

	// Controls the badge counter for Perforce
	"perforce.countBadge": "all-but-shelved",

	// Whether debug mode is active or not.
	"perforce.debugModeActive": false,

	// Automatically delete a file from depot when deleted
	"perforce.deleteOnFileDelete": false,

	// Overrides any PWD setting (current working directory) and replaces it with the specified directory
	"perforce.dir": "none",

	// Automatically open a file for edit when Modified
	"perforce.editOnFileModified": false,

	// Automatically open a file for edit when saved
	"perforce.editOnFileSave": false,

	// Don't show changelists without any file in the Source Control section.
	"perforce.hideEmptyChangelists": false,

	// Don't show files that are not in the current opened workspace. Default changelist only submits files that are opened in current workspace.  Warning: If you submit other changelists than the default it will submit files that are not visible.
	"perforce.hideNonWorkspaceFiles": false,

	// Don't show the shelved files in the Source Control section.
	"perforce.hideShelvedFiles": false,

	// Specifies the prefix of the changelists to be ignored.
	"perforce.ignoredChangelistPrefix": "",

	// Specify the largest amount of data allowed for commands, including file comparison. Default is 204800 (200KB)
	"perforce.maxBuffer": 1048576,

	// Specify the maximum number of file should be processed in a single command line (doesn't include changelist operations). Default is 32
	"perforce.maxFilePerCommand": 32,

	// Overrides any P4PASSWD setting with the specified password
	"perforce.password": "none",

	// Overrides any P4PORT setting with the specified protocol:host:port
	"perforce.port": "none",

	// Try to resolve real file path before executing command.
	"perforce.realpath": false,

	// Open file changes when selected in SCM Explorer
	"perforce.scmFileChanges": true,

	// Overrides any P4USER, USER, or USERNAME setting with the specified user name
	"perforce.user": "none",

	// Show git blame information for each line
	"githd.blameView.enabled": true,

	// List committed files with the folders.
	"githd.explorerView.withFolder": true,

	// The commits count listed in history view. Other than setting it, you can load more logs with clicking ... or load the entire log with command.
	"githd.logView.commitsCount": 300,

	// Display the express mode setting on the status bar
	"githd.logView.displayExpressStatus": true,

	// The Express Mode will load the history view much faster. But the change stat will not be present.
	"githd.logView.expressMode": false,

	// The trace level set to see githd logs from output window.
	"githd.traceLevel": "silent",

	// Open the HLSL Documentation links on the side
	"hlsl.openDocOnSide": true,

	// Configures if the extension HLSL language suggestions are enabled.
	"hlsl.suggest.basic": true,

	// Set the JDK 1.8 folder path required to launch the XML Language Server.
	"xmlLang.javaHome": "",

	// Set the XML and schema association.
	"xmlLang.xmlAssociations": [],

	// Set the XML catalog files. Use ";" as the file separators.
	"xmlLang.xmlCatalogFiles": "",

	// Maximum number of item to keep in the multiclip buffer
	"multiclip.bufferSize": 10,

	// Specify if text should be formatted after pasting
	"multiclip.formatAfterPaste": false,

	// Enables the trailing slash on the folder path insertion.
	"path-autocomplete.enableFolderTrailingSlash": true,

	// Allows you to exclude certain files from the suggestions.
	"path-autocomplete.excludedItems": {},

	// Adds the extension when inserting file on import statements.
	"path-autocomplete.extensionOnImport": false,

	// Glob patterns for disabling the path completion in the specified file types.
	"path-autocomplete.ignoredFilesPattern": "",

	// Adds the extension when inserting file names.
	"path-autocomplete.includeExtension": true,

	// Defines custom mappings for the autocomplete paths.
	"path-autocomplete.pathMappings": {},

	// Defines the separators for support outside string.
	"path-autocomplete.pathSeparators": " \t({[",

	// Custom transformations applied to the inserted text.
	"path-autocomplete.transformations": [],

	// Enables path autocompletion outside strings.
	"path-autocomplete.triggerOutsideStrings": false,

	// If enabled it will use backslash (\) as a path separator.
	"path-autocomplete.useBackslash": false,

	// Enable CSSTree validation for CSS files.
	"csstree.enable": true,

	// The length of time (in seconds) to cache library and search results
	"cdnjs.cacheTime": 21600,

	// The maxmium number of Recent Libraries to save
	"cdnjs.maxRecentLibraries": 10,

	// Protocol for urls in HTML tags. Possible values are 'https://', 'http://' or '//'
	"cdnjs.protocol": "https://",

	// Quote style for HTML tags. Possible values are 'single' or 'double'
	"cdnjs.quoteStyle": "single",

	// Git metrics
	"showGitMetrics": false,

	// Enable/disable file event debug logging
	"toggleFileEventLogging": false,

	// Controls whether global should automatically update the tags after file saved. "Default": disable autoupdate if GTAGS database size is larger than 50MB. It is recommended to disable this feature if the project is too large.
	"gnuGlobal.autoUpdate": "Default",

	// Enable/disable auto-completion feature.
	"gnuGlobal.completion": "Enabled",

	// Specify the encoding of the command line output.
	"gnuGlobal.encoding": "utf-8",

	// Specify the path to the global.
	"gnuGlobal.globalExecutable": "global",

	// Specify the path to the gtags.
	"gnuGlobal.gtagsExecutable": "gtags",

	// If this option is enabled, each file whose suffix is ".h" is treated as a C++ source file. You need to rebuild gtags if you change this configuration.
	"gnuGlobal.gtagsForceCpp": "Disabled",

	// Skip symbolic links while building tag files. Could be None, File, Directory or All. Default is None. (Requires GNU Global 6.6.3)
	"gnuGlobal.gtagSkipSymlink": "None",

	// (Experimental) Used as the path to search for library functions. If the specified tags is not found in the project, this extension also searches in these paths. Please note that 'Rebuild Gtags Database' doesn't rebuild the tag files for these libraries. You need to build tags for them individually.
	"gnuGlobal.libraryPath": [],

	// If objDirPrefix is set and objDirPrefix directory exists, gtags creates objDirPrefix/project_dir directory and makes tag files in it. Global will also try to search tag files in such directory. Only support UNIX style filesystem. Windows is not supported.
	"gnuGlobal.objDirPrefix": "",

	// Extra properties that could be passed to the code analyzers. e.g. `{"sonar.javascript.globals": "xxx"}`. See [documentation](https://redirect.sonarsource.com/doc/plugin-library.html) of each analyzers.
	"sonarlint.analyzerProperties": {},

	// Bind the current project to SonarQube/SonarCloud using the connection referenced by `serverId` and configured in `sonarlint.connectedMode.servers`. Connected mode allows to use the same code analyzers, rules and configuration that are defined in the server.
	// 
	// Example:
	// 
	//     "sonarlint.connectedMode.project": {
	//       "serverId": "the_server_connection_id",
	//       "projectKey": "my_project"
	//     }
	"sonarlint.connectedMode.project": {},

	// Configure one or more connection(s) to SonarQube/SonarCloud. For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `sonarlint.connectedMode.project`.
	// 
	// Example for SonarCloud:
	// 
	//     "sonarlint.connectedMode.servers": [
	//       {
	//         "serverId": "my_orga_in_sonarcloud.io",
	//         "serverUrl": "https://sonarcloud.io",
	//         "organizationKey": "my_organization",
	//         "token": "V2VkIE1..."
	//       }
	//     ]
	// 
	// Example for SonarQube:
	// 
	//     "sonarlint.connectedMode.servers": [
	//       {
	//         "serverId": "my_sonarqube",
	//         "serverUrl": "https://sonar.mycompany.com",
	//         "token": "V2VkIE1..."
	//       }
	//     ]
	"sonarlint.connectedMode.servers": [],

	// Disable sending anonymous usage statistics
	"sonarlint.disableTelemetry": false,

	// Path to a JRE (8 or more recent) used to launch the SonarLint Language Server. 
	// 
	//  On Windows, backslashes must be escaped, e.g. `C:\\Program Files\\Java\\jdk1.8.0_161`
	"sonarlint.ls.javaHome": "",

	// Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`
	"sonarlint.ls.vmargs": "",

	// Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files.
	"sonarlint.testFilePattern": "{**/test/**,**/*test*,**/*Test*}",

	// Whether to open browser on restart or not.
	"browsersync.openBrowser": true,

	// BrowserSync configuration object, https://www.browsersync.io/docs/options
	"browsersync.options": {},

	// Which additional file extensions, besides PHP, should be fixed as well. E.g. inc, without the leading dot. For this to work you'll also have to configure your VSCode files.associations settings (https://code.visualstudio.com/Docs/languages/overview#_common-questions).
	"phpformatter.additionalExtensions": [],

	// Add arguments to the executed fix command, like so: ['--level=psr2', '--fixers=linefeed,short_tag,indentation'].
	"phpformatter.arguments": [
		"--level=psr2"
	],

	// Whether the php-cs-fixer library has been installed using Composer. If true, the extension will override pharPath and assume you have added Composer to your PATH.
	"phpformatter.composer": false,

	// Deprecated in favor of phpformatter.arguments.
	"phpformatter.fixers": "",

	// Deprecated in favor of phpformatter.arguments.
	"phpformatter.level": "",

	// If true, the extension will log all sorts of (debug) info to the console. Useful for troubleshooting.
	"phpformatter.logging": false,

	// If true, the extension will show notifications.
	"phpformatter.notifications": true,

	// Should point to php-cs-fixer.phar file, if you have installed this manually (without Composer). Should include .phar extension.
	"phpformatter.pharPath": "",

	// If the pharPath is set, and you are not using Composer, and you haven't added PHP to your PATH, this should point to the php.exe file.
	"phpformatter.phpPath": "php",

	// When docthis.includeAuthorTag is enabled, will add @author tag with this value.
	"docthis.authorName": "(Set the text for this tag by adding docthis.authorName to your settings file.)",

	// When enabled, hungarian notation will be used as a type hint.
	"docthis.enableHungarianNotationEvaluation": false,

	// When enabled, will add the @author tag.
	"docthis.includeAuthorTag": false,

	// When enabled, will add the @date tag in YYYY-MM-DD format.
	"docthis.includeDateTag": false,

	// When enabled, JSDoc comments for functions and methods will include @description.
	"docthis.includeDescriptionTag": false,

	// When enabled, memberOf information is added to comment tags on class members.
	"docthis.includeMemberOfOnClassMembers": true,

	// When enabled, memberOf information is added to comment tags on interface members.
	"docthis.includeMemberOfOnInterfaceMembers": true,

	// When enabled, type information is added to comment tags.
	"docthis.includeTypes": true,

	// When enabled, will use names of params & methods as type hints.
	"docthis.inferTypesFromNames": false,

	// Turn on logging.
	"taskExplorer.debug": false,

	// Set debug verbosity (1 - Low / 5 - High).
	"taskExplorer.debugLevel": 1,

	// Enable ansicon output colorization for ant tasks.
	"taskExplorer.enableAnsiconForAnt": true,

	// Enable/show ant targets as tasks.
	"taskExplorer.enableAnt": true,

	// Enable/show app-publsiher tasks.
	"taskExplorer.enableApp-publisher": true,

	// Enable/show bash/sh scripts as tasks.
	"taskExplorer.enableBash": true,

	// Enable/show batch scripts as tasks.
	"taskExplorer.enableBatch": true,

	// Add a task explorer tray in the Explorer sidebar view.
	"taskExplorer.enableExplorerView": true,

	// Enable/show gradle tasks.
	"taskExplorer.enableGradle": true,

	// Enable/show grunt tasks.
	"taskExplorer.enableGrunt": true,

	// Enable/show gulp tasks.
	"taskExplorer.enableGulp": true,

	// Enable/show makefiles as tasks.
	"taskExplorer.enableMake": true,

	// Enable/show npm scripts as tasks.
	"taskExplorer.enableNpm": true,

	// Enable/show nullsoft installer scripts as tasks.
	"taskExplorer.enableNsis": true,

	// Enable/show perl scripts as tasks.
	"taskExplorer.enablePerl": true,

	// Enable/show powershell scripts as tasks.
	"taskExplorer.enablePowershell": true,

	// Enable/show python scripts as tasks.
	"taskExplorer.enablePython": true,

	// Enable/show ruby scripts as tasks.
	"taskExplorer.enableRuby": true,

	// Add a task explorer to the the sidebar.
	"taskExplorer.enableSideBar": false,

	// Enable/show tsc node with npm tasks.
	"taskExplorer.enableTsc": true,

	// Enable/show vscode tasks.
	"taskExplorer.enableWorkspace": true,

	// Configure global glob patterns for folders and files that should be excluded from script detection.
	"taskExplorer.exclude": [
		"**/.vscode-test/**",
		"**/bin/**",
		"**/build/**",
		"**/CompiledOutput/**",
		"**/dist/**",
		"**/doc/**",
		"**/ext/**",
		"**/out/**",
		"**/output/**",
		"**/packages/**",
		"**/release/**",
		"**/releases/**",
		"**/samples/**",
		"**/sdks/**",
		"**/static/**",
		"**/target/**",
		"**/test/**",
		"**/third_party/**",
		"**/vendor/**"
	],

	// Configure global glob patterns for locating Apache Ant files not named b(B)uild.xml.
	"taskExplorer.includeAnt": [],

	// The path to the ansicon program, if not registered in system path
	"taskExplorer.pathToAnsicon": "",

	// The path to the ant program, if not registered in system path
	"taskExplorer.pathToAnt": "",

	// The path to the app-publisher program, if not registered in system path
	"taskExplorer.pathToAppPublisher": "",

	// The path to the bash/sh program (on Windows, if not registered in system path)
	"taskExplorer.pathToBash": "",

	// The path to the gradle program, if not registered in system path.
	"taskExplorer.pathToGradle": "",

	// The path to the make program, if not registered in system path.
	"taskExplorer.pathToMake": "",

	// The path to the nsis program, if not registered in system path.
	"taskExplorer.pathToNsis": "",

	// The path to the perl program, if not registered in system path.
	"taskExplorer.pathToPerl": "",

	// The path to the python program, if not registered in system path.
	"taskExplorer.pathToPython": "",

	// The path to the ruby program, if not registered in system path.
	"taskExplorer.pathToRuby": "",

	// Enable/disable Markdown Table Formatter.
	"markdownTableFormatter.enable": true,

	// Automatically compile SASS/SCSS file after saving
	"easysass.compileAfterSave": true,

	// Regular expression for filenames (excluding path) excluded from building. Leave empty to disable.
	"easysass.excludeRegex": "",

	// Define format(s) for outputted css files. Use "nested", "expanded", "compact" or "compressed" as a format.
	"easysass.formats": [
		{
			"format": "expanded",
			"extension": ".css"
		},
		{
			"format": "compressed",
			"extension": ".min.css"
		}
	],

	// Target directory for generated files. If relative, will be based on currently opened folder in VS Code.
	"easysass.targetDir": "",

	// API key you create in your CircleCI dashboard. Scope must be set to either "Build Artifacts" or "All".
	"circleci.apiKey": "",

	// How often this extension will refresh status for the current branch. In seconds.
	"circleci.rate": 10,

	// Whether or not auto prefix css files
	"css-auto-prefix.enabled": true,

	// The list of attributes to add support for, and what prefixes each one should receive.
	"css-auto-prefix.prefixes": {
		"transform": [
			"webkit",
			"moz",
			"ms",
			"o"
		],
		"transition": [
			"webkit",
			"moz",
			"ms",
			"o"
		],
		"border-radius": [
			"webkit",
			"moz",
			"ms",
			"o"
		],
		"animation": [
			"webkit"
		],
		"box-reflect": [
			"webkit"
		],
		"filter": [
			"webkit"
		],
		"font-feature-settings": [
			"webkit",
			"moz"
		],
		"backface-visibility": [
			"webkit"
		],
		"box-decoration-break": [
			"webkit"
		],
		"hyphens": [
			"webkit",
			"moz",
			"ms"
		],
		"marquee-direction": [
			"webkit"
		],
		"marquee-play-count": [
			"webkit"
		],
		"marquee-speed": [
			"webkit"
		],
		"marquee-style": [
			"webkit"
		],
		"text-combine-upright": [
			"webkit",
			"moz",
			"ms"
		],
		"text-decoration-color": [
			"moz"
		],
		"text-decoration-line": [
			"moz"
		],
		"text-decoration-style": [
			"moz"
		],
		"text-orientation": [
			"webkit"
		],
		"writing-mode": [
			"webkit",
			"ms"
		]
	},

	// Array of additional connections. Members must be objects of the same type as remoteBrowser.connectionOptions.
	"remoteBrowser.additionalConnections": [],

	// ssh2 Connection args. Supports a subset of the ssh2::ConnectConfig options from the 'ssh2' library
	//  host  - Remote Host
	//  port - Port number(Defaults to 22) 
	// username  - Username for authentication 
	//  password  - Password for password-based user authentication (NOT RECOMMENDED STORING HERE! EITHER USE KEY-BASED AUTH OR ENTER PASSWORD IN PROMPT)
	//  agent - Path to ssh-agent's UNIX socket for ssh-agent-based user authentication 
	//  privateKey - Path to a private key file for either key-based or hostbased user authentication 
	//  passphrase - For an encrypted private key, this is the passphrase used to decrypt it. 
	//  localHostname - Along with `localUsername` and `privateKey`, set this to a non-empty string for hostbased user authentication 
	//  localUsername - Along with `localHostname` and `privateKey`, set this to a non-empty string for hostbased user authentication 
	//  defaultPath - Default directory to start in on connect (Absolute path)
	"remoteBrowser.connectionOptions": {
		"host": "127.0.0.1",
		"username": "user"
	},

	// Local temp folder for storing downloaded files. defaults to os.tmpdir()
	"remoteBrowser.tmpFolder": null,

	// Add languageIds here to disable any comment completion for that language.
	"auto-comment-blocks.disabledLanguages": [],

	// Add languageIds here to enable '#'-style single line comment blocks for that language. This allows unsupported languages to have comment completion.
	"auto-comment-blocks.hashStyleBlocks": [],

	// Add languageIds here to enable ';'-style single line comment blocks for that language. This allows unsupported languages to have comment completion.
	"auto-comment-blocks.semicolonStyleBlocks": [],

	// If enabled, a new commented line is inserted when Enter is pressed, and comment blocks are broken by pressing Shift+Enter. If disabled (the default), a commented line is inserted when Shift+Enter is pressed, and comment blocks are broken by pressing Enter.
	"auto-comment-blocks.singleLineBlockOnEnter": false,

	// Add languageIds here to enable '//' and '///'-style single line comment blocks for that language. This allows unsupported languages to have comment completion.
	"auto-comment-blocks.slashStyleBlocks": [],

	// Active indentation guides rendering color for dark themes.
	"guides.active.color.dark": "rgba(120, 60, 60, 0.75)",

	// Active indentation guides rendering color for light themes.
	"guides.active.color.light": "rgba(200, 100, 100, 0.75)",

	// Enable active indentation guides in addition to normal indentation guides.
	"guides.active.enabled": true,

	// Expand active indentation guides on the bracket's line.
	"guides.active.expandBrackets": true,

	// Shift active indentations by a level. This will also render an extra indentation guide.
	"guides.active.extraIndent": false,

	// Enable active indentation region indicator in the gutter area in addition to normal indentation guides.
	"guides.active.gutter": false,

	// Hide active indentation guides in selections.
	"guides.active.hideOnSelection": true,

	// Active indentation guides rendering style.
	"guides.active.style": "solid",

	// Active indentation guides rendering width.
	"guides.active.width": 1,

	// Enable the extension.
	"guides.enabled": true,

	// Indentation background colors.
	"guides.indent.backgrounds": [],

	// Hide indentation background in selections.
	"guides.indent.hideBackgroundOnSelection": true,

	// Show start-of-line indentation guides.
	"guides.indent.showFirstIndentGuides": true,

	// Maximum rendering boundary based on current cursor position. Set to -1 for no limit. Use floating point between 0-1 to determine from document size instead.
	"guides.limit.maximum": 500,

	// Normal indentation guides rendering color for dark themes.
	"guides.normal.color.dark": "rgba(60, 60, 60, 0.75)",

	// Normal indentation guides rendering color for light themes.
	"guides.normal.color.light": "rgba(220, 220, 220, 0.75)",

	// Enable normal indentation guides.
	"guides.normal.enabled": true,

	// Hide normal indentation guides in selections.
	"guides.normal.hideOnSelection": true,

	// Normal indentation guides rendering style.
	"guides.normal.style": "solid",

	// Normal indentation guides rendering width.
	"guides.normal.width": 1,

	// Override default Visual Studio Code behaviours (such as indentation guides or rulers).
	"guides.overrideDefault": false,

	// Send anonymous usage statistics data to the developer.
	"guides.sendUsagesAndStats": true,

	// Stack indentation guides rendering color for dark themes.
	"guides.stack.color.dark": "rgba(80, 80, 80, 0.75)",

	// Stack indentation guides rendering color for light themes.
	"guides.stack.color.light": "rgba(180, 180, 180, 0.75)",

	// Enable stack indentation guides in addition to normal indentation guides.
	"guides.stack.enabled": true,

	// Hide stack indentation guides in selections.
	"guides.stack.hideOnSelection": true,

	// Stack indentation guides rendering style.
	"guides.stack.style": "solid",

	// Stack indentation guides rendering width.
	"guides.stack.width": 1,

	// Time duration between each guide lines update (in seconds).
	"guides.updateDelay": 0.1,

	// A flag which indicates whether code metrics are shown as code lens
	"codemetrics.basics.CodeLensEnabled": true,

	// Threshold to show code lens for code metrics
	"codemetrics.basics.CodeLensHiddenUnder": 3,

	// Color for the extreme complexity level
	"codemetrics.basics.ComplexityColorExtreme": "#ff0000",

	// Color for the high complexity level
	"codemetrics.basics.ComplexityColorHigh": "#f44034",

	// Color for the low complexity level
	"codemetrics.basics.ComplexityColorLow": "#4bb14f",

	// Color for the normal complexity level
	"codemetrics.basics.ComplexityColorNormal": "#ffc208",

	// Threshold to determine extreme high complexity level
	"codemetrics.basics.ComplexityLevelExtreme": 25,

	// Code lens message for extreme high complexity level
	"codemetrics.basics.ComplexityLevelExtremeDescription": "Bloody hell...",

	// Threshold to determine high complexity level
	"codemetrics.basics.ComplexityLevelHigh": 10,

	// Code lens message for high complexity level
	"codemetrics.basics.ComplexityLevelHighDescription": "You must be kidding",

	// Threshold to determine low complexity level
	"codemetrics.basics.ComplexityLevelLow": 0,

	// Code lens message for low complexity level
	"codemetrics.basics.ComplexityLevelLowDescription": "Everything is cool!",

	// Threshold to determine normal complexity level
	"codemetrics.basics.ComplexityLevelNormal": 5,

	// Code lens message for normal complexity level
	"codemetrics.basics.ComplexityLevelNormalDescription": "It's time to do something...",

	// Code lens message template {0} stands for the actual value {1} is for the complexity level description
	"codemetrics.basics.ComplexityTemplate": "Complexity is {0} {1}",

	// A flag which indicates whether code metrics are shown as inline decoration
	"codemetrics.basics.DecorationModeEnabled": true,

	// A flag which indicates whether code metrics are shown as inline decoration
	"codemetrics.basics.DecorationTemplate": "<svg xmlns='http://www.w3.org/2000/svg' width='{{size}}px' height='{{size}}px' viewbox='0 0 {{size}} {{size}}'><rect width='{{size}}' height='{{size}}' style='fill:{{color}};stroke-width:1;stroke:#fff'/></svg>",

	// A flag which indicates whether code metrics are shown as diagnostics
	"codemetrics.basics.DiagnosticsEnabled": false,

	// A flag which indicates whether codemetrics are enabled for HTML
	"codemetrics.basics.EnabledForHTML": true,

	// A flag which indicates whether codemetrics are enabled for JS
	"codemetrics.basics.EnabledForJS": true,

	// A flag which indicates whether codemetrics are enabled for JSX
	"codemetrics.basics.EnabledForJSX": true,

	// A flag which indicates whether codemetrics are enabled for Lua
	"codemetrics.basics.EnabledForLua": true,

	// A flag which indicates whether codemetrics are enabled for TS
	"codemetrics.basics.EnabledForTS": true,

	// A flag which indicates whether codemetrics are enabled for TSX
	"codemetrics.basics.EnabledForTSX": true,

	// A flag which indicates whether codemetrics are enabled for Vue
	"codemetrics.basics.EnabledForVue": true,

	// Array of exclusion patterns (in glob format)
	"codemetrics.basics.Exclude": [],

	// File size limit in megabytes, above this codemetrics are not going to be computed, use a negative number to allow any size
	"codemetrics.basics.FileSizeLimitMB": 0.5,

	// A flag which indicates whether code metrics are enabled for arrow functions (can also be toggled via a command)
	"codemetrics.basics.MetricsForArrowFunctionsToggled": true,

	// A flag which indicates whether code metrics are enabled for class declarations
	"codemetrics.basics.MetricsForClassDeclarationsToggled": true,

	// A flag which indicates whether code metrics are enabled for constructors
	"codemetrics.basics.MetricsForConstructorsToggled": true,

	// A flag which indicates whether code metrics are enabled for enum declarations
	"codemetrics.basics.MetricsForEnumDeclarationsToggled": true,

	// A flag which indicates whether code metrics are enabled for function declarations
	"codemetrics.basics.MetricsForFunctionDeclarationsToggled": true,

	// A flag which indicates whether code metrics are enabled for function expressions
	"codemetrics.basics.MetricsForFunctionExpressionsToggled": true,

	// A flag which indicates whether code metrics are enabled for methods declarations
	"codemetrics.basics.MetricsForMethodDeclarationsToggled": true,

	// A flag which indicates whether code metrics are shown on the overview ruler
	"codemetrics.basics.OverviewRulerModeEnabled": true,

	// 
	"codemetrics.luaconfiguration.AssignmentStatement": 0,

	// 
	"codemetrics.luaconfiguration.BinaryExpression": 1,

	// 
	"codemetrics.luaconfiguration.BooleanLiteral": 0,

	// 
	"codemetrics.luaconfiguration.BreakStatement": 1,

	// 
	"codemetrics.luaconfiguration.CallExpression": 0,

	// 
	"codemetrics.luaconfiguration.CallStatement": 0,

	// 
	"codemetrics.luaconfiguration.Chunk": 0,

	// 
	"codemetrics.luaconfiguration.Comment": 0,

	// 
	"codemetrics.luaconfiguration.DoStatement": 1,

	// 
	"codemetrics.luaconfiguration.ElseClause": 1,

	// 
	"codemetrics.luaconfiguration.ElseifClause": 1,

	// 
	"codemetrics.luaconfiguration.ForGenericStatement": 1,

	// 
	"codemetrics.luaconfiguration.ForNumericStatement": 1,

	// 
	"codemetrics.luaconfiguration.FunctionDeclaration": 1,

	// 
	"codemetrics.luaconfiguration.GotoStatement": 1,

	// 
	"codemetrics.luaconfiguration.Identifier": 0,

	// 
	"codemetrics.luaconfiguration.IfClause": 1,

	// 
	"codemetrics.luaconfiguration.IfStatement": 1,

	// 
	"codemetrics.luaconfiguration.IndexExpression": 0,

	// 
	"codemetrics.luaconfiguration.LabelStatement": 1,

	// 
	"codemetrics.luaconfiguration.LocalStatement": 0,

	// 
	"codemetrics.luaconfiguration.LogicalExpression": 1,

	// 
	"codemetrics.luaconfiguration.MemberExpression": 1,

	// 
	"codemetrics.luaconfiguration.NilLiteral": 0,

	// 
	"codemetrics.luaconfiguration.NumericLiteral": 0,

	// 
	"codemetrics.luaconfiguration.RepeatStatement": 1,

	// 
	"codemetrics.luaconfiguration.ReturnStatement": 1,

	// 
	"codemetrics.luaconfiguration.StringCallExpression": 0,

	// 
	"codemetrics.luaconfiguration.StringLiteral": 0,

	// 
	"codemetrics.luaconfiguration.TableCallExpression": 0,

	// 
	"codemetrics.luaconfiguration.TableConstructorExpression": 0,

	// 
	"codemetrics.luaconfiguration.TableKey": 0,

	// 
	"codemetrics.luaconfiguration.TableKeyString": 0,

	// 
	"codemetrics.luaconfiguration.TableValue": 0,

	// 
	"codemetrics.luaconfiguration.UnaryExpression": 0,

	// 
	"codemetrics.luaconfiguration.VarargLiteral": 0,

	// 
	"codemetrics.luaconfiguration.WhileStatement": 1,

	// 
	"codemetrics.nodeconfiguration.AnyKeyword": 1,

	// 
	"codemetrics.nodeconfiguration.AnyKeywordDescription": "Any keyword",

	// 
	"codemetrics.nodeconfiguration.ArrayBindingPattern": 0,

	// 
	"codemetrics.nodeconfiguration.ArrayBindingPatternDescription": "Array binding pattern",

	// 
	"codemetrics.nodeconfiguration.ArrayLiteralExpression": 0,

	// 
	"codemetrics.nodeconfiguration.ArrayLiteralExpressionDescription": "Array literal expression",

	// 
	"codemetrics.nodeconfiguration.ArrowFunction": 1,

	// 
	"codemetrics.nodeconfiguration.ArrowFunctionDescription": "Arrow function",

	// 
	"codemetrics.nodeconfiguration.BinaryExpression": 1,

	// 
	"codemetrics.nodeconfiguration.BinaryExpressionDescription": "Binary expression",

	// 
	"codemetrics.nodeconfiguration.BindingElement": 0,

	// 
	"codemetrics.nodeconfiguration.BindingElementDescription": "Binding element",

	// 
	"codemetrics.nodeconfiguration.Block": 0,

	// 
	"codemetrics.nodeconfiguration.BlockDescription": "Block",

	// 
	"codemetrics.nodeconfiguration.BreakStatement": 1,

	// 
	"codemetrics.nodeconfiguration.BreakStatementDescription": "Break statement",

	// 
	"codemetrics.nodeconfiguration.CallExpression": 0,

	// 
	"codemetrics.nodeconfiguration.CallExpressionDescription": "Call expression",

	// 
	"codemetrics.nodeconfiguration.CallSignature": 0,

	// 
	"codemetrics.nodeconfiguration.CallSignatureDescription": "Call signature",

	// 
	"codemetrics.nodeconfiguration.CaseClause": 1,

	// 
	"codemetrics.nodeconfiguration.CaseClauseDescription": "Case clause",

	// 
	"codemetrics.nodeconfiguration.CatchClause": 1,

	// 
	"codemetrics.nodeconfiguration.CatchClauseDescription": "Catch clause",

	// 
	"codemetrics.nodeconfiguration.ClassDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.ClassDeclarationDescription": "Class declaration",

	// 
	"codemetrics.nodeconfiguration.ConditionalExpression": 1,

	// 
	"codemetrics.nodeconfiguration.ConditionalExpressionDescription": "Conditional expression",

	// 
	"codemetrics.nodeconfiguration.Constructor": 1,

	// 
	"codemetrics.nodeconfiguration.ConstructorDescription": "Constructor",

	// 
	"codemetrics.nodeconfiguration.ConstructorType": 0,

	// 
	"codemetrics.nodeconfiguration.ConstructorTypeDescription": "Constructor type",

	// 
	"codemetrics.nodeconfiguration.ContinueStatement": 1,

	// 
	"codemetrics.nodeconfiguration.ContinueStatementDescription": "Continue statement",

	// 
	"codemetrics.nodeconfiguration.DebuggerStatement": 0,

	// 
	"codemetrics.nodeconfiguration.DebuggerStatementDescription": "Debugger statement",

	// 
	"codemetrics.nodeconfiguration.DefaultClause": 1,

	// 
	"codemetrics.nodeconfiguration.DefaultClauseDescription": "Default case",

	// 
	"codemetrics.nodeconfiguration.DoStatement": 1,

	// 
	"codemetrics.nodeconfiguration.DoStatementDescription": "Do statement",

	// 
	"codemetrics.nodeconfiguration.ElementAccessExpression": 0,

	// 
	"codemetrics.nodeconfiguration.ElementAccessExpressionDescription": "Element access expression",

	// 
	"codemetrics.nodeconfiguration.EnumDeclaration": 1,

	// 
	"codemetrics.nodeconfiguration.EnumDeclarationDescription": "Enum declaration",

	// 
	"codemetrics.nodeconfiguration.ExportAssignment": 1,

	// 
	"codemetrics.nodeconfiguration.ExportAssignmentDescription": "Export assignment",

	// 
	"codemetrics.nodeconfiguration.ExpressionStatement": 0,

	// 
	"codemetrics.nodeconfiguration.ExpressionStatementDescription": "Expression statement",

	// 
	"codemetrics.nodeconfiguration.ForInStatement": 1,

	// 
	"codemetrics.nodeconfiguration.ForInStatementDescription": "For in statement",

	// 
	"codemetrics.nodeconfiguration.ForOfStatement": 1,

	// 
	"codemetrics.nodeconfiguration.ForOfStatementDescription": "For of statement",

	// 
	"codemetrics.nodeconfiguration.ForStatement": 1,

	// 
	"codemetrics.nodeconfiguration.ForStatementDescription": "For statement",

	// 
	"codemetrics.nodeconfiguration.FunctionDeclaration": 1,

	// 
	"codemetrics.nodeconfiguration.FunctionDeclarationDescription": "Function declaration",

	// 
	"codemetrics.nodeconfiguration.FunctionExpression": 1,

	// 
	"codemetrics.nodeconfiguration.FunctionExpressionDescription": "Function expression",

	// 
	"codemetrics.nodeconfiguration.FunctionType": 1,

	// 
	"codemetrics.nodeconfiguration.FunctionTypeDescription": "Function type",

	// 
	"codemetrics.nodeconfiguration.GetAccessor": 0,

	// 
	"codemetrics.nodeconfiguration.GetAccessorDescription": "Get accessor",

	// 
	"codemetrics.nodeconfiguration.Identifier": 0,

	// 
	"codemetrics.nodeconfiguration.IdentifierDescription": "Identifier",

	// 
	"codemetrics.nodeconfiguration.IfStatement": 1,

	// 
	"codemetrics.nodeconfiguration.IfStatementDescription": "If statement",

	// 
	"codemetrics.nodeconfiguration.IfWithElseStatement": 2,

	// 
	"codemetrics.nodeconfiguration.IfWithElseStatementDescription": "If with else statement",

	// 
	"codemetrics.nodeconfiguration.ImportDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.ImportDeclarationDescription": "Import declaration",

	// 
	"codemetrics.nodeconfiguration.ImportEqualsDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.ImportEqualsDeclarationDescription": "Import equals declaration",

	// 
	"codemetrics.nodeconfiguration.IndexSignature": 0,

	// 
	"codemetrics.nodeconfiguration.IndexSignatureDescription": "Index signature",

	// 
	"codemetrics.nodeconfiguration.InterfaceDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.InterfaceDeclarationDescription": "Interface declaration",

	// 
	"codemetrics.nodeconfiguration.JsxElement": 1,

	// 
	"codemetrics.nodeconfiguration.JsxElementDescription": "Jsx element",

	// 
	"codemetrics.nodeconfiguration.JsxSelfClosingElement": 1,

	// 
	"codemetrics.nodeconfiguration.JsxSelfClosingElementDescription": "Jsx self closingElement",

	// 
	"codemetrics.nodeconfiguration.LabeledStatement": 1,

	// 
	"codemetrics.nodeconfiguration.LabeledStatementDescription": "Labeled statement",

	// 
	"codemetrics.nodeconfiguration.MethodDeclaration": 1,

	// 
	"codemetrics.nodeconfiguration.MethodDeclarationDescription": "Method declaration",

	// 
	"codemetrics.nodeconfiguration.MethodSignature": 0,

	// 
	"codemetrics.nodeconfiguration.MethodSignatureDescription": "Method signature",

	// 
	"codemetrics.nodeconfiguration.ModuleDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.ModuleDeclarationDescription": "Module declaration",

	// 
	"codemetrics.nodeconfiguration.NamedImports": 0,

	// 
	"codemetrics.nodeconfiguration.NamedImportsDescription": "Named imports",

	// 
	"codemetrics.nodeconfiguration.NamespaceImport": 0,

	// 
	"codemetrics.nodeconfiguration.NamespaceImportDescription": "Namespace import",

	// 
	"codemetrics.nodeconfiguration.NewExpression": 0,

	// 
	"codemetrics.nodeconfiguration.NewExpressionDescription": "New expression",

	// 
	"codemetrics.nodeconfiguration.ObjectBindingPattern": 0,

	// 
	"codemetrics.nodeconfiguration.ObjectBindingPatternDescription": "",

	// 
	"codemetrics.nodeconfiguration.ObjectLiteralExpression": 0,

	// 
	"codemetrics.nodeconfiguration.ObjectLiteralExpressionDescription": "Object literal expression",

	// 
	"codemetrics.nodeconfiguration.Parameter": 0,

	// 
	"codemetrics.nodeconfiguration.ParameterDescription": "Parameter",

	// 
	"codemetrics.nodeconfiguration.PostfixUnaryExpression": 0,

	// 
	"codemetrics.nodeconfiguration.PostfixUnaryExpressionDescription": "Postfix unary expression",

	// 
	"codemetrics.nodeconfiguration.PrefixUnaryExpression": 0,

	// 
	"codemetrics.nodeconfiguration.PrefixUnaryExpressionDescription": "Prefix unary expression",

	// 
	"codemetrics.nodeconfiguration.PropertyAccessExpression": 0,

	// 
	"codemetrics.nodeconfiguration.PropertyAccessExpressionDescription": "Property access expression",

	// 
	"codemetrics.nodeconfiguration.PropertyAssignment": 0,

	// 
	"codemetrics.nodeconfiguration.PropertyAssignmentDescription": "Property assignment",

	// 
	"codemetrics.nodeconfiguration.PropertyDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.PropertyDeclarationDescription": "Property declaration",

	// 
	"codemetrics.nodeconfiguration.PropertySignature": 0,

	// 
	"codemetrics.nodeconfiguration.PropertySignatureDescription": "Property signature",

	// 
	"codemetrics.nodeconfiguration.RegularExpressionLiteral": 0,

	// 
	"codemetrics.nodeconfiguration.RegularExpressionLiteralDescription": "Regular expression literal",

	// 
	"codemetrics.nodeconfiguration.ReturnStatement": 1,

	// 
	"codemetrics.nodeconfiguration.ReturnStatementDescription": "Return statement",

	// 
	"codemetrics.nodeconfiguration.SetAccessor": 0,

	// 
	"codemetrics.nodeconfiguration.SetAccessorDescription": "Set accessor",

	// 
	"codemetrics.nodeconfiguration.SourceFile": 0,

	// 
	"codemetrics.nodeconfiguration.SourceFileDescription": "Source file",

	// 
	"codemetrics.nodeconfiguration.StringLiteral": 0,

	// 
	"codemetrics.nodeconfiguration.StringLiteralDescription": "String literal",

	// 
	"codemetrics.nodeconfiguration.SwitchStatement": 1,

	// 
	"codemetrics.nodeconfiguration.SwitchStatementDescription": "Switch statement",

	// 
	"codemetrics.nodeconfiguration.TemplateExpression": 0,

	// 
	"codemetrics.nodeconfiguration.TemplateExpressionDescription": "Template expression",

	// 
	"codemetrics.nodeconfiguration.ThrowStatement": 1,

	// 
	"codemetrics.nodeconfiguration.ThrowStatementDescription": "Throw statement",

	// 
	"codemetrics.nodeconfiguration.TryStatement": 1,

	// 
	"codemetrics.nodeconfiguration.TryStatementDescription": "Try statement",

	// 
	"codemetrics.nodeconfiguration.TypeAssertionExpression": 0,

	// 
	"codemetrics.nodeconfiguration.TypeAssertionExpressionDescription": "Type assertion expression",

	// 
	"codemetrics.nodeconfiguration.TypeLiteral": 0,

	// 
	"codemetrics.nodeconfiguration.TypeLiteralDescription": "Type literal",

	// 
	"codemetrics.nodeconfiguration.TypeReference": 0,

	// 
	"codemetrics.nodeconfiguration.TypeReferenceDescription": "Type reference",

	// 
	"codemetrics.nodeconfiguration.VariableDeclaration": 0,

	// 
	"codemetrics.nodeconfiguration.VariableDeclarationDescription": "Variable declaration",

	// 
	"codemetrics.nodeconfiguration.VariableStatement": 0,

	// 
	"codemetrics.nodeconfiguration.VariableStatementDescription": "Variable statement",

	// 
	"codemetrics.nodeconfiguration.WhileStatement": 1,

	// 
	"codemetrics.nodeconfiguration.WhileStatementDescription": "While statement",

	// 
	"codemetrics.nodeconfiguration.WithStatement": 1,

	// 
	"codemetrics.nodeconfiguration.WithStatementDescription": "With statement",

	// Set default browser
	"view-in-browser.default": "",

	// List of extension IDs
	"extensions.recommendations": [],

	// Whether arrows are shown next to folders
	"simpleIcons.hideArrows": true,

	// Standard folders color (null = default color)
	"simpleIcons.simple.folder.color": null,

	// Path of the RequireJS configuration file relative to workspace root
	"requireModuleSupport.configFile": "",

	// Module path relative to workspace root
	"requireModuleSupport.modulePath": "",

	// Should we search inside the landing file?
	"requireModuleSupport.onlyNavigateToFile": false,

	// Assigns default file extensions to target module paths used with RequireJS plugins
	"requireModuleSupport.pluginExtensions": {},

	// Wraps automatically when the cursor is past the wrapping column.
	"rewrap.autoWrap.enabled": false,

	// When wrapping lines that end in a period, adds two spaces after that sentence in the wrapped text.
	"rewrap.doubleSentenceSpacing": false,

	// (EXPERIMEMTAL) When wrapping lines, reformat paragraph indents.
	"rewrap.reformat": false,

	// With the cursor inside a comment block, wrap the whole comment block instead of just a single paragraph.
	"rewrap.wholeComment": true,

	// Controls after how many characters text is wrapped.
	"rewrap.wrappingColumn": 0,

	// If true will show notifications of successful/failed builds.
	// 
	// Requires Webhook read and write permissions and Repository read permissions
	"pipelines.notificationsForBuildResults": true,

	// Bitbucket App password used to authenticate Bitbucket 
	// (leave blank to recieve prompt)
	// 
	// Note: Saving an app password in your settings will leave it exposed to any nefarious processes on your computer, giving them any accesses you allow with the App password.
	// 
	// It is HIGHLY reccomended you do not use your actual Bitbucket password here!
	"pipelines.password": "",

	// The repository to look Pipelines up in. Will be fetched automatically from your package.json, otherwise this setting will override.
	// 
	// e.g. https://bitbucket.org/you_rname/your_repo/
	"pipelines.repository": "",

	// Bitbucket username used to authenticate with Bitbucket
	"pipelines.username": "",

	// Enable / Disable allowing word compounds. true means 'arraylength' would be ok, false means it would not pass.
	"cSpell.allowCompoundWords": false,

	// Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).
	"cSpell.allowedSchemas": [
		"file",
		"untitled"
	],

	// The limit in K-Bytes to be checked in a file.
	"cSpell.checkLimit": 500,

	// Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle.
	"cSpell.diagnosticLevel": "Information",

	// List of dictionaries to use when checking files.
	"cSpell.dictionaries": [],

	// A List of Dictionary Definitions.
	"cSpell.dictionaryDefinitions": [],

	// Enable / Disable the spell checker.
	"cSpell.enabled": true,

	// Specify file types to spell check.
	"cSpell.enabledLanguageIds": [
		"asciidoc",
		"c",
		"cpp",
		"csharp",
		"css",
		"git-commit",
		"go",
		"handlebars",
		"html",
		"jade",
		"java",
		"javascript",
		"javascriptreact",
		"json",
		"jsonc",
		"latex",
		"less",
		"markdown",
		"php",
		"plaintext",
		"pug",
		"python",
		"restructuredtext",
		"rust",
		"scala",
		"scss",
		"text",
		"typescript",
		"typescriptreact",
		"yaml",
		"yml"
	],

	// Experimental: Use Rename when fixing spelling issues.
	"cSpell.fixSpellingWithRenameProvider": false,

	// Words to always be flagged as an error.
	"cSpell.flagWords": [],

	// Specify paths/files to ignore. (Supports Globs)
	"cSpell.ignorePaths": [
		"**/package-lock.json",
		"**/node_modules/**",
		"**/vscode-extension/**",
		"**/.git/objects/**",
		".vscode"
	],

	// List of regular expressions used to exclude the matching text from being checked.
	//  Example: "0x[a-f0-9]+" to skip 0x hex values.
	//  By default the flags are 'gim'.
	//  You can specify them like this:
	//  "/0x[A-F0-9]/g" to match only upper case hex numbers.
	//  Example to match email: "<?[\\w.\\-+]+@\\w+(\\.\\w+)+>?" 
	"cSpell.ignoreRegExpList": [],

	// A list of words to be ignored by the spell checker.
	"cSpell.ignoreWords": [],

	// List of paths of cspell.json files to import.
	"cSpell.import": [],

	// List of regular expressions used to include text to be spell checked.
	// By default, all text is checked.  Adding regular expresses to this list will limit the text to be spell checked to only text that matches any of the expressions in the list.
	// Logic: text to be checked = include - exclude
	// Note: Slashes need to be double: \\ because it is in a json string. 
	// Examples:
	// * ".*" -- include everything.
	// * "'(?:[^'\\n]|\\\\')*'" -- single quote strings. 
	// 
	"cSpell.includeRegExpList": [],

	// The Language local to use when spell checking. "en" and "en-GB" are currently supported.
	"cSpell.language": "en",

	// Define settings on a per programming language basis.
	"cSpell.languageSettings": [],

	// Set the Debug Level for logging messages.
	"cSpell.logLevel": "Error",

	// The maximum number of times the same word can be flagged as an error in a file.
	"cSpell.maxDuplicateProblems": 5,

	// Controls the maximum number of spelling errors per document.
	"cSpell.maxNumberOfProblems": 100,

	// The minimum length of a word before checking it against a dictionary.
	"cSpell.minWordLength": 4,

	// Controls the number of suggestions shown.
	"cSpell.numSuggestions": 8,

	// Defines a list of named regular expression patterns that can be used in exclusion or inclusion lists.
	"cSpell.patterns": [],

	// Show Spell Checker actions in Editor Context Menu
	"cSpell.showCommandsInEditorContextMenu": true,

	// Display the spell checker status on the status bar.
	"cSpell.showStatus": true,

	// Delay in ms after a document has changed before checking it for spelling errors.
	"cSpell.spellCheckDelayMs": 50,

	// User words to add to dictionary.  Should only be in the user settings.
	"cSpell.userWords": [],

	// Words to add to dictionary for a workspace.
	"cSpell.words": [
		"\"we",
		"Accelerider",
		"Caliburn",
		"Dashio",
		"Dotvvm",
		"Entrypoint",
		"Nolog",
		"Ractive",
		"adamkeinan",
		"adminlte",
		"angularjs",
		"apidoc",
		"applescript",
		"atlassian",
		"autofetch",
		"autohotkey",
		"autoit",
		"automerge",
		"autoplace",
		"azcli",
		"bablerc",
		"bierner",
		"bitbucket",
		"browserslist",
		"builtins",
		"bundleutils",
		"camelcase",
		"checkstyle",
		"cleanwebpackplugin",
		"cmake",
		"cmyk",
		"codeframe",
		"codemirror",
		"codemods",
		"coenraads",
		"cond",
		"corejs",
		"cross",
		"cscript",
		"demo",
		"demoweb",
		"detect",
		"dev\":",
		"devlopment",
		"devserver",
		"devtool",
		"devtools",
		"dnstradamus",
		"docgen",
		"doclint",
		"donjayamanne",
		"dont",
		"dotvvmprod",
		"dynamodb",
		"dzannotti",
		"eamodio",
		"eqeqeq",
		"esbenp",
		"esmodules",
		"esnext",
		"estree",
		"expresion",
		"fastfood",
		"filepath",
		"findup",
		"fira",
		"flowide",
		"flowtype",
		"funit",
		"gentelella",
		"gitblame",
		"githistory",
		"gitignore",
		"gitlens",
		"greenkeeper",
		"gridsome",
		"gutil",
		"haml",
		"haxe",
		"howto",
		"hpbn",
		"httparchive",
		"ibmdotcom",
		"infinty",
		"inmemory",
		"javac",
		"johnpapa",
		"jsconf",
		"jsrender",
		"jsreport",
		"jsxobj",
		"jvmoptions",
		"keinan",
		"kitc",
		"kohler",
		"kotlinc",
		"krembo",
		"krembowpf",
		"lein",
		"lifecycle",
		"lightbulb",
		"limit",
		"linebreak",
		"liveserver",
		"liveshare",
		"lockfile",
		"memorystore",
		"merge",
		"method",
		"mikestead",
		"mimetype",
		"mobx",
		"monospace",
		"multiscroll",
		"mutex",
		"mvvm",
		"neutronium",
		"nightwatch",
		"nologo",
		"octokat",
		"octonode",
		"openlayers",
		"osascript",
		"pathinfo",
		"peerdeps",
		"period",
		"plusplus",
		"precache",
		"precss",
		"prefered",
		"prerender",
		"prettierignore",
		"prettierrc",
		"prova",
		"purifycss",
		"pwaapp",
		"pwacompat",
		"qunit",
		"reacoa",
		"reactide",
		"reactjs",
		"realworld",
		"refetch",
		"ritwickdey",
		"roslib",
		"rscript",
		"runhaskell",
		"runmode",
		"rustc",
		"sbcl",
		"scriptcs",
		"scrollback",
		"sdks",
		"segoe",
		"serviceworker",
		"shellformat",
		"shrinkwrap",
		"snyk",
		"sourcemap",
		"stacktracey",
		"statusbarerror",
		"streetsidesoftware",
		"strikethrough",
		"styleguidist",
		"submodules",
		"successfull",
		"svgr",
		"tabwidth",
		"tapable",
		"treetabular",
		"tsdx",
		"tslib",
		"tsutils",
		"typecheck",
		"uefa",
		"ui",
		"vbscript",
		"vsintellicode",
		"waderyan",
		"wasm",
		"webapi",
		"webapp",
		"websockets",
		"welldone",
		"winteriscoming",
		"woff",
		"workerize",
		"wpfmaster",
		"wpftoolkit",
		"xander",
		"zepto"
	],

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Html color name or hex color value (eg 'whitesmoke' or '#ffffff').
	// 
	// https://www.w3schools.com/colors/colors_names.asp
	// 
	// Reload the window for this to take effect (cmd-shift-p, 'Reload Window')
	// 
	// To remove a Base Color, you'll have to delete the relevant settings in .vscode/settings.json either manually or by selecting 'Delete Settings File Upon Exit'.
	"windowColors.🌈 BaseColor": "",

	// Delete .vscode/settings.json each time you close the workspace/window.  This prevents this file from being saved even when you haven't manually edited it.  This setting is necessary in situations where VSCode needelessly copies global settings to this workspace settings file. 
	// 
	// 🚨 This will delete any workspace customizations you might have saved, including a Base Color.
	// 
	// This should be set in 'User Settings' instead of 'Workspace Settings' or else it will just delete itself.
	"windowColors.🌈 DeleteSettingsFileUponExit": false,

	// Controls the color shades to blend with dark or light themes.  To switch betwen light and dark, you must first select 'remove' and reload VSCode to remove the settings, because they are not automatically overwritten.  This lets you modify the selected colors if you don't like what the extension picks.  
	// 
	// Reload the window for this to take effect (cmd-⇧-P, 'Reload Window')
	//  - dark: Applies a dark-themed color to the activityBar and titleBar.  First 'remove' and reload VSCode for changes to take effect. 
	//  - light: Applies a light-themed color to the activityBar and titleBar.  First 'remove' and reload VSCode for changes to take effect. 
	//  - remove: Removes the modified color settings from .vscode/settings.json
	"windowColors.🌈 Theme": "dark",

	// The directory where to find the .scss-lint.yml file
	"scssLint.configDir": "",

	// The color that will highlight errors
	"scssLint.errorBackgroundColor": "rgba(200, 0, 0, .8)",

	// The languages this app will work for
	"scssLint.languages": [
		"scss"
	],

	// Determines if this extension should run when text changes on a document
	"scssLint.runOnTextChange": false,

	// Set to true to highlight the errors and warnings
	"scssLint.showHighlights": false,

	// The display text in the status bar
	"scssLint.statusBarText": "`$(telescope) scss-lint  ${errors.length} $(x)  ${warnings.length} $(alert)`",

	// The color that will highlight warnings
	"scssLint.warningBackgroundColor": "rgba(200, 120, 0, .8)",

	// Toggle matches for Stylus Builtin Functions on autocomplete.
	"languageStylus.useBuiltinFunctions": true,

	// Separate property from value with ':'.
	"languageStylus.useSeparator": true,

	// Prefix file alias with parent directory name.
	"foxWorkbench.prefixAliasWithDirName": true,

	// Set default browser
	"open-in-browser.default": "",

	// Specifies the date format for each stash
	// Available formats:
	// default
	// iso
	// local
	// raw
	// relative
	// rfc
	// short
	"gitstash.dateFormat": "default",

	// Specifies the format for the diff document title
	// Available tokens:
	// ${filename} - the file name
	// ${filepath} - the file path
	// ${fileIndex} - the file index
	// ${date} - the stash date
	// ${description} - the stash description
	// ${branch} - the stash branch
	// ${stashIndex} - the stash index
	// ${type} - the change type on the file like 'Modified' or 'Deleted'
	// ${hint} - like ${type} but indicates also the editor position of the change
	"gitstash.diffTitleFormat": "#${stashIndex}: ${filename}  ${hint} (${filepath})",

	// Shows or hides the explorer tree refresh button
	"gitstash.explorer.buttons": true,

	// Shows or hides the explorer on startup
	"gitstash.explorer.enabled": true,

	// Specifies the format for each stashed file
	// Available tokens:
	// ${filename} - the file name
	// ${filepath} - the file path
	// ${index} - the file index
	// ${type} - the change type
	"gitstash.fileFormat": "${filename}",

	// Specifies the format for each stashed file tooltip
	// Available tokens:
	// Same than fileFormat
	"gitstash.fileTooltipFormat": "${filepath}${filename} • ${type}",

	// Clears the log window before showing the action result
	"gitstash.log.autoclear": false,

	// Specifies the format for each repository
	// Available tokens:
	// ${name} - the repository name
	// ${directory} - the repository directory base name
	// ${path} - the full directory path
	"gitstash.repositoryFormat": "${name}",

	// Specifies the format for each repository tooltip 
	// Available tokens:
	// Same than repositoryFormat
	"gitstash.repositoryTooltipFormat": "${path}",

	// Specifies the format for each stash
	// Available tokens:
	// ${branch} - the branch where the stash was created
	// ${description} - the custom or default description for the stash
	// ${date} - the stash creation date
	// ${index} - the stash index
	"gitstash.stashFormat": "#${index}:  ${description}",

	// Specifies the format for each stash tooltip 
	// Available tokens:
	// Same than stashFormat
	"gitstash.stashTooltipFormat": "${branch}\n${date}\n${description}",

	// Enable/Disable using img tag with width and height for pasting image.
	"MarkdownPaste.enableImgTag": true,

	// The destination to save image file.
	"MarkdownPaste.path": "./",

	// Rules for markdown paste.
	"MarkdownPaste.rules": [
		{
			"regex": "^(?:https?://)?(?:(?:(?:www\\.?)?youtube\\.com(?:/(?:(?:watch\\?.*?v=([^&\\s]+).*)|))?))",
			"options": "g",
			"replace": "[![](https://img.youtube.com/vi/$1/0.jpg)](https://www.youtube.com/watch?v=$1)"
		},
		{
			"regex": "^(https?://.*)",
			"options": "ig",
			"replace": "[]($1)"
		}
	],

	// Enable/disable showing confirm box while paste image.
	"MarkdownPaste.silence": false,

	// Array of object with data to connect server on run editor or change workspace
	"database.connections": [],

	// A mapping from module name to a different alias (the variable name it is assigned to)
	"node_require.aliases": {
		"backbone": "Backbone",
		"backbone.marionette": "Marionette",
		"bluebird": "Promise",
		"cheerio": "$",
		"ember": "Ember",
		"handlebars": "Handlebars",
		"highland": "hl",
		"hogan.js": "Hogan",
		"leaflet": "L",
		"lodash": "_",
		"string": "S",
		"jquery": "$",
		"jquery-ui": "ui",
		"knockout": "ko",
		"mustache": "Mustache",
		"node-tap": "test",
		"openlayers": "ol",
		"pouchdb": "PouchDB",
		"prova": "test",
		"es6-promise": "Promise",
		"raven-js": "Raven",
		"native-promise-only": "Promise",
		"node-uuid": "uuid",
		"ractive": "Ractive",
		"immutable": "Immutable",
		"ramda": "R",
		"react": "React",
		"react-dom": "ReactDOM",
		"react-addons-clone-with-props": "cloneWithProps",
		"react-addons-create-fragment": "createFragment",
		"react-addons-css-transition-group": "CSSTransitionGroup",
		"react-addons-linked-state-mixin": "LinkedStateMixin",
		"react-addons-pure-render-mixin": "PureRenderMixin",
		"react-addons-shallow-compare": "shallowCompare",
		"react-addons-transition-group": "TransitionGroup",
		"react-addons-update": "update",
		"roslib": "ROS",
		"rsvp": "RSVP",
		"underscore": "_",
		"socket.io": "io",
		"superagent": "request",
		"spine": "Spine",
		"tap": "test",
		"three": "THREE",
		"q": "Q",
		"qunit": "QUnit",
		"zepto": "$",
		"graceful-fs": "fs",
		"findup-sync": "findup",
		"mime-types": "mime",
		"gulp-util": "gutil",
		"iconv-lite": "iconv",
		"event-stream": "es",
		"stream-line-wrapper": "LineWrapper",
		"stream-to-array": "streamToArray",
		"raw-body": "getRawBody",
		"aws-sdk": "AWS",
		"connect-dynamodb": "DynamoDBStore",
		"connect-mysql": "MySQLStore",
		"connect-sdb": "SdbStore",
		"connect-sqlite3": "SQLiteStore",
		"package.json": "pkg",
		"tape": "test",
		"sequelize": "Sequelize",
		"r": "rethinkdb",
		"underscore.string": "s"
	},

	// what method should be used if not automatically detected. If none provided you will be asked each time.
	"node_require.defaultRequireMethod": "",

	// defines files and folders to exclude
	"node_require.exclude": [
		"node_modules",
		"typings",
		"dist",
		"bin",
		"build",
		"tmp"
	],

	// include files to search for
	"node_require.include": [
		"js",
		"ts",
		"jsx",
		"tsx",
		"css",
		"json"
	],

	// places import statements at cursor instead of at the bottom of the import block
	"node_require.insertAtCursor": false,

	// convert filename to camelCase but preserves acronyms like `devSQLConfig` or `XMLImporter`.
	"node_require.preserveAcronymCase": false,

	// whether to insert semicolon after import/require if autodetect fails.
	"node_require.semi": false,

	// prefer single quote if autodetect fails.
	"node_require.singleQuote": true,

	// Type your google API key in order to make google translate extension to work.
	"googleTranslateExt.apiKey": "",

	// An array of the languages that your would like to translate the selected text to.
	"googleTranslateExt.languages": [
		"iw"
	],

	// Set to true in order to replace selected text with the translated text.
	"googleTranslateExt.replaceText": false,

	// Replace an increased-indent at-block construction with an explicit one with @block keyword or vice versa.
	// Note that this option does not incorporate insertBraces option.
	"stylusSupremacy.alwaysUseAtBlock": false,

	// Convert @extend keyword to @extends keyword, or vice versa.
	"stylusSupremacy.alwaysUseExtends": false,

	// Replace @require with @import, or do nothing.
	"stylusSupremacy.alwaysUseImport": false,

	// Replace 0 (regardless of its unit) with none for border and outline properties, or do nothing.
	"stylusSupremacy.alwaysUseNoneOverZero": false,

	// Replace ! operator with not keyword, or vice versa.
	"stylusSupremacy.alwaysUseNot": false,

	// Replace 0 (regardless of its unit) with 0 (without units), or do nothing.
	"stylusSupremacy.alwaysUseZeroWithoutUnit": false,

	// Do not format the files that match the given Glob patterns.
	// For example, ignoreFiles: ["bin/**", "src/vendors/**"]
	"stylusSupremacy.ignoreFiles": [],

	// Insert or remove a pair of curly braces where they are supposed to be. Note that this option does not affect @block construction, see alwaysUseAtBlock.
	"stylusSupremacy.insertBraces": true,

	// Insert or remove a colon between a property name and its value.
	"stylusSupremacy.insertColons": true,

	// Insert or remove a zero before a number that between 1 and 0.
	"stylusSupremacy.insertLeadingZeroBeforeFraction": true,

	// Insert a new-line around blocks.
	// Only apply to top-level blocks when set to "root", or only apply to nested blocks when set to "nested".
	"stylusSupremacy.insertNewLineAroundBlocks": true,

	// Insert a new-line around a group of @import/@require(s).
	// Only apply to imports outside a block when set to "root", or only apply to imports inside a block when set to "nested".
	"stylusSupremacy.insertNewLineAroundImports": true,

	// Insert a new-line around a group of non-properties, non-imports and non-blocks.
	// Only apply to others outside a block when set to "root", or only apply to others inside a block when set to "nested".
	"stylusSupremacy.insertNewLineAroundOthers": false,

	// Insert a new-line around a group of CSS properties.
	// Unlike insertNewLineAroundBlocks and insertNewLineAroundOthers, this option cannot be set to "root" nor "nested" because CSS properties cannot be placed at the top level.
	"stylusSupremacy.insertNewLineAroundProperties": false,

	// Insert or remove a new-line before else keyword.
	"stylusSupremacy.insertNewLineBeforeElse": false,

	// Insert or remove a new-line between selectors.
	// Please use selectorSeparator option instead.
	"stylusSupremacy.insertNewLineBetweenSelectors": false,

	// Insert a pair of parentheses or a white-space after a negation operator. This does nothing if a pair of parentheses is already after the negation operator.
	"stylusSupremacy.insertParenthesisAfterNegation": false,

	// Insert a pair of parentheses around if-condition but does not remove the existing pair of parentheses.
	"stylusSupremacy.insertParenthesisAroundIfCondition": true,

	// Insert or remove a semi-colon after a property value, a variable declaration, a variable assignment and a mixin/function call.
	"stylusSupremacy.insertSemicolons": true,

	// Insert or remove a white-space after a comma.
	"stylusSupremacy.insertSpaceAfterComma": true,

	// Insert or remove a white-space after a comment.
	"stylusSupremacy.insertSpaceAfterComment": true,

	// Insert or remove a white-space before a comment.
	"stylusSupremacy.insertSpaceBeforeComment": true,

	// Insert or remove a white-space after an open parenthesis and before a close parenthesis.
	"stylusSupremacy.insertSpaceInsideParenthesis": false,

	// Preserve the new-lines between property values instead of flattening the lines. This also adds/keeps the colon after the property name according to Stylus syntax.
	"stylusSupremacy.preserveNewLinesBetweenPropertyValues": false,

	// Represent a quote character that is used to begin and terminate a string. You must choose either a single-quote or a double-quote.
	// This replaces the original quote characters with the given one, unless the string contains the given quote character (see font-family in .class2.) However, if the string starts with data:image/svg+xml;utf8,, the given quote character will be used, and the quote characters in the string will be escaped (see background-image in .class2.)
	"stylusSupremacy.quoteChar": "'",

	// Reduce margin and padding duplicate values by converting margin x x x x to margin x, margin x y x y to margin x y, and margin x y y y to margin x y y where x, y is a unique property value.
	"stylusSupremacy.reduceMarginAndPaddingValues": false,

	// Represent a separator between selectors.
	// If the option insertNewLineBetweenSelectors is set to true, then ",\n" or "\n" will be used. Also \r\n may be used in place of \n according to newLineChar option.
	"stylusSupremacy.selectorSeparator": ", ",

	// Can be either false for not sorting, "alphabetical" for sorting CSS properties from A to Z, "grouped" for sorting CSS properties according to Stylint and nib, or an array of property names that defines the property order, for example ["color", "background", "display"].
	"stylusSupremacy.sortProperties": false,

	// 
	"xml2json.options": {},

	// Choose your prefer default settings or config your custom.
	"xml2json.preferStyle": "xml2js",

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": "ui"
	},

	// Whether standard-format should format code on save
	"standardFormat.formatOnSave": false,

	// The linter to use
	"python.linter": "pyLint",

	// Controls the maximum number of problems produced by the server.
	"python.maxNumberOfProblems": 100,

	// Number of seconds the list of `.gitignore` files retrieved from github will be cached
	"gitignore.cacheExpirationInterval": 3600,

	// Defines semicolon use for snippets
	"reactReduxSnippets.LinterRules": "Loose",

	// URL to the GitLab instance used for validation
	"gitlab-ci-validator.gitLabURL": "https://gitlab.com",

	// Ignore TLS/SSL certificate errors when calling the GitLab API
	"gitlab-ci-validator.ignoreCertificateErrors": false,

	// The names of experimental features (if any) to enable. If you're not sure what this is, you probably don't need it.
	"msbuildProjectTools.experimentalFeatures": [],

	// Types of objects defined in the current project to include when offering completions.
	"msbuildProjectTools.language.completionsFromProject": [
		"ItemType",
		"ItemMetadata",
		"Property"
	],

	// Disable tooltips when hovering on XML in MSBuild project files?
	"msbuildProjectTools.language.disable.hover": false,

	// Use the classic completion provider for PackageReferences, instead of the full language service?
	"msbuildProjectTools.language.useClassicProvider": false,

	// If specified, the language service will log to this file.
	"msbuildProjectTools.logging.file": null,

	// The logging level for the MSBuild language service.
	"msbuildProjectTools.logging.level": "Information",

	// The API key (if any) to use when authenticating to Seq.
	"msbuildProjectTools.logging.seq.apiKey": null,

	// The minimum log level for Seq.
	"msbuildProjectTools.logging.seq.level": "Verbose",

	// The URL of the Seq server (Seq logging will be enabled if this is specified).
	"msbuildProjectTools.logging.seq.url": null,

	// Trace all communication between VSCode and the MSBuild language service?
	"msbuildProjectTools.logging.trace": false,

	// Override the MSBuildExtensionsPath property.
	"msbuildProjectTools.msbuild.extensionsPath": null,

	// Override the MSBuildExtensionsPath32 property.
	"msbuildProjectTools.msbuild.extensionsPath32": null,

	// Don't automatically initialise the NuGet API client when opening a project (this is done to make the first PackageReference completion faster)?
	"msbuildProjectTools.nuget.disablePreFetch": false,

	// Include suggestions for packages from local (file-based) package sources. You'll need to close and reopen your project file for this setting to take effect.
	"msbuildProjectTools.nuget.includeLocalSources": false,

	// Include suggestions for pre-release packages and package versions.
	"msbuildProjectTools.nuget.includePreRelease": false,

	// Sort package versions in descending order (i.e. newest versions first)? Set this to false to revert to the old behaviour (VSCode decides how to sort the completion list).
	"msbuildProjectTools.nuget.newestVersionsFirst": true,

	// Set locale for Faker
	"faker.locale": "en",

	// Path to Processing. Leave default if you've added processing to your path, otherwise enter the path to processing-java here. Example: 'C:\Program Files\processing-3.0.1\processing-java' for Windows
	"processing.path": "processing-java",

	// Enables the XML Document view in the explorer for XML documents.
	"xmlTools.enableXmlTreeView": true,

	// Enables auto-reveal of elements in the XML Document view when a start tag is clicked in the editor.
	"xmlTools.enableXmlTreeViewCursorSync": false,

	// Enables attribute and child element counts in the XML Document view.
	"xmlTools.enableXmlTreeViewMetadata": true,

	// Enforces a space before the forward slash at the end of a self-closing XML tag.
	"xmlTools.enforcePrettySelfClosingTagOnFormat": false,

	// Ignore default xmlns attributes when evaluating XPath.
	"xmlTools.ignoreDefaultNamespace": true,

	// Remember the last XPath query used.
	"xmlTools.persistXPathQuery": true,

	// Remove XML comments during minification.
	"xmlTools.removeCommentsOnMinify": false,

	// Put each attribute on a new line when formatting XML. Overrides `xmlTools.splitXmlnsOnFormat` if set to `true`.
	"xmlTools.splitAttributesOnFormat": false,

	// Put each xmlns attribute on a new line when formatting XML.
	"xmlTools.splitXmlnsOnFormat": true,

	// Supported XML Formatters: classic
	"xmlTools.xmlFormatterImplementation": "v2",

	// Arguments to be passed to the XQuery execution engine.
	"xmlTools.xqueryExecutionArguments": [
		"-xquery",
		"$(script)",
		"-in",
		"$(input)",
		"-out",
		"$(input).output.xml"
	],

	// The full path to the executable to run when executing XQuery scripts.
	"xmlTools.xqueryExecutionEngine": "",

	// The maximum number of input files to enumerate when executing XQuery scripts.
	"xmlTools.xqueryExecutionInputLimit": 100,

	// The pattern used to search for input XML files when executing XQuery scripts.
	"xmlTools.xqueryExecutionInputSearchPattern": "**/*.xml",

	// Sets which folders will be generated from the unity-tools.GenerateOrganizationFolders command
	"unity-tools.defaultOrganizationFolders": [
		"Materials",
		"Scenes",
		"Scripts",
		"Prefabs",
		"Audio"
	],

	// Enables the "Open Documentation" option on right-click menu.
	"unity-tools.enableRightClickSearch": true,

	// The executable to use to open the context menu. Can be 'AutohotkeyContextMenu.exe', 'WinContextMenu_x86.exe' or 'Context.exe'.
	"windowsExplorerContextMenu.executable": "AutohotkeyContextMenu.exe",

	// Whether the the conversion should overwrite existing files or create a new one
	"tmLanguage.replaceExistingFile": true,

	// Number of milliseconds between automatically proceeding to the next slide, disabled when set to 0, this value can be overwritten by using a data-autoslide attribute on your slides
	"revealjs.autoSlide": 0,

	// The direction in which the slides will move whilst autoslide is active
	"revealjs.autoSlideMethod": "Reveal.navigateNext",

	// Stop auto-sliding after user input
	"revealjs.autoSlideStoppable": true,

	// Transition style for full page slide backgrounds (none/fade/slide/convex/concave/zoom)
	"revealjs.backgroundTransition": "default",

	// Full path of browser to use
	"revealjs.browserPath": null,

	// Vertical centering of slides
	"revealjs.center": true,

	// Display controls in the bottom right corner
	"revealjs.controls": true,

	// Flags if the presentation is running in an embedded mode, i.e. contained within a limited portion of the screen
	"revealjs.embedded": false,

	// Path where the HTML export is created, relative to the .md file
	"revealjs.exportHTMLPath": null,

	// Turns fragments on and off globally
	"revealjs.fragments": true,

	// Flags if we should show a help overlay when the questionmark key is pressed
	"revealjs.help": true,

	// Hides the address bar on mobile devices
	"revealjs.hideAddressBar": true,

	// highlight.js Theme (Default, Agate, Androidstudio, Arduino Light, Arta, Ascetic, Atelier Cave Dark, Atelier Cave Light, Atelier Dune Dark, Atelier Dune Light, Atelier Estuary Dark, Atelier Estuary Light, Atelier Forest Dark, Atelier Forest Light, Atelier Heath Dark, Atelier Heath Light, Atelier Lakeside Dark, Atelier Lakeside Light, Atelier Plateau Dark, Atelier Plateau Light, Atelier Savanna Dark, Atelier Savanna Light, Atelier Seaside Dark, Atelier Seaside Light, Atelier Sulphurpool Dark, Atelier Sulphurpool Light, Atom One Dark, Atom One Light,Brown Paper, Codepen Embed, Color Brewer, Darcula, Dark, Darkula, Docco, Dracula, Far, Foundation, Github Gist, Github, Googlecode, Grayscale, Gruvbox Dark, Gruvbox Light, Hopscotch, Hybrid, Idea, Ir Black, Kimbie Dark, Kimbie Light, Magula, Mono Blue, Monokai Sublime, Monokai, Obsidian,Ocean, Paraiso Dark, Paraiso Light, Pojoaque, Purebasic, Qtcreator Dark, Qtcreator Light, Railscasts, Rainbow, School Book, Solarized Dark, Solarized Light, Sunburst, Tomorrow Night Blue, Tomorrow Night Bright, Tomorrow Night Eighties, Tomorrow Night, Tomorrow, Vs, Xcode, Xt 256, Zenburn
	"revealjs.highlightTheme": "Zenburn",

	// Push each slide change to the browser history
	"revealjs.history": true,

	// Enable keyboard shortcuts for navigation
	"revealjs.keyboard": true,

	// Loop the presentation
	"revealjs.loop": false,

	// Enable slide navigation via mouse wheel
	"revealjs.mouseWheel": false,

	// Revealjs markdown note delimiter
	"revealjs.notesSeparator": "note:",

	// Open the file manager after HTML export
	"revealjs.openFilemanagerAfterHTMLExport": true,

	// Enable the slide overview mode
	"revealjs.overview": true,

	// Number of pixels to move the parallax background per slide
	"revealjs.parallaxBackgroundHorizontal": null,

	// Parallax background image
	"revealjs.parallaxBackgroundImage": "",

	// Parallax background size (CSS syntax, e.g. 2100px 900px)
	"revealjs.parallaxBackgroundSize": "",

	// Number of pixels to move the parallax background per slide
	"revealjs.parallaxBackgroundVertical": null,

	// Opens links in an iframe preview overlay
	"revealjs.previewLinks": false,

	// Display a presentation progress bar
	"revealjs.progress": true,

	// Change the presentation direction to be RTL
	"revealjs.rtl": false,

	// Revealjs markdown slide separator
	"revealjs.separator": "^\r?\n---\r?\n$",

	// Flags if speaker notes should be visible to all viewers
	"revealjs.showNotes": false,

	// Randomizes the order of slides each time the presentation loads
	"revealjs.shuffle": false,

	// Hide or show slides explorer
	"revealjs.slideExplorerEnabled": true,

	// Display the page number of the current slide
	"revealjs.slideNumber": false,

	// Revealjs Theme (black, white, league, beige, sky, night, serif, simple, solarized
	"revealjs.theme": "black",

	// Enables touch navigation on devices with touch input
	"revealjs.touch": true,

	// Transition style (none/fade/slide/convex/concave/zoom)
	"revealjs.transition": "default",

	// Transition speed (default/fast/slow)
	"revealjs.transitionSpeed": "default",

	// Revealjs markdown vertical separator
	"revealjs.verticalSeparator": "^\r?\n--\r?\n$",

	// Number of slides away from the current that are visible
	"revealjs.viewDistance": 3,

	// 
	"markdown-todo.enableCodeLens": true,

	// 
	"markdown-todo.sortByCount": true,

	// Auto close dialog when no errors, conflicts and merges.
	"TortoiseSVN.autoCloseUpdateDialog": false,

	// Setting  glob pattern to exclude files and folders
	"TortoiseSVN.showPath.exclude": [
		"**/{node_modules,bower_components}/**"
	],

	// Specify the TortoiseProc.exe path when auto detect path fail. Notice: must replace \ to \\
	"TortoiseSVN.tortoiseSVNProcExePath": "",

	// An array of files/folders that should be ignored by the parser. Glob patterns are accepted (eg. **/*bad.robot)
	"rfLanguageServer.excludePaths": [],

	// An array of files/folders that should be included by the parser. Glob patterns are accepted (eg. test/*.robot)
	"rfLanguageServer.includePaths": [],

	// Libraries whose keywords are suggested with auto-complete
	"rfLanguageServer.libraries": [],

	// What language server log messages are printed
	"rfLanguageServer.logLevel": "off",

	// DEPRECATED. Use rfLanguageServer.includePaths instead
	"rfLanguageServer.pythonKeywords": false,

	// Traces the communication between VSCode and the rfLanguageServer service.
	"rfLanguageServer.trace.server": "off",

	// This is the main file that Simple HTTP Server will be using.
	"shs.mainFile": "index.html",

	// This is the host that Simple HTTP Server will be running on.
	"shs.serverHost": "127.0.0.1",

	// This is the port that Simple HTTP Server will be running on.
	"shs.serverPort": 8080,

	// Give Workspace Explorer an additional search directory for .svg and .png files with the same name as your workspaces and folders. Then use those as icons in the Workspace Explorer. Workspace Explorer will first look in the Workspace Storage Directory and then will look in the Additional Custom Icon Directory. Ex: C:\Users\appuser\icons
	"workspaceExplorer.additionalCustomIconDirectory": "",

	// Allow Workspace Explorer to search for .svg and .png files with the same name as your workspaces and folders. Then to use those as icons in the Workspace Explorer. The search path defaults to the same location as your workspace file. An additional search directory can be added in additionalCustomIconDirectory.
	"workspaceExplorer.enableCustomIconSearch": false,

	// The root directory containing your .code-workspace files. Workspace Explorer will show you any .code-workspace's in this directory and will also display any sub-folders. This will allow you to organize your workspaces into categories by sub-folder. Ex: C:\Users\appuser\workspaces
	"workspaceExplorer.workspaceStorageDirectory": "",

	// Whether to enable AppInsights to track anonymous telemetry data.
	"extension-leaderboard.enableAppInsights": true,

	// The path to CMake generator executable
	"cmake.cmakePath": "cmake",

	// 
	"find.all.references.engine": "rg",

	// 
	"find.all.references.options": "",

	// Filter out blank (empty or whitespace-only) lines.
	"sortLines.filterBlankLines": false,

	// Sort entire file if no selection is active.
	"sortLines.sortEntireFile": false,

	// Specifies the path where the jsbeautifyrc file.
	"gogocrow.beautify.jsbeautifyrc": "",

	// Define patterns indicating the beginning and end of the block document(here document).
	// It is used to distinguish between strings that span multiple lines, and the comment lines displayed in it are considered code lines.
	//  - types: Language types. Allows you to specify languageId(eg cpp, csharp, javascript...), aliases(eg C++, C#, JavaScript), and extensions(eg .cpp, .cs, .js).
	//  - patterns: patterns indicating the range of comments.
	"VSCodeCounter.blockComment": [
		{
			"types": [
				"cpp"
			],
			"patterns": [
				[
					"R\"(",
					")\""
				]
			]
		},
		{
			"types": [
				"lua"
			],
			"patterns": [
				[
					"[[",
					"]]"
				]
			]
		},
		{
			"types": [
				".js",
				".jsx",
				".ts",
				".tsx"
			],
			"patterns": [
				[
					"`",
					"`"
				]
			]
		}
	],

	// A new line character to be used in the output file.
	"VSCodeCounter.endOfLine": "\n",

	// Configure glob patterns for excluding files and folders.
	"VSCodeCounter.exclude": [
		"**/.vscode/**",
		"**/node_modules/**"
	],

	// Ignore unsupported files.
	"VSCodeCounter.ignoreUnsupportedFile": true,

	// Configure glob patterns for including files and folders.
	"VSCodeCounter.include": [
		"**/*"
	],

	// Whether to output the result as a CSV file.
	"VSCodeCounter.outputAsCSV": true,

	// Whether to output the result as a Markdown file.
	"VSCodeCounter.outputAsMarkdown": true,

	// Whether to output the result as a text file.
	"VSCodeCounter.outputAsText": true,

	// Directory path for outputting results.
	"VSCodeCounter.outputDirectory": ".VSCodeCounter",

	// Whether to output summary and details separately.
	"VSCodeCounter.outputMarkdownSeparately": true,

	// Type of output file to preview after counting.
	"VSCodeCounter.outputPreviewType": "markdown",

	// Whether to print a number with commas as thousands separators.(except for CSV)
	"VSCodeCounter.printNumberWithCommas": true,

	// Whether to show the count result of the current file on the status bar in real time.
	"VSCodeCounter.showInStatusBar": false,

	// Whether to use setting 'files.exclude' for excluding files.
	"VSCodeCounter.useFilesExclude": true,

	// Whether to use '.gitignore' files for excluding files.
	"VSCodeCounter.useGitignore": true,

	// Add menu items to the editor context menu for running and debugging the tests in the current file
	"testExplorer.addToEditorContextMenu": false,

	// Show a CodeLens above each test or suite for running or debugging the tests
	"testExplorer.codeLens": true,

	// Show error messages from test failures as decorations in the editor
	"testExplorer.errorDecoration": true,

	// Provide hover messages for the error decorations in the editor
	"testExplorer.errorDecorationHover": true,

	// Show the state of each test in the editor using Gutter Decorations
	"testExplorer.gutterDecoration": true,

	// Hide the output channel used to show a test's log when the user clicks on a test whose log is empty
	"testExplorer.hideEmptyLog": true,

	// Merge suites with the same label and parent
	"testExplorer.mergeSuites": false,

	// Retire or reset all test states whenever the test tree is reloaded
	//  - retire: Retire all test states whenever the test tree is reloaded
	//  - reset: Reset all test states whenever the test tree is reloaded
	//  - null: Don't change the test states when the test tree is reloaded
	"testExplorer.onReload": null,

	// Retire or reset all test states whenever a test run is started
	//  - retire: Retire all test states whenever a test run is started
	//  - reset: Reset all test states whenever a test run is started
	//  - null: Don't change the test states when a test run is started
	"testExplorer.onStart": null,

	// Show a button for collapsing the nodes of the test tree
	"testExplorer.showCollapseButton": true,

	// Show a button for expanding the top nodes of the test tree, recursively for the given number of levels
	"testExplorer.showExpandButton": 3,

	// Switch to the Test Explorer view whenever a test run is started
	"testExplorer.showOnRun": false,

	// Sort the tests and suites by label or location. If this is not set (or set to null), they will be shown in the order that they were received from the adapter
	//  - byLabel: sort by label
	//  - byLocation: sort by location (filename and line), if multiple tests or suites appear at the same location, they are sorted by label
	//  - byLabelWithSuitesFirst: sort by label, but always put the suites on top
	//  - byLocationWithSuitesFirst: sort by location, but always put the suites on top
	//  - null: don't sort, the tests and suites will be shown in the order that they were received from the adapter
	"testExplorer.sort": null,

	// Specifies the folder path to the JRE used to launch the W3C Validation Language Server.
	// For example "C:\Program Files\Java\jre1.8.0_171"
	"vscode-w3cvalidation.javaHome": null,

	// Font family used to display the gitk view
	"gitk.fontFamily": "monospace",

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"refactor-css.exclude": "**/{node_modules,bower_components,dist}/**",

	// Minimum number of unique classes per HTML tag for highlighting.
	"refactor-css.highlightMinimumClasses": 3,

	// Minimum number of occurrences of class combination in workspace for highlighting.
	"refactor-css.highlightMinimumOccurrences": 3,

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"refactor-css.include": "**/*.{htm,html,vue,hbs,handlebars,php,jade,twig,md,erb,ejs,nunjucks,haml,leaf}",

	// Enable CFML snippets
	"cfml.snippets.enabled": true,

	// If 'true', requesting a build while a build is already running will stop and restart the build
	"cmake.autoRestartBuild": false,

	// Additional arguments to pass to CMake when building
	"cmake.buildArgs": [],

	// Build the target before running it.
	"cmake.buildBeforeRun": true,

	// The directory where CMake build files will go
	"cmake.buildDirectory": "${workspaceRoot}/build",

	// Environment variables to pass to CMake during build
	"cmake.buildEnvironment": {},

	// Additional arguments to pass to the underlying build tool when building
	"cmake.buildToolArgs": [],

	// 
	"cmake.cacheInit": null,

	// Clear build output before each build
	"cmake.clearOutputBeforeBuild": true,

	// Name/path of the CMake executable to use
	"cmake.cmakePath": "cmake",

	// Additional arguments to pass to CMake when configuring
	"cmake.configureArgs": [],

	// Environment variables to pass to CMake during configure
	"cmake.configureEnvironment": {},

	// Automatically configure CMake project directories when they are opened
	"cmake.configureOnOpen": null,

	// CMake variables to set on the command line
	"cmake.configureSettings": {},

	// Copy compile_commands.json to this location after a successful configure
	"cmake.copyCompileCommands": null,

	// The number of parallel test jobs. Use zero to use the value of cmake.parallelJobs
	"cmake.ctest.parallelJobs": 0,

	// Arguments to pass to CTest
	"cmake.ctestArgs": [],

	// Path to CTest executable. If null, will be inference from cmake.cmakePath (recommended to leave null)
	"cmake.ctestPath": null,

	// The debug configuration to use when debugging a target
	"cmake.debugConfig": {},

	// 
	"cmake.defaultVariants": {
		"buildType": {
			"default": "debug",
			"description": "The build type",
			"choices": {
				"debug": {
					"short": "Debug",
					"long": "Emit debug information without performing optimizations",
					"buildType": "Debug"
				},
				"release": {
					"short": "Release",
					"long": "Enable optimizations, omit debug info",
					"buildType": "Release"
				},
				"minsize": {
					"short": "MinSizeRel",
					"long": "Optimize for smallest binary size",
					"buildType": "MinSizeRel"
				},
				"reldeb": {
					"short": "RelWithDebInfo",
					"long": "Perform optimizations AND include debugging information",
					"buildType": "RelWithDebInfo"
				}
			}
		}
	},

	// Directories where Emscripten may be installed
	"cmake.emscriptenSearchDirs": [],

	// Output parsers to use. Supported parsers 'cmake', 'gcc', 'gnuld' for GNULD-style inker output, 'msvc' for Microsoft Visual C++, and 'ghs' for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics
	"cmake.enabledOutputParsers": [
		"cmake",
		"gcc",
		"gnuld",
		"msvc",
		"ghs"
	],

	// Enable trace logging to file and console (very noisy)
	"cmake.enableTraceLogging": false,

	// Environment variables to set when running CMake commands
	"cmake.environment": {},

	// The CMake generator to use
	"cmake.generator": null,

	// The directory where CMake installed files will go.
	"cmake.installPrefix": null,

	// 
	"cmake.loggingLevel": "info",

	// Directories where MinGW may be installed
	"cmake.mingwSearchDirs": [
		"C:\\MinGW"
	],

	// Encoding of the output from external commonds(eg.cmake -- build)
	"cmake.outputLogEncoding": "auto",

	// The number of parallel build jobs. Use zero to automatically detect the number of CPUs.
	"cmake.parallelJobs": 0,

	// Parse compiler output for warnings and errors
	"cmake.parseBuildDiagnostics": true,

	// The CMake platform to use when configuring
	"cmake.platform": null,

	// The preferred CMake generator(s) to use when configuring (tried in order of listing)
	"cmake.preferredGenerators": [
		"Ninja",
		"Unix Makefiles"
	],

	// 
	"cmake.revealLog": "always",

	// Save open files before building
	"cmake.saveBeforeBuild": true,

	// The directory of the root CMakeLists.txt file
	"cmake.sourceDirectory": "${workspaceRoot}",

	// Environment variables to pass to CTest
	"cmake.testEnvironment": {},

	// The CMake toolset to use when configuring
	"cmake.toolset": null,

	// Enable CMake server
	"cmake.useCMakeServer": true,

	// A list of glob patterns for which the extension should NOT auto-remove the trigger word when a font class name is inserted from the auto completion list.
	"fontAwesomeAutocomplete.disableTriggerWordAutoClearPatterns": [
		"**/*.html"
	],

	// List of glob patters that determine which files will have Font Awesome Autocomplete enabled.
	"fontAwesomeAutocomplete.patterns": [
		"**/*.html"
	],

	// Background color of a Font Awesome icon preview. Supports any valid CSS color.
	"fontAwesomeAutocomplete.preview.backgroundColor": "#ffffff",

	// Foreground color of a Font Awesome icon preview. Supports any valid CSS color.
	"fontAwesomeAutocomplete.preview.foregroundColor": "#000000",

	// This setting is deprecated and replaced by triggerWord in version 1.0.4. This setting can be safely removed.
	// List of characters that trigger Font Awesome Autocomplete.
	"fontAwesomeAutocomplete.triggerCharacters": [
		"f"
	],

	// A word that triggers the auto completion of Font Awesome icons. Last character of the trigger word is also the trigger character for auto completion menu.
	"fontAwesomeAutocomplete.triggerWord": "fa-",

	// Font Awesome major version to use (either 4 or 5).
	"fontAwesomeAutocomplete.version": "5",

	// Default name for the development branch [develop]
	"gitflow.default.development": "develop",

	// Default name for the production branch [master]
	"gitflow.default.production": "master",

	// After finishing a branch, delete the branch
	"gitflow.deleteBranchOnFinish": true,

	// If true, and `gitflow.deleteBranchOnFinish` is true, remote branches will be deleted when finishing a branch
	"gitflow.deleteRemoteBranches": true,

	// Specifies whether advanced items that are not commonly used are displayed in the AutoComplete list.
	"svg.completion.showAdvanced": false,

	// Specifies whether advanced items that are deprecated are displayed in the AutoComplete list.
	"svg.completion.showDeprecated": false,

	// Focus Disable SVGO Format On Save event if editor.formatOnSave is true
	"svg.disableFormatOnSave": false,

	// Each items corresponds to a plugin that should be enabled, the rest is disabled.
	"svg.format.plugins": {
		"sortAttrs": true
	},

	// Each items corresponds to a plugin that should be enabled, the rest is disabled.
	"svg.pretty.plugins": {
		"sortAttrs": true
	},

	// Specifies the Svg Preview Background
	"svg.preview.background": "transparent",

	// Specifies the Svg Preview Custom Background
	"svg.preview.backgroundCustom": "#eee",

	// Specifies the SVG standard version that will be used for autocompletion and validation.
	"svg.version": "1.1",

	// Removed in 0.8.0, use styles
	"highlight-matching-tag.beginningStyle": null,

	// Custom empty elements in addition to the default HTML empty elements
	"highlight-matching-tag.customEmptyElements": null,

	// Enables the highlighting and status bar
	"highlight-matching-tag.enabled": true,

	// Removed in 0.8.0, use styles
	"highlight-matching-tag.endingStyle": null,

	// Whether to highlight matching tag from the tag attributes
	"highlight-matching-tag.highlightFromAttributes": true,

	// Whether to highlight matching tag from inside the tag content
	"highlight-matching-tag.highlightFromContent": false,

	// Whether to highlight matching tag from the tag name
	"highlight-matching-tag.highlightFromName": true,

	// Should self-closing tags be highlighted
	"highlight-matching-tag.highlightSelfClosing": false,

	// Removed in 0.8.0, use styles
	"highlight-matching-tag.leftStyle": null,

	// Don't use default HTML empty elements
	"highlight-matching-tag.noDefaultEmptyElements": false,

	// Removed in 0.8.0, use styles
	"highlight-matching-tag.rightStyle": null,

	// Enables showing tag's path in status bar
	"highlight-matching-tag.showPath": true,

	// Enables showing highlighted tag pair in ruler section
	"highlight-matching-tag.showRuler": true,

	// Removed in 0.8.0, use styles
	"highlight-matching-tag.style": null,

	// Decorations for opening and closing tags
	"highlight-matching-tag.styles": null,

	// Date time format to be used.
	"insertDateString.format": "YYYY-MM-DD hh:mm:ss",

	// Date format to be used.
	"insertDateString.formatDate": "YYYY-MM-DD",

	// Time format to be used.
	"insertDateString.formatTime": "hh:mm:ss",

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
	"vsintellicode.modelDownloadPath": null,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// The Host URL of your Home Assistant Host
	"vscode-home-assistant.hostUrl": "",

	// Enable insecure transport. Check this if you want to connect over an insecure HTTPS transport with a invalid certificate!
	"vscode-home-assistant.ignoreCertificates": false,

	// The Long Lived Access-Token for Home Assistant. Obtain a token via your user profile page in Home Assistant.
	"vscode-home-assistant.longLivedAccessToken": "",

	// Open a preview to the side automatically
	"svg.preview.autoOpen": false,

	// Show a bounding box around the preview image
	"svg.preview.boundingBox": false,

	// Whether to refresh the tree whenever a file in the workspace changes.
	"gitTreeCompare.autoRefresh": true,

	// Whether to compare against the selected base ref directly (full mode) or by computing a merge base first (merge mode).
	"gitTreeCompare.diffMode": "merge",

	// Whether to use a compact icon alignment (like Seti file icon theme) where only files have icons.
	"gitTreeCompare.iconsMinimal": false,

	// If gitTreeCompare.root is "workspace", whether to display files which are within the repository but outside the workspace folder in a special "/" folder.
	"gitTreeCompare.includeFilesOutsideWorkspaceRoot": true,

	// The location where the tree view should be displayed.
	"gitTreeCompare.location": "scm",

	// When selecting a modified file in the tree, whether to show its changes or just open the workspace file.
	"gitTreeCompare.openChanges": true,

	// Whether to refresh the git index each time the tree is refreshed. This avoids superfluous diff entries for cases when only the file modification date is changed, at the cost of an extra git invocation.
	"gitTreeCompare.refreshIndex": true,

	// The root of the tree when the workspace folder is not the same as the repository root.
	"gitTreeCompare.root": "workspace",

	// On opening API Elements documents, editor settings will be adjusted for you
	"apiElements.editor.adjustOptions": true,

	// Set to true to generate sourcemap for current document.
	"apiElements.parser.exportSourcemap": true,

	// Set to true generate an error if the blueprint is missing a title.
	"apiElements.parser.requireBlueprintName": false,

	// Determines if look for api when symbols are requested
	"apiElements.symbols.api": true,

	// Determines if look for resource when symbols are requested
	"apiElements.symbols.resource": true,

	// Determines if look for resourceGroup when symbols are requested
	"apiElements.symbols.resourceGroup": true,

	// Determines if look for transition when symbols are requested
	"apiElements.symbols.transition": true,

	// Debounce time before triggering the validation parser logic
	"apiElements.validation.debounce": 1000,

	// Controls whether auto detection of Gulp tasks is on or off. Default is on.
	"gulp.autoDetect": "on",

	// Templates for third party modules
	"azure-iot-edge.3rdPartyModuleTemplates": {},

	// Current default target platform for Edge Module
	"azure-iot-edge.defaultPlatform": {
		"platform": "amd64",
		"alias": null
	},

	// Module Connection String
	"azure-iot-edge.EdgeHubConnectionString": "",

	// Edge Module CA path
	"azure-iot-edge.EdgeModuleCACertificateFile": "",

	// Environment variables for the command executor and Azure IoT Edge terminals
	"azure-iot-edge.executor.env": {},

	// Edge Module target platforms
	"azure-iot-edge.platforms": {
		"amd64": [],
		"arm32v7": [],
		"windows-amd64": []
	},

	// Switch to install C# function module template before scaffolding. Default is true.
	"azure-iot-edge.templateInstall.csfunctionmodule": true,

	// Switch to install C# module template before scaffolding. Default is true.
	"azure-iot-edge.templateInstall.csharpmodule": true,

	// Switch to install Node.js module template before scaffolding. Default is true.
	"azure-iot-edge.templateInstall.nodemodule": true,

	// (Windows Only) Replace the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash on Windows, Git Bash or Cgywin. Example: For Bash on Windows, setting this to '/mnt/' will replace 'C:\foo\bar' with '/mnt/c/foo/bar'
	"azure-iot-edge.terminalRoot": "",

	// Set the C module template version, which will be referenced during scaffolding C module.
	"azure-iot-edge.version.cmodule": "master",

	// Set the C# function module template version, which will be referenced during scaffolding C# function module.
	"azure-iot-edge.version.csfunctionmodule": null,

	// Set the C# module template version, which will be referenced during scaffolding C# module.
	"azure-iot-edge.version.csharpmodule": null,

	// Set the edgeAgent image version, which will be referenced in deployment manifest.
	"azure-iot-edge.version.edgeAgent": "1.0",

	// Set the edgeHub image version, which will be referenced in deployment manifest.
	"azure-iot-edge.version.edgeHub": "1.0",

	// Set the Java module template version, which will be referenced during scaffolding Java module.
	"azure-iot-edge.version.javamodule": null,

	// Set the Node.js module template version, which will be referenced during scaffolding Node.js module.
	"azure-iot-edge.version.nodemodule": null,

	// Set the Python module template version, which will be referenced during scaffolding Python module.
	"azure-iot-edge.version.pythonmodule": "master",

	// Set the tempSensor image version, which will be referenced in deployment manifest.
	"azure-iot-edge.version.tempSensor": "1.0",

	// Indicates the base folders to search for any folder projects
	"projectManager.any.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.any.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.any.maxDepthRecursion": 4,

	// Should cache the VSCode, Git and SVN projects found?
	"projectManager.cacheProjectsBetweenSessions": true,

	// Should check for invalid paths before listing, showing a message below the project name?
	"projectManager.checkInvalidPathsBeforeListing": true,

	// Should filter projects through full path?
	"projectManager.filterOnFullPath": false,

	// Indicates the base folders to search for Git projects
	"projectManager.git.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.git.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test",
		".haxelib"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.git.maxDepthRecursion": 4,

	// List the projects grouped by...(Favorites, VSCode, Git, Mercurial and SVN)
	"projectManager.groupList": false,

	// Indicates the base folders to search for Mercurial projects
	"projectManager.hg.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.hg.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test",
		".haxelib"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.hg.maxDepthRecursion": 4,

	// Should the project be opened using a New Window when you click the Status Bar?
	"projectManager.openInNewWindowWhenClickingInStatusBar": false,

	// Indicates an alternative location where the `projects.json` file is stored
	"projectManager.projectsLocation": "",

	// Should the current project be hidden in the list of available projects?
	"projectManager.removeCurrentProjectFromList": true,

	// Should display the project name in the Status Bar?
	"projectManager.showProjectNameInStatusBar": true,

	// List the projects sorted by...(Saved, Name, Path or Recent)
	"projectManager.sortList": "Name",

	// Indicates the base folders to search for SVN projects
	"projectManager.svn.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.svn.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.svn.maxDepthRecursion": 4,

	// Indicates the base folders to search for VSCode projects
	"projectManager.vscode.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.vscode.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.vscode.maxDepthRecursion": 4,

	// Device Connection String
	"azure-iot-toolkit.deviceConnectionString": "<<insert your Device Connection String>>",

	// IoT Hub Connection String
	"azure-iot-toolkit.iotHubConnectionString": "<<insert your IoT Hub Connection String>>",

	// IoT Hub Consumer Group
	"azure-iot-toolkit.iotHubConsumerGroup": "$Default",

	// Whether to stringify device-to-cloud messages.
	"azure-iot-toolkit.iotHubD2CMessageStringify": false,

	// The time span (in minutes) of monitoring built-in event endpoint before current time.
	"azure-iot-toolkit.monitorD2CBeforeNowInMinutes": 0,

	// Whether to show IoT Hub info when IoT Hub Connection String is not set.
	"azure-iot-toolkit.showIoTHubInfo": true,

	// Whether to show verbose info when monitoring messages.
	"azure-iot-toolkit.showVerboseMessage": false,

	// (Windows Only) Replace the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash on Windows, Git Bash or Cgywin. Example: For Bash on Windows, setting this to '/mnt/' will replace 'C:\foo\bar' with '/mnt/c/foo/bar'
	"azure-iot-toolkit.terminalRoot": "",

	// Whether to enable auto refresh of tree view.
	"azure-iot-toolkit.treeViewAutoRefreshEnable": false,

	// Time interval in seconds for tree view auto refresh, auto refresh has to be enabled for it to work.
	"azure-iot-toolkit.treeViewAutoRefreshIntervalInSeconds": 60,

	// The full path to the executable, including the complete filename of the exectuable
	"browser-preview.chromeExecutable": "",

	// The type of image used in rendering preview. Supported values are: `jpeg` (default) and `png`
	"browser-preview.format": "jpeg",

	// The default start url for new Browser Preview instances
	"browser-preview.startUrl": "https://code.visualstudio.com",

	// Toggles verbose logging
	"browser-preview.verbose": "",

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "internalConsole",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging. Make sure 'java.autobuild.enabled' is not disabled.
	"java.debug.settings.hotCodeReplace": "manual",

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Global namespace constants and functions will be fully qualified (prefixed with a backslash).
	"intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,

	// Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
	"intelephense.completion.insertUseDeclaration": true,

	// The maximum number of completion items returned per request.
	"intelephense.completion.maxItems": 100,

	// Method and function completions will include parentheses and trigger parameter hints.
	"intelephense.completion.triggerParameterHints": true,

	// The directory of the entry point to the application (index.php). Defaults to the first workspace folder. Used for resolving script inclusion.
	"intelephense.environment.documentRoot": "",

	// The include paths (as individual path items) as defined in the include_path ini setting. Used for resolving script inclusion.
	"intelephense.environment.includePaths": [],

	// Configure glob patterns to make files available for language server features. Inherits from files.associations.
	"intelephense.files.associations": [
		"*.php",
		"*.phtml"
	],

	// Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
	"intelephense.files.exclude": [
		"**/.git/**",
		"**/.svn/**",
		"**/.hg/**",
		"**/CVS/**",
		"**/.DS_Store/**",
		"**/node_modules/**",
		"**/bower_components/**",
		"**/vendor/**/{Test,test,Tests,tests}/**"
	],

	// Maximum file size in bytes.
	"intelephense.files.maxSize": 1000000,

	// Enables formatting.
	"intelephense.format.enable": true,

	// Maximum memory (in MB) that the server should use. Only applicable if runtime has been set. Minimum 256. Defaults to ~1500 when using default runtime.
	"intelephense.maxMemory": 0,

	// Path to a Node.js executable. Use this if you wish to control memory usage or use a newer version of Node.js. Defaults to Node.js shipped with VSCode.
	"intelephense.runtime": "",

	// Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
	"intelephense.stubs": [
		"apache",
		"bcmath",
		"bz2",
		"calendar",
		"com_dotnet",
		"Core",
		"ctype",
		"curl",
		"date",
		"dba",
		"dom",
		"enchant",
		"exif",
		"fileinfo",
		"filter",
		"fpm",
		"ftp",
		"gd",
		"hash",
		"iconv",
		"imap",
		"interbase",
		"intl",
		"json",
		"ldap",
		"libxml",
		"mbstring",
		"mcrypt",
		"meta",
		"mssql",
		"mysqli",
		"oci8",
		"odbc",
		"openssl",
		"pcntl",
		"pcre",
		"PDO",
		"pdo_ibm",
		"pdo_mysql",
		"pdo_pgsql",
		"pdo_sqlite",
		"pgsql",
		"Phar",
		"posix",
		"pspell",
		"readline",
		"recode",
		"Reflection",
		"regex",
		"session",
		"shmop",
		"SimpleXML",
		"snmp",
		"soap",
		"sockets",
		"sodium",
		"SPL",
		"sqlite3",
		"standard",
		"superglobals",
		"sybase",
		"sysvmsg",
		"sysvsem",
		"sysvshm",
		"tidy",
		"tokenizer",
		"wddx",
		"xml",
		"xmlreader",
		"xmlrpc",
		"xmlwriter",
		"Zend OPcache",
		"zip",
		"zlib"
	],

	// Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
	"intelephense.telemetry.enabled": null,

	// Traces the communication between VSCode and the intelephense language server.
	"intelephense.trace.server": "off",

	// rsync arguments to add
	"sync-rsync.args": [],

	// Auto hide rsync output when rsync is done
	"sync-rsync.autoHideOutput": false,

	// Auto show rsync output when rsync is working
	"sync-rsync.autoShowOutput": false,

	// Auto show rsync output when rsync is working
	"sync-rsync.autoShowOutputOnError": true,

	// Rsync's --chmod option
	"sync-rsync.chmod": "",

	// If using cygwin, optional path to cygpath
	"sync-rsync.cygpath": "",

	// Delete false during sync
	"sync-rsync.delete": false,

	// Rsync exclude patterns
	"sync-rsync.exclude": [
		".git",
		".vscode"
	],

	// The rsync executable
	"sync-rsync.executable": "rsync",

	// The executable shell to run rsync in
	"sync-rsync.executableShell": "",

	// Rsync flags
	"sync-rsync.flags": "rlptzv",

	// Rsync include patterns
	"sync-rsync.include": [],

	// Local location defaults to workspace (must end in path separator)
	"sync-rsync.local": null,

	// Show notifications for sync
	"sync-rsync.notification": false,

	// Sync file on load
	"sync-rsync.onLoadIndividual": false,

	// Sync project on save
	"sync-rsync.onSave": false,

	// Sync file on save
	"sync-rsync.onSaveIndividual": false,

	// Extra rsync options (not checked)
	"sync-rsync.options": [],

	// Remote location (user@host:path) (must end in path separator)
	"sync-rsync.remote": null,

	// Rsync's -e option e.g. ssh -p 1234
	"sync-rsync.shell": "",

	// Show progress during rsync
	"sync-rsync.showProgress": true,

	// Sites
	"sync-rsync.sites": [],

	// Use WSL
	"sync-rsync.useWSL": false,

	// Enables sync up on file system change for given glob patterns (use carefuly)
	"sync-rsync.watchGlobs": [],

	// Enables code lens for Regex Previewer
	"regex-previewer.enableCodeLens": true,

	// This setting will let you change the default file icon for dark themes.
	"vsicons.associations.fileDefault.file": null,

	// This setting will let you change the default file icon for light themes.
	"vsicons.associations.fileDefault.file_light": null,

	// These custom associations will override the file icon associations defined by default.
	"vsicons.associations.files": [],

	// This setting will let you change the default folder icon for dark themes.
	"vsicons.associations.folderDefault.folder": null,

	// This setting will let you change the default folder icon for light themes.
	"vsicons.associations.folderDefault.folder_light": null,

	// This setting will let you change the default root folder icon for dark themes.
	"vsicons.associations.folderDefault.root_folder": null,

	// This setting will let you change the default root folder icon for light themes.
	"vsicons.associations.folderDefault.root_folder_light": null,

	// These custom associations will override the folder icon associations defined by default.
	"vsicons.associations.folders": [],

	// The physical path to the parent folder where the custom icons folder resides on your local machine.
	"vsicons.customIconFolderPath": "",

	// If set to 'true', when manually changing the configurations, the 'restart' message won't be shown.
	"vsicons.dontShowConfigManuallyChangedMessage": false,

	// If set to 'true', the new version message won't be shown anymore.
	"vsicons.dontShowNewVersionMessage": false,

	// If set to 'true', the extension will match some of the common Angular patterns.
	"vsicons.presets.angular": false,

	// If set to 'true', all folders will have the default folder icon.
	"vsicons.presets.foldersAllDefaultIcon": false,

	// If set to 'true', the extension will hide the folder arrows in the 'Explorer'.
	"vsicons.presets.hideExplorerArrows": false,

	// If set to 'true', all folders will be hidden.
	"vsicons.presets.hideFolders": false,

	// If set to 'true', the extension will use the official JS icon.
	"vsicons.presets.jsOfficial": false,

	// If set to 'true', the extension will use the official JSON icon.
	"vsicons.presets.jsonOfficial": false,

	// If set to 'true', the extension will match some of the common NestJS patterns.
	"vsicons.presets.nestjs": false,

	// If set to 'true', the extension will use the official TS icon.
	"vsicons.presets.tsOfficial": false,

	// If set to 'true', the extension will restart automatically on project detection.
	"vsicons.projectDetection.autoReload": false,

	// If set to 'true', the extension will disable the project detection.
	"vsicons.projectDetection.disableDetect": false,

	// markdownlint config object
	"markdownlint.config": {
		"MD013": false
	},

	// Array of paths for custom rules to include when linting
	"markdownlint.customRules": [],

	// Array of workspace paths that load custom rules without prompting
	"markdownlint.customRulesAlwaysAllow": [],

	// Array of file names and glob expressions to ignore when linting
	"markdownlint.ignore": [],

	// Run the linter on save (onSave) or on type (onType)
	"markdownlint.run": "onType",

	// The link to an online tool to view a commit (use `${hash}` for the commit hash).
	"gitblame.commitUrl": "",

	// Ignore whitespace changes when blaming (-w flag)
	"gitblame.ignoreWhitespace": false,

	// When enabled it inferes online commit tool URL based on origin URL. Disabled whenever `gitblame.commitUrl` isn't empty.
	"gitblame.inferCommitUrl": true,

	// Customize the info message
	"gitblame.infoMessageFormat": "${commit.summary}",

	// BitBucket uses commits instead of commit in their web interface. Turn this on if you want the View button to work for BitBucket.
	"gitblame.isWebPathPlural": false,

	// If enabled it logs all messages to the log. If disabled only critical messages gets logged.
	"gitblame.logNonCritical": true,

	// An array of substrings that, when present in the git origin URL, activates `gitblame.isWebPathPlural`
	"gitblame.pluralWebPathSubstrings": [
		"bitbucket",
		"atlassian"
	],

	// Customize the status bar message
	"gitblame.statusBarMessageFormat": "Blame ${author.name} ( ${time.ago} )",

	// Customize the status bar message
	"gitblame.statusBarMessageNoCommit": "Not Committed Yet",

	// Priority where the status bar view should be placed
	"gitblame.statusBarPositionPriority": 0,

	// A list of style sheet file extensions you want the extension to look for.
	"css.fileExtensions": [
		"css",
		"scss"
	],

	// A list of remote style sheets.
	"css.remoteStyleSheets": [],

	// Colorize Quokka output
	"quokka.colorizeOutput": true,

	// Quokka gutter indicators colors (requires a restart after change)
	"quokka.colors": {
		"covered": "#62b455",
		"errorPath": "#ffa0a0",
		"errorSource": "#fe536a",
		"notCovered": "#cccccc",
		"partiallyCovered": "#d2a032"
	},

	// Minimize the number of new line characters between output console messages
	"quokka.compactMessageOutput": false,

	// Override Quokka Dark Theme Error
	"quokka.darkTheme.error.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#fe536a",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Dark Theme Log
	"quokka.darkTheme.log.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgba(86, 156, 214, 1)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme Error
	"quokka.lightTheme.error.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#c80000",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme Log
	"quokka.lightTheme.log.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#0000ff",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Show Quokka output window on start up
	"quokka.showOutputOnStart": true,

	// Stop Quokka expiring license update reminders
	"quokka.suppressExpirationNotifications": false,

	// Supress Quokka Glyph Margin Notifications
	"quokka.suppressGlyphMarginNotifications": true,

	// Name of the app to use for optimizating the images
	"optimizeImages.app": "",

	// An array of options to be passed to the app on execution.
	// Use the placeholder '[filepath]' (without quotes) to insert the filepath to the currently processed file
	"optimizeImages.appOptions": [],

	// Regex used for matching images
	"optimizeImages.imageRegex": ".*\\.(png|gif|jpe?g)$",

	// Maximum depth to look at when searching images
	"optimizeImages.searchDepth": 10,

	// Ignore these folders when searching images
	"optimizeImages.searchIgnoreFolders": [
		".git",
		".svn",
		"bower_components",
		"node_modules",
		"typings"
	],

	// Path relative to the root where to start searching images
	"optimizeImages.searchStartingPath": ".",

	// Wallaby gutter indicators colors (requires a restart after change)
	"wallaby.colors": {
		"covered": "#62b455",
		"errorPath": "#ffa0a0",
		"errorSource": "#fe536a",
		"notCovered": "#cccccc",
		"partiallyCovered": "#d2a032"
	},

	// Stop automatic wallaby core updates
	"wallaby.noAutomaticInstall": false,

	// Path to node.js executable that is used to run wallaby core
	"wallaby.node": "",

	// Wallaby output content limit in bytes
	"wallaby.outputContentSize": 0,

	// Show wallaby core update notifications
	"wallaby.showUpdateNotifications": true,

	// Use strict SSL to download wallaby updates
	"wallaby.strictSSL": true,

	// Stop wallaby expiring license update reminders
	"wallaby.suppressExpirationNotifications": false,

	// Use HTTP protocol to download wallaby updates
	"wallaby.useHttpForDownload": false,

	// Use Windows Subsystem for Linux
	"wallaby.useWsl": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
	"auto-close-tag.activationOnLanguage": [
		"xml",
		"php",
		"blade",
		"ejs",
		"jinja",
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"plaintext",
		"markdown",
		"vue",
		"liquid",
		"erb",
		"lang-cfml",
		"cfml",
		"HTML (Eex)"
	],

	// Whether to close self-closing tag automatically
	"auto-close-tag.enableAutoCloseSelfClosingTag": true,

	// Whether to insert close tag automatically
	"auto-close-tag.enableAutoCloseTag": true,

	// Set the tag list that would not be auto closed.
	"auto-close-tag.excludedTags": [
		"area",
		"base",
		"br",
		"col",
		"command",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	],

	// Enable both Visual Studio and Sublime Text mode
	"auto-close-tag.fullMode": false,

	// Auto close tag when </ is typed, same as Sublime Text 3
	"auto-close-tag.SublimeText3Mode": false,

	// module alias like webpack resolve.alias 或者 typescript compilerOptions.paths, not support nested alias path, e.g { util: 'src/util/' }
	"js-import.alias": "",

	// whether to enable codeCompletion
	"js-import.codeCompletion": "true",

	// whether to autofix import when you select completion item, you can set it false to avoid mistaken import, then we will only provide code completion and you can use shutcut or autofix to import identifier
	"js-import.codeCompletionAction": "true",

	// option for comma-dangle to generate import statement, like esline rule imports of comma-dangle, there are four options :　never, always, always-multiline, only-multiline
	"js-import.commaDangleImport": "never",

	// Glob for files to exclude from watch and scan, e.g **/.meteor/**. Defaults to nothing
	"js-import.excludeFilesToScan": "",

	// Glob for files to watch and scan, e.g ./src/** ./src/app/**/*.js. Defaults to **/*.{jsx,js,ts}
	"js-import.filesToScan": "**/*.{jsx,js,tsx,ts}",

	// the insert position of new import statement, first means first of all imports, last means last of all imports, soon we will suport sort
	"js-import.insertPosition": "last",

	// max-line length like eslint rule max-line, the -1 will disable the rule
	"js-import.maxLen": "100",

	// suffix of plainFiles, import statement is like 'import 'xxx.less';'. Defaults to css,less,sass
	"js-import.plainFileSuffix": "css,less,sass",

	// suffix of plainFiles which should be imported with default member, import statement is like 'import json form 'xxx.json';'. Defaults to json,bmp,gif,jpe,jpeg,png
	"js-import.plainFileSuffixWithDefaultMember": "json,bmp,gif,jpe,jpeg,png",

	// whether to use singlequote or use doublequote
	"js-import.quote": "singlequote",

	// the source dir, currently we only support single root
	"js-import.root": "/src",

	// whether to add semicolon after import statement
	"js-import.semicolon": "true",

	// Load a default output path on wizard launch.
	"wts.defaultOutputPath": "",

	// Enable upcoming features; Warning: may cause stability issues.
	"wts.enablePreviewMode": false,

	// A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
	"beautify.config": null,

	// List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
	"beautify.ignore": [],

	// Link file types to the beautifier type
	"beautify.language": {
		"js": {
			"type": [
				"javascript",
				"json",
				"jsonc"
			],
			"filename": [
				".jshintrc",
				".jsbeautifyrc"
			]
		},
		"css": [
			"css",
			"less",
			"scss"
		],
		"html": [
			"htm",
			"html"
		]
	},

	// Default style for all customized keywords
	"todohighlight.defaultStyle": {},

	// Glob pattern that defines files and folders to exclude while listing annotations.
	"todohighlight.exclude": [
		"**/node_modules/**",
		"**/bower_components/**",
		"**/dist/**",
		"**/build/**",
		"**/.vscode/**",
		"**/.github/**",
		"**/_output/**",
		"**/*.min.*",
		"**/*.map",
		"**/.next/**"
	],

	// Glob patterns that defines the files to search for. Only include files you need, DO NOT USE `{**/*.*}` for both permormance and avoiding binary files reason.
	"todohighlight.include": [
		"**/*.js",
		"**/*.jsx",
		"**/*.ts",
		"**/*.tsx",
		"**/*.html",
		"**/*.php",
		"**/*.css",
		"**/*.scss"
	],

	// Specify whether the keywords are case sensitive or not
	"todohighlight.isCaseSensitive": true,

	// Enable or disable the highlight
	"todohighlight.isEnable": true,

	// Customize keywords and colors. Any css color identifier is valid.
	"todohighlight.keywords": [],

	// Specify keywords via RegExp instead of `todohighlight.keywords` one by one. NOTE that if this presents, `todohighlight.keywords` will be ignored. And REMEMBER to escapse the back slash if there's any in your regexp (using \\ instead of single back slash)
	"todohighlight.keywordsPattern": "",

	// Max files for searching
	"todohighlight.maxFilesForSearch": 5120,

	// If the file path within the output channel not clickable, set this to true to toggle the path patten between `<path>#<line>` and `<path>:<line>:<column>`
	"todohighlight.toggleURI": false,

	// Show 'optional' warning and info messages in the status bar instead of the top modals.
	"gaac.disableOptionalMessages": true,

	// Force all character in the prefilled commit message to be in lower case. Only works when 'gaac.withFileWorkspacePath' is TRUE. Output: 'README: ' => 'readme: '.
	"gaac.forceLowerCase": false,

	// Ignore the file extension in the commit message. Output: 'res/icon.png: ' => 'res/icon: '.
	"gaac.ignoreFileExtension": true,

	// Replace the commit message via a pattern (the pattern can be a string or a regex string). These replacements are executed after everything else, BUT before your own edit (in the prompt field). Example: [{ "pattern": "/^package[^\.]*\.jso?n?/", "with": "npm" }] will replace the prefilled commit message like: 'package-lock.json: ' => 'npm: '.
	"gaac.replacePatternWith": [
		{
			"pattern": "/^.editorconfig/",
			"with": "editorconfig"
		},
		{
			"pattern": "/^.gitignore/",
			"with": "git"
		},
		{
			"pattern": "/^.travis/",
			"with": "travis"
		},
		{
			"pattern": "/^.vscodeignore/",
			"with": "vscode"
		},
		{
			"pattern": "/^CHANGELOG[^:]*/",
			"with": "changelog"
		},
		{
			"pattern": "/^Godeps[^:]*/",
			"with": "godep"
		},
		{
			"pattern": "/^LICENSE[^:]*/",
			"with": "license"
		},
		{
			"pattern": "/^Makefile[^:]*/i",
			"with": "makefile"
		},
		{
			"pattern": "/^(npm-shrinkwrap|.npmignore|package(-lock)?)[^:]*/",
			"with": "npm"
		},
		{
			"pattern": "/^webpack[^:]*/",
			"with": "webpack"
		},
		{
			"pattern": "/^README[^:]*/",
			"with": "readme"
		},
		{
			"pattern": "/^src//",
			"with": ""
		}
	],

	// Prefill the commit message with the workspace relative file path, followed by ': '.
	"gaac.withFileWorkspacePath": true,

	// Try to guess the action when it's obvious and add it to the prefilled commit message.
	"gaac.withGuessedAction": true,

	// Add a custom action for any prefilled commit matching a pattern and Git state. The `state` can be any one of: 'ADDED', 'DELETED', 'MODIFIED', 'RENAMED'.
	"gaac.withGuessedCustomActions": [
		{
			"action": "ignore",
			"pattern": "/^.(gitignore|npmignore|vscodeignore)/",
			"state": "MODIFIED"
		},
		{
			"action": "update",
			"pattern": "/^CHANGELOG/",
			"state": "MODIFIED"
		},
		{
			"action": "update",
			"pattern": "/^LICENSE/",
			"state": "MODIFIED"
		},
		{
			"action": "update",
			"pattern": "/^README/",
			"state": "MODIFIED"
		}
	],

	// array of additional unicode characters to match. example '\u200E'
	"highlight-bad-chars.additionalUnicodeChars": [],

	// text editor decoration configuration, as passed to vscode.window.createTextEditorDecorationType
	"highlight-bad-chars.badCharDecorationStyle": {
		"cursor": "crosshair",
		"backgroundColor": "rgba(255,0,0,0.3)",
		"borderWidth": "1px",
		"borderStyle": "solid",
		"borderColor": "rgba(255,0,0,0.6)"
	},

	// Whether auto refreshing is enabled
	"svn.autorefresh": true,

	// Set file to status resolved after fix conflictss
	"svn.conflicts.autoResolve": false,

	// Controls if SVN contributes colors and badges to the explorer and the open (VSCode >= 1.18 with proposed-api)
	"svn.decorations.enabled": true,

	// Encoding of svn output if the output is not utf-8. When this parameter is null, the encoding is automatically detected. Example: 'windows-1252'.
	"svn.default.encoding": null,

	// The default location to checkout a svn repository.
	"svn.defaultCheckoutDirectory": null,

	// When a file is deleted, what SVN should do? `none` - Do nothing, `prompt` - Ask the action, `remove` - automatically remove from SVN
	"svn.delete.actionForDeletedFiles": "prompt",

	// Ignored files/rules for `svn.delete.actionForDeletedFiles`(Ex.: file.txt or **/*.txt)
	"svn.delete.ignoredRulesForDeletedFiles": [],

	// Controls whether to automatically detect svn externals.
	"svn.detectExternals": true,

	// Controls whether to automatically detect svn on ignored folders.
	"svn.detectIgnored": true,

	// Show diff changes using latest revision in the repository. Set false to use latest revision in local folder
	"svn.diff.withHead": true,

	// Whether svn is enabled
	"svn.enabled": true,

	// Allow usage of proposed APIs of VSCode. set 'product' to auto-edit product.json, set 'argument' to allow with start argument, set 'none' to not prompt
	"svn.enableProposedApi": null,

	// Use garavatar icons in log viewers
	"svn.gravatars.enabled": true,

	// Ignores the warning when SVN is missing
	"svn.ignoreMissingSvnWarning": false,

	// List of SVN repositories to ignore.
	"svn.ignoreRepositories": null,

	// Ignores the warning when working copy is too old
	"svn.ignoreWorkingCopyIsTooOld": false,

	// Regex to detect path for 'branches' in SVN URL, 'null' to disable. Subpath use 'branches/[^/]+/([^/]+)(/.*)?' (Ex.: 'branches/...', 'versions/...')
	"svn.layout.branchesRegex": "branches/([^/]+)(/.*)?",

	// Regex group position for name of branch
	"svn.layout.branchesRegexName": 1,

	// Set true to show 'branches/<name>' and false to show only '<name>'
	"svn.layout.showFullName": true,

	// Regex group position for name of tag
	"svn.layout.tagRegexName": 1,

	// Regex to detect path for 'tags' in SVN URL, 'null' to disable. Subpath use 'tags/[^/]+/([^/]+)(/.*)?'. (Ex.: 'tags/...', 'stamps/...')
	"svn.layout.tagsRegex": "tags/([^/]+)(/.*)?",

	// Regex to detect path for 'trunk' in SVN URL, 'null' to disable. (Ex.: '(trunk)', '(main)')
	"svn.layout.trunkRegex": "(trunk)(/.*)?",

	// Regex group position for name of trunk
	"svn.layout.trunkRegexName": 1,

	// Number of commit messages to log
	"svn.log.length": 50,

	// Maximum depth to find subfolders using SVN
	"svn.multipleFolders.depth": 4,

	// Allow to find subfolders using SVN
	"svn.multipleFolders.enabled": false,

	// Folders to ignore using SVN
	"svn.multipleFolders.ignore": [
		"**/.git",
		"**/.hg",
		"**/vendor",
		"**/node_modules"
	],

	// Path to the svn executable
	"svn.path": null,

	// Refresh remote changes on refresh command
	"svn.refresh.remoteChanges": false,

	// Set the interval in seconds to check changed files on remote repository and show in statusbar. 0 to disable
	"svn.remoteChanges.checkFrequency": 300,

	// Show the output window when the extension starts
	"svn.showOutput": false,

	// Show the update message when update is run
	"svn.showUpdateMessage": true,

	// Set left click functionality on changes resource state
	"svn.sourceControl.changesLeftClick": "open diff",

	// Combine the svn external in the main if is from the same server.
	"svn.sourceControl.combineExternalIfSameServer": false,

	// Allow to count unversioned files in status count
	"svn.sourceControl.countUnversioned": true,

	// Hide unversioned files in Source Control UI
	"svn.sourceControl.hideUnversioned": false,

	// Changelists to ignore on commit
	"svn.sourceControl.ignoreOnCommit": [
		"ignore-on-commit"
	],

	// Changelists to ignore on status count
	"svn.sourceControl.ignoreOnStatusCount": [
		"ignore-on-commit"
	],

	// Set to ignore externals definitions on update (add --ignore-externals)
	"svn.update.ignoreExternals": true,

	// Which bundle size to display
	"importCost.bundleSizeDecoration": "both",

	// Enable debug logging
	"importCost.debug": false,

	// File extensions to be parsed by the Javascript parser
	"importCost.javascriptExtensions": [
		"\\.jsx?$"
	],

	// Decoration color for large packages
	"importCost.largePackageColor": "#d44e40",

	// Decoration color for medium packages
	"importCost.mediumPackageColor": "#7cc36e",

	// Upper size limit, in KB, that will count a package as a medium package
	"importCost.mediumPackageSize": 100,

	// Display the 'calculating' decoration when starting to calculate the size
	"importCost.showCalculatingDecoration": true,

	// Decoration color for small packages
	"importCost.smallPackageColor": "#7cc36e",

	// Upper size limit, in KB, that will count a package as a small package
	"importCost.smallPackageSize": 50,

	// Size calculation timeout in milliseconds (requires restart)
	"importCost.timeout": 10000,

	// File extensions to be parsed by the Typescript parser
	"importCost.typescriptExtensions": [
		"\\.tsx?$"
	],

	// The default engine for which the decorations will be shown
	"csstriggers.defaultEngine": "blink",

	// A flag which indicates whether to show cost indicator decorations
	"csstriggers.showDecoration": true,

	// A flag which indicates whether to show cost indicator decorations inline
	"csstriggers.showDecorationInline": false,

	// A flag which indicates whether to show extended information about the given css property
	"csstriggers.showExtendedInformation": false,

	// A flag which indicates whether to show the legend for a given css trigger
	"csstriggers.showLegend": false,

	// when make a share url, auto open it
	"wandbox.autoOpenShareUrl": true,

	// set raw option by compiler
	"wandbox.compilerOptionRaw": {
		"compiler(example)": "raw compile option text"
	},

	// set emoji
	"wandbox.emoji": {
		"stamp": "🐾",
		"error": "🚫",
		"warning": "⚠️",
		"hint": "👉",
		"signal": "🚦",
		"link": "🔗",
		"lap": "🏁",
		"new": "✨️",
		"checkedBox": "☑️",
		"uncheckedBox": "⬜️",
		"checkedRadio": "🔘",
		"uncheckedRadio": "⚪️",
		"edit": "✒️",
		"menuSeparator": "─────────────────────────────────────────────"
	},

	// set compiler by file extension
	"wandbox.extensionCompilerMapping": {
		"c": null,
		"coffee": null,
		"cpp": null,
		"cr": null,
		"cs": null,
		"cxx": null,
		"d": null,
		"erl": null,
		"ex": null,
		"exs": null,
		"go": null,
		"groovy": null,
		"gvy": null,
		"hs": null,
		"java": null,
		"js": null,
		"lazy": null,
		"lisp": null,
		"lua": null,
		"ml": null,
		"nim": null,
		"pas": null,
		"php": null,
		"pl": null,
		"pony": null,
		"py": null,
		"rb": null,
		"rill": null,
		"rs": null,
		"scala": null,
		"sh": null,
		"sql": null,
		"swift": null,
		"vim": null
	},

	// set compiler by file extension
	"wandbox.extensionLanguageMapping": {
		"c": "C",
		"coffee": "CoffeeScript",
		"cpp": "C++",
		"cr": "Crystal",
		"cs": "C#",
		"cxx": "C++",
		"d": "D",
		"erl": "Erlang",
		"ex": "Elixir",
		"exs": "Elixir",
		"go": "Go",
		"groovy": "Groovy",
		"gvy": "Groovy",
		"hs": "Haskell",
		"java": "Java",
		"js": "JavaScript",
		"lazy": "Lazy K",
		"lisp": "Lisp",
		"lua": "Lua",
		"ml": "OCaml",
		"nim": "Nim",
		"pas": "Pascal",
		"php": "PHP",
		"pl": "Perl",
		"pony": "Pony",
		"py": "Python",
		"rb": "Ruby",
		"rill": "Rill",
		"rs": "Rust",
		"scala": "Scala",
		"sh": "Bash script",
		"sql": "SQL",
		"swift": "Swift",
		"vim": "Vim script"
	},

	// set hello world files
	"wandbox.helloWolrdFiles": [],

	// set compiler by language
	"wandbox.languageCompilerMapping": {
		"C": null,
		"CoffeeScript": null,
		"Crystal": null,
		"C++": null,
		"C#": null,
		"D": null,
		"Erlang": null,
		"Elixir": null,
		"Go": null,
		"Groovy": null,
		"Haskell": null,
		"Java": null,
		"JavaScript": null,
		"Lazy K": null,
		"Lisp": null,
		"Lua": null,
		"Nim": null,
		"OCaml": null,
		"Pascal": null,
		"PHP": null,
		"Perl": null,
		"Pony": null,
		"Python": null,
		"Ruby": null,
		"Rill": null,
		"Rust": null,
		"Scala": null,
		"Bash script": null,
		"SQL": null,
		"Swift": null,
		"Vim script": null
	},

	// set language in wandbox by language in vscode
	"wandbox.languageMapping": {
		"bat": null,
		"clojure": null,
		"coffeescript": "CoffeeScript",
		"c": "C",
		"cpp": "C++",
		"crystal": "Crystal",
		"csharp": "C#",
		"css": null,
		"diff": null,
		"dockerfile": null,
		"fsharp": null,
		"git-commit": null,
		"git-rebase": null,
		"go": "Go",
		"groovy": "Groovy",
		"handlebars": null,
		"html": null,
		"ini": null,
		"java": "Java",
		"javascript": "JavaScript",
		"json": null,
		"less": null,
		"lua": "Lua",
		"makefile": null,
		"markdown": null,
		"nim": null,
		"objective-c": null,
		"perl": "Perl",
		"perl6": null,
		"php": "PHP",
		"powershell": null,
		"jade": null,
		"pony": "Pony",
		"python": "Python",
		"r": null,
		"razor": null,
		"ruby": "Ruby",
		"rust": "Rust",
		"scss": null,
		"sass": null,
		"shaderlab": null,
		"shellscript": "Bash script",
		"sql": "SQL",
		"swift": "Swift",
		"typescript": null,
		"vb": null,
		"xml": null,
		"xsl": null,
		"yaml": null
	},

	// set max share history size
	"wandbox.maxHistorySize": 256,

	// set options by compiler
	"wandbox.options": {
		"compiler(example)": "option1,option2"
	},

	// output channel name
	"wandbox.outputChannelName": "Wandbox",

	// set raw runtime option by compiler
	"wandbox.runtimeOptionRaw": {
		"compiler(example)": "raw runtime option text"
	},

	// wandbox server url list ( first one is default wandbox server url )
	"wandbox.Servers": [
		"https://wandbox.org/",
		"https://wandbox.fetus.jp/"
	],

	// simplify post data when showing
	"wandbox.simplifyPostData": true,

	// print debug log on sftp output channel.(reload vscode when change this)
	"sftp.debug": false,

	// "Download" instead of "View Content" when open file in Remote Explorer
	"sftp.downloadWhenOpenInRemoteExplorer": false,

	// print debug log on sftp output channel.(reload vscode when change this)
	"sftp.printDebugLog": false,

	// array of commands
	"statusbar_command.commands": [
		{
			"text": "$(gear)",
			"tooltip": "workspace settings",
			"alignment": "right",
			"command": "workbench.action.openWorkspaceSettings"
		}
	],

	// Save absolute path in local-history.path
	"local-history.absolute": false,

	// Specify locale to use when displaying date
	"local-history.dateLocale": "",

	// A day number to purge local history. (0: no purge)
	"local-history.daysLimit": 30,

	// Is save in local history enabled (Never=0, Always=1, Limited to workspaceFolder=2)
	"local-history.enabled": 1,

	// Files or folder to not save
	"local-history.exclude": [
		"**/.history/**",
		"**/.vscode/**",
		"**/node_modules/**",
		"**/typings/**",
		"**/out/**",
		"**/Code/User/**"
	],

	// A max files to display
	"local-history.maxDisplay": 10,

	// Specify a location for .history folder (null: use workspaceFolder)
	"local-history.path": "",

	// Controls the delay in seconds after which local-history is saved. To avoid too many history files.
	"local-history.saveDelay": 0,

	// Specify a location for tree view: explorer or localHistory
	"local-history.treeLocation": "explorer",

	// yarn bin name
	"yarn.bin": "yarn",

	// Look for 'package.json' files in these directories
	"yarn.includeDirectories": [],

	// Run yarn commands in a terminal, otherwise shows the output in the output panel
	"yarn.runInTerminal": true,

	// Run yarn commands with the `--silent` option
	"yarn.runSilent": false,

	// Look for 'package.json' in the root directory of the workspace
	"yarn.useRootDirectory": true,

	// 
	"surround.custom": {},

	// 
	"surround.with.arrowFunction": {
		"label": "arrowFunction",
		"description": "const $name = ($params) => { ... }",
		"disabled": false,
		"snippet": "const ${1:fnName} = (${2:params}) => {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.asyncArrowFunction": {
		"label": "asyncArrowFunction",
		"description": "const $name = async ($params) => { ... }",
		"disabled": false,
		"snippet": "const ${1:fnName} = async (${2:params}) => {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.asyncFunctionDeclaration": {
		"label": "asyncFunctionDeclaration",
		"description": "async function $name ($params) { ... }",
		"disabled": false,
		"snippet": "async function ${1:name} (${2:params}) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.asyncFunctionExpression": {
		"label": "asyncFunctionExpression",
		"description": "const $name = async function ($params) { ... }",
		"disabled": false,
		"snippet": "const ${1:name} = async function (${2:params}) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.comment": {
		"label": "comment",
		"description": "/** ...  */",
		"disabled": false,
		"snippet": "/**\n\t$TM_SELECTED_TEXT\n*/$0"
	},

	// 
	"surround.with.element": {
		"label": "<element></element>",
		"description": "<element>...</element>",
		"disabled": false,
		"snippet": "<${1:element}$2>$TM_SELECTED_TEXT</$1>$0"
	},

	// 
	"surround.with.for": {
		"label": "for",
		"description": "for ($1) { ... }",
		"disabled": false,
		"snippet": "for ($1) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.forEach": {
		"label": "forEach",
		"description": "items.forEach((item) => { ... })",
		"disabled": false,
		"snippet": "${1:items}.forEach((${2:item}) => {\n\t$TM_SELECTED_TEXT\n})$0"
	},

	// 
	"surround.with.forEachAsync": {
		"label": "forEachAsync",
		"description": "items.forEach(async (item) => { ... })",
		"disabled": false,
		"snippet": "${1:items}.forEach(async (${2:item}) => {\n\t$TM_SELECTED_TEXT\n})$0"
	},

	// 
	"surround.with.forEachAsyncFn": {
		"label": "forEachAsyncFn",
		"description": "items.forEach(async function (item) { ... })",
		"disabled": false,
		"snippet": "${1:items}.forEach(async function (${2:item}) {\n\t$TM_SELECTED_TEXT\n})$0"
	},

	// 
	"surround.with.forEachFn": {
		"label": "forEachFn",
		"description": "items.forEach(function (item) { ... })",
		"disabled": false,
		"snippet": "${1:items}.forEach(function (${2:item}) {\n\t$TM_SELECTED_TEXT\n})$0"
	},

	// 
	"surround.with.fori": {
		"label": "fori",
		"description": "for (let i = 0; ... ; i = i + 1) { ... }",
		"disabled": false,
		"snippet": "for (let ${1:i} = ${2:0}; ${3:conditions}; $1 = $1 + 1) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.functionDeclaration": {
		"label": "functionDeclaration",
		"description": "function $name ($params) { ... }",
		"disabled": false,
		"snippet": "function ${1:name} (${2:params}) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.functionExpression": {
		"label": "functionExpression",
		"description": "const $name = function ($params) { ... }",
		"disabled": false,
		"snippet": "const ${1:name} = function (${2:params}) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.if": {
		"label": "if",
		"description": "if ($condition) { ... }",
		"disabled": false,
		"snippet": "if(${1:condition}) {\n\t$TM_SELECTED_TEXT\n}$0"
	},

	// 
	"surround.with.ifElse": {
		"label": "if/else",
		"description": "if ($condition) { ... } else { $else }",
		"disabled": false,
		"snippet": "if(${1:condition}) {\n\t$TM_SELECTED_TEXT\n} else {\n\t$2\n}$0"
	},

	// 
	"surround.with.region": {
		"label": "#region",
		"description": "#region $regionName ... #endregion",
		"disabled": false,
		"snippet": "// #region ${1:regionName}\n$TM_SELECTED_TEXT\n// #endregion$0"
	},

	// 
	"surround.with.tryCatch": {
		"label": "try/catch",
		"description": "try { ... } catch (err) { $catchBlock }",
		"disabled": false,
		"snippet": "try {\n\t$TM_SELECTED_TEXT\n} catch (err) {\n\t$1\n}$0"
	},

	// 
	"surround.with.tryCatchFinally": {
		"label": "try/catch/finally",
		"description": "try { ... } catch (err) {$catchBlock} finally { $finalBlock }",
		"disabled": false,
		"snippet": "try {\n\t$TM_SELECTED_TEXT\n} catch (err) {\n\t$1\n} finally {\n\t$2\n}$0"
	},

	// 
	"surround.with.tryFinally": {
		"label": "try/finaly",
		"description": "try { ... } finally { $finalBlock }",
		"disabled": false,
		"snippet": "try {\n\t$TM_SELECTED_TEXT\n} finally {\n\t$1\n}$0"
	},

	// Microsoft alias
	"docs.templates.alias": "",

	// GitHub ID
	"docs.templates.githubid": "",

	// Default Learn repo
	"docs.templates.learn_repo_id": "",

	// Author name of the project.
	"licenser.author": "",

	// User-defined file header
	"licenser.customHeader": "",

	// User-defined terms and conditions
	"licenser.customTermsAndConditions": "",

	// Disable header insertion on creation of new file (defaults to false).
	"licenser.disableAutoHeaderInsertion": false,

	// License setting for workspace. Available licenses are 'AGPLv3', 'AL2', 'BSD2', 'BSD3', 'GPLv2', 'GPLv3', 'LGPLv3', 'MIT', 'MPLv2', 'CC-BY-3', 'CC-BY-SA-3', 'CC-BY-ND-3', 'CC-BY-NC-3', 'CC-BY-NC-SA-3', 'CC-BY-NC-ND-3', 'CC-BY-4', 'CC-BY-SA-4', 'CC-BY-ND-4', 'CC-BY-NC-4', 'CC-BY-NC-SA-4', 'CC-BY-NC-ND-4', 'CC0-1', 'WTFPL', 'zlib'
	"licenser.license": "AL2",

	// Project name of the workspace belong to. This is used for GPL license template. This property should be in 'Workspace Settings'.
	"licenser.projectName": "",

	// Priority to use single line comment style to multiple line comment style for license header.
	"licenser.useSingleLineStyle": true,

	// Travis pro github token for authentication
	"travis.github_oauth_token": "",

	// Travis pro github password for authentication
	"travis.github_password": "",

	// Travis pro github user for authentication
	"travis.github_user": "",

	// Travis use pro or community
	"travis.pro": false,

	// Travis repository name for the project
	"travis.repository": "",

	// Whether build status should be polled
	"travis.statusPolling": true,

	// Number of seconds between status polling requests
	"travis.statusPollingInterval": 60,

	// Travis username for the project
	"travis.username": "",

	// Default value of where the path is displayed starts from. Root directory or workspace highest directory.
	"currentFilePath.defaultPathStartsFrom": "rootDirectory",

	// Specify default path style. Unix like or Windows like.
	"currentFilePath.defaultPathStyle": "unix",

	// The priority in the statusBar. Higher values shown more to the left.
	"currentFilePath.priorityInStatusBar": 0,

	// The folder containing your default config files
	"global-config.folder": "~/.vscode/",

	// A list of files that should be soft linked rather than copied
	"global-config.links": [],

	// Allows to activate (true) or deactivate (false) the parsing problems reporting.
	"yseopml.activateParsingProblemsReporting": true,

	// Controls the maximum number of problems produced by the server.
	"yseopml.maxNumberOfProblems": 100,

	// Allows to activate (true) or deactivate (false) the parsing of all YML files in the workspace at startup.
	"yseopml.parseAllProjectFilesAtStartup": true,

	// Absolute path to an XML file containing the YML types definition.
	"yseopml.pathToPredefinedObjectsXml": "",

	// Absolute path to Yseop CLI executable (“yseop” or “yseop.bat” − see Yseop CLI doc for more info).
	"yseopml.pathToYseopCli": "",

	// Traces the communication between VSCode and the language server.
	"yseopml.trace.server": "off",

	// commandArgs allows you add arguments to java command, such as "-DPLANTUML_LIMIT_SIZE=8192".
	"plantuml.commandArgs": [],

	// Specifies where all diagram files located (releative to workspace folder).
	"plantuml.diagramsRoot": "",

	// Decides concurrency count when export multiple diagrams.
	"plantuml.exportConcurrency": 3,

	// Export format. Leave it blank to pick format everytime you export.
	"plantuml.exportFormat": "",

	// Determine whether export image map (.cmapx) file when export.
	"plantuml.exportMapFile": false,

	// Exported workspace diagrams will be organized in this directory  (releative path to workspace folder).
	"plantuml.exportOutDir": "out",

	// Export diagrams to a folder which has same name with host file.
	"plantuml.exportSubFolder": true,

	// File extensions that find to export. Especially in workspace settings, you may add your own extensions so as to export diagrams in source code files, like ".java".
	"plantuml.fileExtensions": ".wsd,.pu,.puml,.plantuml,.iuml",

	// Specifies the include paths besides source folder and the 'diagramsRoot'.
	"plantuml.includepaths": [],

	// Files or folders to include before preview/export diagrams. You don't have to write "!include path/to/include.wsd" for every single diagram any more.
	"plantuml.includes": [],

	// Alternate plantuml.jar location. Leave it blank to use integrated jar.
	"plantuml.jar": "",

	// jarArgs allows you add arguments to plantuml.jar, such as "-config plantuml.config".
	"plantuml.jarArgs": [],

	// Java executable location.
	"plantuml.java": "java",

	// Decides if automatically update the preview window.
	"plantuml.previewAutoUpdate": true,

	// Decides if to display the snap indicators in the preview window.
	"plantuml.previewSnapIndicators": false,

	// Select diagram render for both export and preview.
	// Local: Render diagrams locally in traditional way. You need to set up JAVA and GraphViz first.
	// PlantUMLServer: Render diagrams by server which is specified with "plantuml.server". It's much faster, but requires a server.
	// Local is the default configuration.
	"plantuml.render": "Local",

	// Plantuml server to generate UML diagrams on-the-fly.
	"plantuml.server": "https://www.plantuml.com/plantuml",

	// URL format. Leave it blank to pick format everytime you make a URL.
	"plantuml.urlFormat": "",

	// URL result type. Simple URL or ready for MarkDown use.
	"plantuml.urlResult": "MarkDown",

	// Browsers to launch for preview.
	"previewServer.browsers": null,

	// Ignore default browsers.
	"previewServer.ignoreDefaultBrowser": false,

	// Controls wheter display notification or not.
	"previewServer.ignoreNotification": false,

	// Controls whether resume the web Server or not, when change settings.
	"previewServer.isWatchConfiguration": true,

	// Port number of the web Server.
	"previewServer.port": 8080,

	// Wrap your vhost with a proxy URL to view your site.
	"previewServer.proxy": "",

	// Name of startup project. This setting is meaningful only when in the workspace.
	"previewServer.startupProject": null,

	// Whether synchronized or not.
	"previewServer.sync": true,

	// Settings for UI page.
	"previewServer.ui": {},

	// log level.
	"graphqlForVSCode.loglevel": "info",

	// A path used for resolving the @playlyfe/gql module. (default: workspaceFolder)
	"graphqlForVSCode.nodePath": ".",

	// The location of the node binary to run gql-language-server under. (default: uses vscode bundled node)
	"graphqlForVSCode.runtime": null,

	// Traces the communication between VSCode and the gql language server.
	"graphqlForVSCode.trace.server": "off",

	// Hide explorer arrows before folder.
	"city-lights-icons-vsc.hidesExplorerArrows": false,

	// Enter the Bitbucket app password.
	"bb-spectacle.appPassword": "",

	// Enter the Bitbucket repo URL.
	"bb-spectacle.repoUrl": "",

	// Enter the Bitbucket username.
	"bb-spectacle.username": "",

	// Add a space after completion
	"dictCompletion.addSpaceAfterCompletion": false,

	// Only show completion list until N characters
	"dictCompletion.leastNumOfChars": 0,

	// Use external user dictionary file or `userDictionary` inside VSCode settings
	"dictCompletion.useExternalUserDictFile": true,

	// Custom words for completion
	"dictCompletion.userDictionary": [],

	// Current accent color selected
	"materialTheme.accent": "Blue",

	// Maximum number of notifications to be displayed simultaneously. Use negative number to display all notifications.
	"checkNpmUpdates.maximumNumberOfNotification": 10,

	// Number of seconds before next check for updates is executed. If zero or negative, then next check will not be automatically executed. Use shortcut to execute check manually.
	"checkNpmUpdates.numberOfSecondsBeforeRepeat": 14400,

	// Tells LiveReload to reload CSS files in the background instead of refreshing the page. The default for this is true.
	"livereload.applyCSSLive": true,

	// Tells LiveReload to reload image files in the background instead of refreshing the page. The default for this is true.
	"livereload.applyImageLive": true,

	// To show debug messages in console.
	"livereload.debug": false,

	// To add a delay (in miliseconds) between when livereload detects a change to the filesystem and when it notifies the browser.
	"livereload.delayForUpdate": 0,

	// To specify additional exclusion patterns e.g. html, images.
	"livereload.exclusions": ".DS_Store,.gitignore,.git,.svn,.hg",

	// To include additional extentions that you want to observe e.g. jade,scss.
	"livereload.exts": "html,htm,css,js,png,gif,jpg,php,php5,py,rb,erb,coffee,twig",

	// To specify the listening port.
	"livereload.port": 9222,

	// An optional object of options to be passed to https.createServer (if not provided, http.createServer is used instead).
	"livereload.useHTTPS": null,

	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "",

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

	// JSON object name for showing
	"jsonHelper.object.name": "jsonObj",

	// Max layer for revealing keys in quick pick
	"jsonHelper.quickpick.maxlayer": 99,

	// Json for Visual Studio Code
	"JSON-zain.author.ZainChen": "Welcome to vscode-json.",

	// Whether to update the menu in real time based on the contents of the json file!
	"JSON-zain.json.parsing": false,

	// A stylelint configuration object.
	"htmllint.config": null,

	// Control whether htmllint is enabled or not.
	"htmllint.enable": true,

	// Your preferred language setting in standard 2-char language Code Reference code
	"vscodeGoogleTranslate.preferredLanguage": false,

	// Determines whether to omit informational messages
	"express.omitInformationMessage": false,

	// Specifies the port number the Express server should listen to
	"express.portNumber": 80,

	// Specifies the maximum port number to use for random port number
	"express.randomPortNumber.max": 8999,

	// Specifies the minimum port number to use for random port number
	"express.randomPortNumber.min": 8000,

	// Specifies the path to be hosted on Express, relative to the workspace root
	"express.relativeRoot": null,

	// Determines whether to show output on server start
	"express.showOutput": true,

	// Whether the plaintext comment highlighter should be active
	"better-comments.highlightPlainText": false,

	// Whether the multiline comment highlighter should be active
	"better-comments.multilineComments": true,

	// Tags which are used to color the comments. Changes require a restart of VS Code to take effect
	"better-comments.tags": [
		{
			"tag": "!",
			"color": "#FF2D00",
			"strikethrough": false,
			"backgroundColor": "transparent"
		},
		{
			"tag": "?",
			"color": "#3498DB",
			"strikethrough": false,
			"backgroundColor": "transparent"
		},
		{
			"tag": "//",
			"color": "#474747",
			"strikethrough": true,
			"backgroundColor": "transparent"
		},
		{
			"tag": "todo",
			"color": "#FF8C00",
			"strikethrough": false,
			"backgroundColor": "transparent"
		},
		{
			"tag": "*",
			"color": "#98C379",
			"strikethrough": false,
			"backgroundColor": "transparent"
		}
	],

}
